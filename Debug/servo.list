
servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08009f08  08009f08  00019f08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f8c  08009f8c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009f8c  08009f8c  00019f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f94  08009f94  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f94  08009f94  00019f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f98  08009f98  00019f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  20000090  0800a02c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  0800a02c  00020914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea17  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e89  00000000  00000000  0003ead7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018f8  00000000  00000000  00042960  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001750  00000000  00000000  00044258  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026342  00000000  00000000  000459a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015d4e  00000000  00000000  0006bcea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8e3a  00000000  00000000  00081a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015a872  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006de0  00000000  00000000  0015a8f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ef0 	.word	0x08009ef0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009ef0 	.word	0x08009ef0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 fd07 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f008 faa0 	bl	8008af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fd1f 	bl	8001026 <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 fce7 	bl	8000fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000028 	.word	0x20000028
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	200000c0 	.word	0x200000c0

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200000c0 	.word	0x200000c0

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_Delay+0x40>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d101      	bne.n	80006be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e033      	b.n	8000726 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d109      	bne.n	80006da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f008 fa3e 	bl	8008b48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d118      	bne.n	8000718 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006ee:	f023 0302 	bic.w	r3, r3, #2
 80006f2:	f043 0202 	orr.w	r2, r3, #2
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 fa92 	bl	8000c24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f023 0303 	bic.w	r3, r3, #3
 800070e:	f043 0201 	orr.w	r2, r3, #1
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	641a      	str	r2, [r3, #64]	; 0x40
 8000716:	e001      	b.n	800071c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000742:	2b01      	cmp	r3, #1
 8000744:	d101      	bne.n	800074a <HAL_ADC_Start+0x1a>
 8000746:	2302      	movs	r3, #2
 8000748:	e0a5      	b.n	8000896 <HAL_ADC_Start+0x166>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2201      	movs	r2, #1
 800074e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	2b01      	cmp	r3, #1
 800075e:	d018      	beq.n	8000792 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	689a      	ldr	r2, [r3, #8]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f042 0201 	orr.w	r2, r2, #1
 800076e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000770:	4b4c      	ldr	r3, [pc, #304]	; (80008a4 <HAL_ADC_Start+0x174>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a4c      	ldr	r2, [pc, #304]	; (80008a8 <HAL_ADC_Start+0x178>)
 8000776:	fba2 2303 	umull	r2, r3, r2, r3
 800077a:	0c9a      	lsrs	r2, r3, #18
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000784:	e002      	b.n	800078c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	3b01      	subs	r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1f9      	bne.n	8000786 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	2b01      	cmp	r3, #1
 800079e:	d179      	bne.n	8000894 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007a8:	f023 0301 	bic.w	r3, r3, #1
 80007ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d007      	beq.n	80007d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007de:	d106      	bne.n	80007ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e4:	f023 0206 	bic.w	r2, r3, #6
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	645a      	str	r2, [r3, #68]	; 0x44
 80007ec:	e002      	b.n	80007f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <HAL_ADC_Start+0x17c>)
 80007fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000808:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	f003 031f 	and.w	r3, r3, #31
 8000812:	2b00      	cmp	r3, #0
 8000814:	d12a      	bne.n	800086c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a25      	ldr	r2, [pc, #148]	; (80008b0 <HAL_ADC_Start+0x180>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d015      	beq.n	800084c <HAL_ADC_Start+0x11c>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a23      	ldr	r2, [pc, #140]	; (80008b4 <HAL_ADC_Start+0x184>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d105      	bne.n	8000836 <HAL_ADC_Start+0x106>
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <HAL_ADC_Start+0x17c>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f003 031f 	and.w	r3, r3, #31
 8000832:	2b00      	cmp	r3, #0
 8000834:	d00a      	beq.n	800084c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <HAL_ADC_Start+0x188>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d129      	bne.n	8000894 <HAL_ADC_Start+0x164>
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <HAL_ADC_Start+0x17c>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	f003 031f 	and.w	r3, r3, #31
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d823      	bhi.n	8000894 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000856:	2b00      	cmp	r3, #0
 8000858:	d11c      	bne.n	8000894 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	689a      	ldr	r2, [r3, #8]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	e013      	b.n	8000894 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <HAL_ADC_Start+0x180>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d10e      	bne.n	8000894 <HAL_ADC_Start+0x164>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000880:	2b00      	cmp	r3, #0
 8000882:	d107      	bne.n	8000894 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000892:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000028 	.word	0x20000028
 80008a8:	431bde83 	.word	0x431bde83
 80008ac:	40012300 	.word	0x40012300
 80008b0:	40012000 	.word	0x40012000
 80008b4:	40012100 	.word	0x40012100
 80008b8:	40012200 	.word	0x40012200

080008bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008d8:	d113      	bne.n	8000902 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008e8:	d10b      	bne.n	8000902 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f043 0220 	orr.w	r2, r3, #32
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e05c      	b.n	80009bc <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000902:	f7ff fea3 	bl	800064c <HAL_GetTick>
 8000906:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000908:	e01a      	b.n	8000940 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000910:	d016      	beq.n	8000940 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d007      	beq.n	8000928 <HAL_ADC_PollForConversion+0x6c>
 8000918:	f7ff fe98 	bl	800064c <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	429a      	cmp	r2, r3
 8000926:	d20b      	bcs.n	8000940 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f043 0204 	orr.w	r2, r3, #4
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800093c:	2303      	movs	r3, #3
 800093e:	e03d      	b.n	80009bc <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	2b02      	cmp	r3, #2
 800094c:	d1dd      	bne.n	800090a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f06f 0212 	mvn.w	r2, #18
 8000956:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d123      	bne.n	80009ba <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000976:	2b00      	cmp	r3, #0
 8000978:	d11f      	bne.n	80009ba <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000980:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000984:	2b00      	cmp	r3, #0
 8000986:	d006      	beq.n	8000996 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000992:	2b00      	cmp	r3, #0
 8000994:	d111      	bne.n	80009ba <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d105      	bne.n	80009ba <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f043 0201 	orr.w	r2, r3, #1
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d101      	bne.n	80009fc <HAL_ADC_ConfigChannel+0x1c>
 80009f8:	2302      	movs	r3, #2
 80009fa:	e105      	b.n	8000c08 <HAL_ADC_ConfigChannel+0x228>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2201      	movs	r2, #1
 8000a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b09      	cmp	r3, #9
 8000a0a:	d925      	bls.n	8000a58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	68d9      	ldr	r1, [r3, #12]
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	4413      	add	r3, r2
 8000a20:	3b1e      	subs	r3, #30
 8000a22:	2207      	movs	r2, #7
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43da      	mvns	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	400a      	ands	r2, r1
 8000a30:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	68d9      	ldr	r1, [r3, #12]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	4603      	mov	r3, r0
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4403      	add	r3, r0
 8000a4a:	3b1e      	subs	r3, #30
 8000a4c:	409a      	lsls	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	430a      	orrs	r2, r1
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	e022      	b.n	8000a9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6919      	ldr	r1, [r3, #16]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	461a      	mov	r2, r3
 8000a66:	4613      	mov	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43da      	mvns	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	400a      	ands	r2, r1
 8000a7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	6919      	ldr	r1, [r3, #16]
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	4603      	mov	r3, r0
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	4403      	add	r3, r0
 8000a94:	409a      	lsls	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d824      	bhi.n	8000af0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685a      	ldr	r2, [r3, #4]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	3b05      	subs	r3, #5
 8000ab8:	221f      	movs	r2, #31
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	400a      	ands	r2, r1
 8000ac6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	4613      	mov	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	3b05      	subs	r3, #5
 8000ae2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	430a      	orrs	r2, r1
 8000aec:	635a      	str	r2, [r3, #52]	; 0x34
 8000aee:	e04c      	b.n	8000b8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2b0c      	cmp	r3, #12
 8000af6:	d824      	bhi.n	8000b42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	4613      	mov	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	4413      	add	r3, r2
 8000b08:	3b23      	subs	r3, #35	; 0x23
 8000b0a:	221f      	movs	r2, #31
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43da      	mvns	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	400a      	ands	r2, r1
 8000b18:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4413      	add	r3, r2
 8000b32:	3b23      	subs	r3, #35	; 0x23
 8000b34:	fa00 f203 	lsl.w	r2, r0, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b40:	e023      	b.n	8000b8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4413      	add	r3, r2
 8000b52:	3b41      	subs	r3, #65	; 0x41
 8000b54:	221f      	movs	r2, #31
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	400a      	ands	r2, r1
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	4618      	mov	r0, r3
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	4613      	mov	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	3b41      	subs	r3, #65	; 0x41
 8000b7e:	fa00 f203 	lsl.w	r2, r0, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	430a      	orrs	r2, r1
 8000b88:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b8a:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <HAL_ADC_ConfigChannel+0x234>)
 8000b8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a21      	ldr	r2, [pc, #132]	; (8000c18 <HAL_ADC_ConfigChannel+0x238>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d109      	bne.n	8000bac <HAL_ADC_ConfigChannel+0x1cc>
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b12      	cmp	r3, #18
 8000b9e:	d105      	bne.n	8000bac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <HAL_ADC_ConfigChannel+0x238>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d123      	bne.n	8000bfe <HAL_ADC_ConfigChannel+0x21e>
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b10      	cmp	r3, #16
 8000bbc:	d003      	beq.n	8000bc6 <HAL_ADC_ConfigChannel+0x1e6>
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b11      	cmp	r3, #17
 8000bc4:	d11b      	bne.n	8000bfe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b10      	cmp	r3, #16
 8000bd8:	d111      	bne.n	8000bfe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_ADC_ConfigChannel+0x23c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a10      	ldr	r2, [pc, #64]	; (8000c20 <HAL_ADC_ConfigChannel+0x240>)
 8000be0:	fba2 2303 	umull	r2, r3, r2, r3
 8000be4:	0c9a      	lsrs	r2, r3, #18
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000bf0:	e002      	b.n	8000bf8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1f9      	bne.n	8000bf2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	40012300 	.word	0x40012300
 8000c18:	40012000 	.word	0x40012000
 8000c1c:	20000028 	.word	0x20000028
 8000c20:	431bde83 	.word	0x431bde83

08000c24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c2c:	4b79      	ldr	r3, [pc, #484]	; (8000e14 <ADC_Init+0x1f0>)
 8000c2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	431a      	orrs	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6859      	ldr	r1, [r3, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	021a      	lsls	r2, r3, #8
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000c7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6859      	ldr	r1, [r3, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6899      	ldr	r1, [r3, #8]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	68da      	ldr	r2, [r3, #12]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb6:	4a58      	ldr	r2, [pc, #352]	; (8000e18 <ADC_Init+0x1f4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d022      	beq.n	8000d02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	689a      	ldr	r2, [r3, #8]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000cca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6899      	ldr	r1, [r3, #8]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6899      	ldr	r1, [r3, #8]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	e00f      	b.n	8000d22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f022 0202 	bic.w	r2, r2, #2
 8000d30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6899      	ldr	r1, [r3, #8]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7e1b      	ldrb	r3, [r3, #24]
 8000d3c:	005a      	lsls	r2, r3, #1
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d01b      	beq.n	8000d88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000d6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6859      	ldr	r1, [r3, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	035a      	lsls	r2, r3, #13
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	430a      	orrs	r2, r1
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	e007      	b.n	8000d98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	051a      	lsls	r2, r3, #20
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000dcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6899      	ldr	r1, [r3, #8]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000dda:	025a      	lsls	r2, r3, #9
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000df2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	6899      	ldr	r1, [r3, #8]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	029a      	lsls	r2, r3, #10
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	430a      	orrs	r2, r1
 8000e06:	609a      	str	r2, [r3, #8]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	40012300 	.word	0x40012300
 8000e18:	0f000001 	.word	0x0f000001

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <__NVIC_EnableIRQ+0x38>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f88:	d301      	bcc.n	8000f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00f      	b.n	8000fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <SysTick_Config+0x40>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f96:	210f      	movs	r1, #15
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f7ff ff8e 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff29 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe4:	f7ff ff3e 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff ff8e 	bl	8000f10 <NVIC_EncodePriority>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff5d 	bl	8000ebc <__NVIC_SetPriority>
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff31 	bl	8000e80 <__NVIC_EnableIRQ>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffa2 	bl	8000f78 <SysTick_Config>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
 800105a:	e16b      	b.n	8001334 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	429a      	cmp	r2, r3
 8001076:	f040 815a 	bne.w	800132e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d00b      	beq.n	800109a <HAL_GPIO_Init+0x5a>
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800108e:	2b11      	cmp	r3, #17
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b12      	cmp	r3, #18
 8001098:	d130      	bne.n	80010fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	f003 0201 	and.w	r2, r3, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0xfc>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b12      	cmp	r3, #18
 800113a:	d123      	bne.n	8001184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	220f      	movs	r2, #15
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	69b9      	ldr	r1, [r7, #24]
 8001180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0203 	and.w	r2, r3, #3
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80b4 	beq.w	800132e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b5f      	ldr	r3, [pc, #380]	; (8001348 <HAL_GPIO_Init+0x308>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a5e      	ldr	r2, [pc, #376]	; (8001348 <HAL_GPIO_Init+0x308>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b5c      	ldr	r3, [pc, #368]	; (8001348 <HAL_GPIO_Init+0x308>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e2:	4a5a      	ldr	r2, [pc, #360]	; (800134c <HAL_GPIO_Init+0x30c>)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3302      	adds	r3, #2
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a51      	ldr	r2, [pc, #324]	; (8001350 <HAL_GPIO_Init+0x310>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d02b      	beq.n	8001266 <HAL_GPIO_Init+0x226>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a50      	ldr	r2, [pc, #320]	; (8001354 <HAL_GPIO_Init+0x314>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d025      	beq.n	8001262 <HAL_GPIO_Init+0x222>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4f      	ldr	r2, [pc, #316]	; (8001358 <HAL_GPIO_Init+0x318>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01f      	beq.n	800125e <HAL_GPIO_Init+0x21e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4e      	ldr	r2, [pc, #312]	; (800135c <HAL_GPIO_Init+0x31c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x21a>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4d      	ldr	r2, [pc, #308]	; (8001360 <HAL_GPIO_Init+0x320>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x216>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4c      	ldr	r2, [pc, #304]	; (8001364 <HAL_GPIO_Init+0x324>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x212>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4b      	ldr	r2, [pc, #300]	; (8001368 <HAL_GPIO_Init+0x328>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x20e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4a      	ldr	r2, [pc, #296]	; (800136c <HAL_GPIO_Init+0x32c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x20a>
 8001246:	2307      	movs	r3, #7
 8001248:	e00e      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800124a:	2308      	movs	r3, #8
 800124c:	e00c      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800124e:	2306      	movs	r3, #6
 8001250:	e00a      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001252:	2305      	movs	r3, #5
 8001254:	e008      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001256:	2304      	movs	r3, #4
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800125a:	2303      	movs	r3, #3
 800125c:	e004      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800125e:	2302      	movs	r3, #2
 8001260:	e002      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001266:	2300      	movs	r3, #0
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	f002 0203 	and.w	r2, r2, #3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4093      	lsls	r3, r2
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001278:	4934      	ldr	r1, [pc, #208]	; (800134c <HAL_GPIO_Init+0x30c>)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001286:	4b3a      	ldr	r3, [pc, #232]	; (8001370 <HAL_GPIO_Init+0x330>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012aa:	4a31      	ldr	r2, [pc, #196]	; (8001370 <HAL_GPIO_Init+0x330>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012b0:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <HAL_GPIO_Init+0x330>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d4:	4a26      	ldr	r2, [pc, #152]	; (8001370 <HAL_GPIO_Init+0x330>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012da:	4b25      	ldr	r3, [pc, #148]	; (8001370 <HAL_GPIO_Init+0x330>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fe:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <HAL_GPIO_Init+0x330>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <HAL_GPIO_Init+0x330>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001328:	4a11      	ldr	r2, [pc, #68]	; (8001370 <HAL_GPIO_Init+0x330>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3301      	adds	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b0f      	cmp	r3, #15
 8001338:	f67f ae90 	bls.w	800105c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800133c:	bf00      	nop
 800133e:	3724      	adds	r7, #36	; 0x24
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	40023800 	.word	0x40023800
 800134c:	40013800 	.word	0x40013800
 8001350:	40020000 	.word	0x40020000
 8001354:	40020400 	.word	0x40020400
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40021000 	.word	0x40021000
 8001364:	40021400 	.word	0x40021400
 8001368:	40021800 	.word	0x40021800
 800136c:	40021c00 	.word	0x40021c00
 8001370:	40013c00 	.word	0x40013c00

08001374 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691a      	ldr	r2, [r3, #16]
 8001384:	887b      	ldrh	r3, [r7, #2]
 8001386:	4013      	ands	r3, r2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	e001      	b.n	8001396 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
 80013b0:	4613      	mov	r3, r2
 80013b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b4:	787b      	ldrb	r3, [r7, #1]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ba:	887a      	ldrh	r2, [r7, #2]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c0:	e003      	b.n	80013ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	619a      	str	r2, [r3, #24]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d8:	b08f      	sub	sp, #60	; 0x3c
 80013da:	af0a      	add	r7, sp, #40	; 0x28
 80013dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e054      	b.n	8001492 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d106      	bne.n	8001408 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f007 fe58 	bl	80090b8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2203      	movs	r2, #3
 800140c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f004 fade 	bl	80059e8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	687e      	ldr	r6, [r7, #4]
 8001434:	466d      	mov	r5, sp
 8001436:	f106 0410 	add.w	r4, r6, #16
 800143a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800143c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800143e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001442:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001446:	e885 0003 	stmia.w	r5, {r0, r1}
 800144a:	1d33      	adds	r3, r6, #4
 800144c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800144e:	6838      	ldr	r0, [r7, #0]
 8001450:	f004 fa58 	bl	8005904 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2101      	movs	r1, #1
 800145a:	4618      	mov	r0, r3
 800145c:	f004 fad5 	bl	8005a0a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	687e      	ldr	r6, [r7, #4]
 8001468:	466d      	mov	r5, sp
 800146a:	f106 0410 	add.w	r4, r6, #16
 800146e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001476:	e894 0003 	ldmia.w	r4, {r0, r1}
 800147a:	e885 0003 	stmia.w	r5, {r0, r1}
 800147e:	1d33      	adds	r3, r6, #4
 8001480:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001482:	6838      	ldr	r0, [r7, #0]
 8001484:	f004 fbe8 	bl	8005c58 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800149a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800149a:	b590      	push	{r4, r7, lr}
 800149c:	b089      	sub	sp, #36	; 0x24
 800149e:	af04      	add	r7, sp, #16
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	4608      	mov	r0, r1
 80014a4:	4611      	mov	r1, r2
 80014a6:	461a      	mov	r2, r3
 80014a8:	4603      	mov	r3, r0
 80014aa:	70fb      	strb	r3, [r7, #3]
 80014ac:	460b      	mov	r3, r1
 80014ae:	70bb      	strb	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d101      	bne.n	80014c2 <HAL_HCD_HC_Init+0x28>
 80014be:	2302      	movs	r3, #2
 80014c0:	e07f      	b.n	80015c2 <HAL_HCD_HC_Init+0x128>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80014ca:	78fa      	ldrb	r2, [r7, #3]
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	440b      	add	r3, r1
 80014d8:	333d      	adds	r3, #61	; 0x3d
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014de:	78fa      	ldrb	r2, [r7, #3]
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	440b      	add	r3, r1
 80014ec:	3338      	adds	r3, #56	; 0x38
 80014ee:	787a      	ldrb	r2, [r7, #1]
 80014f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80014f2:	78fa      	ldrb	r2, [r7, #3]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	440b      	add	r3, r1
 8001500:	3340      	adds	r3, #64	; 0x40
 8001502:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001504:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001506:	78fa      	ldrb	r2, [r7, #3]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	440b      	add	r3, r1
 8001514:	3339      	adds	r3, #57	; 0x39
 8001516:	78fa      	ldrb	r2, [r7, #3]
 8001518:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800151a:	78fa      	ldrb	r2, [r7, #3]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	440b      	add	r3, r1
 8001528:	333f      	adds	r3, #63	; 0x3f
 800152a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800152e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001530:	78fa      	ldrb	r2, [r7, #3]
 8001532:	78bb      	ldrb	r3, [r7, #2]
 8001534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	440b      	add	r3, r1
 8001546:	333a      	adds	r3, #58	; 0x3a
 8001548:	4602      	mov	r2, r0
 800154a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800154c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001550:	2b00      	cmp	r3, #0
 8001552:	da0a      	bge.n	800156a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001554:	78fa      	ldrb	r2, [r7, #3]
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	440b      	add	r3, r1
 8001562:	333b      	adds	r3, #59	; 0x3b
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	e009      	b.n	800157e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800156a:	78fa      	ldrb	r2, [r7, #3]
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	333b      	adds	r3, #59	; 0x3b
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800157e:	78fa      	ldrb	r2, [r7, #3]
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	440b      	add	r3, r1
 800158c:	333c      	adds	r3, #60	; 0x3c
 800158e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001592:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	787c      	ldrb	r4, [r7, #1]
 800159a:	78ba      	ldrb	r2, [r7, #2]
 800159c:	78f9      	ldrb	r1, [r7, #3]
 800159e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015a0:	9302      	str	r3, [sp, #8]
 80015a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	4623      	mov	r3, r4
 80015b0:	f004 fcd4 	bl	8005f5c <USB_HC_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd90      	pop	{r4, r7, pc}

080015ca <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_HCD_HC_Halt+0x1e>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e00f      	b.n	8001608 <HAL_HCD_HC_Halt+0x3e>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	78fa      	ldrb	r2, [r7, #3]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f004 ff0e 	bl	800641a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	4608      	mov	r0, r1
 800161a:	4611      	mov	r1, r2
 800161c:	461a      	mov	r2, r3
 800161e:	4603      	mov	r3, r0
 8001620:	70fb      	strb	r3, [r7, #3]
 8001622:	460b      	mov	r3, r1
 8001624:	70bb      	strb	r3, [r7, #2]
 8001626:	4613      	mov	r3, r2
 8001628:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800162a:	78fa      	ldrb	r2, [r7, #3]
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	440b      	add	r3, r1
 8001638:	333b      	adds	r3, #59	; 0x3b
 800163a:	78ba      	ldrb	r2, [r7, #2]
 800163c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800163e:	78fa      	ldrb	r2, [r7, #3]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	440b      	add	r3, r1
 800164c:	333f      	adds	r3, #63	; 0x3f
 800164e:	787a      	ldrb	r2, [r7, #1]
 8001650:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001652:	7c3b      	ldrb	r3, [r7, #16]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10a      	bne.n	800166e <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001658:	78fa      	ldrb	r2, [r7, #3]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	440b      	add	r3, r1
 8001666:	3342      	adds	r3, #66	; 0x42
 8001668:	2203      	movs	r2, #3
 800166a:	701a      	strb	r2, [r3, #0]
 800166c:	e009      	b.n	8001682 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800166e:	78fa      	ldrb	r2, [r7, #3]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	440b      	add	r3, r1
 800167c:	3342      	adds	r3, #66	; 0x42
 800167e:	2202      	movs	r2, #2
 8001680:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001682:	787b      	ldrb	r3, [r7, #1]
 8001684:	2b03      	cmp	r3, #3
 8001686:	f200 80d6 	bhi.w	8001836 <HAL_HCD_HC_SubmitRequest+0x226>
 800168a:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <HAL_HCD_HC_SubmitRequest+0x80>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	080016a1 	.word	0x080016a1
 8001694:	08001821 	.word	0x08001821
 8001698:	0800170d 	.word	0x0800170d
 800169c:	08001797 	.word	0x08001797
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016a0:	7c3b      	ldrb	r3, [r7, #16]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	f040 80c9 	bne.w	800183a <HAL_HCD_HC_SubmitRequest+0x22a>
 80016a8:	78bb      	ldrb	r3, [r7, #2]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f040 80c5 	bne.w	800183a <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 80016b0:	8b3b      	ldrh	r3, [r7, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016b6:	78fa      	ldrb	r2, [r7, #3]
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	440b      	add	r3, r1
 80016c4:	3351      	adds	r3, #81	; 0x51
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016ca:	78fa      	ldrb	r2, [r7, #3]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	440b      	add	r3, r1
 80016d8:	3351      	adds	r3, #81	; 0x51
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10a      	bne.n	80016f6 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	440b      	add	r3, r1
 80016ee:	3342      	adds	r3, #66	; 0x42
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016f4:	e0a1      	b.n	800183a <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	3342      	adds	r3, #66	; 0x42
 8001706:	2202      	movs	r2, #2
 8001708:	701a      	strb	r2, [r3, #0]
      break;
 800170a:	e096      	b.n	800183a <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800170c:	78bb      	ldrb	r3, [r7, #2]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d120      	bne.n	8001754 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001712:	78fa      	ldrb	r2, [r7, #3]
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	440b      	add	r3, r1
 8001720:	3351      	adds	r3, #81	; 0x51
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10a      	bne.n	800173e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001728:	78fa      	ldrb	r2, [r7, #3]
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	440b      	add	r3, r1
 8001736:	3342      	adds	r3, #66	; 0x42
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800173c:	e07e      	b.n	800183c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	3342      	adds	r3, #66	; 0x42
 800174e:	2202      	movs	r2, #2
 8001750:	701a      	strb	r2, [r3, #0]
      break;
 8001752:	e073      	b.n	800183c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001754:	78fa      	ldrb	r2, [r7, #3]
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	3350      	adds	r3, #80	; 0x50
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10a      	bne.n	8001780 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	3342      	adds	r3, #66	; 0x42
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
      break;
 800177e:	e05d      	b.n	800183c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001780:	78fa      	ldrb	r2, [r7, #3]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	440b      	add	r3, r1
 800178e:	3342      	adds	r3, #66	; 0x42
 8001790:	2202      	movs	r2, #2
 8001792:	701a      	strb	r2, [r3, #0]
      break;
 8001794:	e052      	b.n	800183c <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001796:	78bb      	ldrb	r3, [r7, #2]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d120      	bne.n	80017de <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800179c:	78fa      	ldrb	r2, [r7, #3]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	440b      	add	r3, r1
 80017aa:	3351      	adds	r3, #81	; 0x51
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10a      	bne.n	80017c8 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017b2:	78fa      	ldrb	r2, [r7, #3]
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	440b      	add	r3, r1
 80017c0:	3342      	adds	r3, #66	; 0x42
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017c6:	e039      	b.n	800183c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	3342      	adds	r3, #66	; 0x42
 80017d8:	2202      	movs	r2, #2
 80017da:	701a      	strb	r2, [r3, #0]
      break;
 80017dc:	e02e      	b.n	800183c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	440b      	add	r3, r1
 80017ec:	3350      	adds	r3, #80	; 0x50
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10a      	bne.n	800180a <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017f4:	78fa      	ldrb	r2, [r7, #3]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	3342      	adds	r3, #66	; 0x42
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
      break;
 8001808:	e018      	b.n	800183c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800180a:	78fa      	ldrb	r2, [r7, #3]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	3342      	adds	r3, #66	; 0x42
 800181a:	2202      	movs	r2, #2
 800181c:	701a      	strb	r2, [r3, #0]
      break;
 800181e:	e00d      	b.n	800183c <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	440b      	add	r3, r1
 800182e:	3342      	adds	r3, #66	; 0x42
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
      break;
 8001834:	e002      	b.n	800183c <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001836:	bf00      	nop
 8001838:	e000      	b.n	800183c <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800183a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	3344      	adds	r3, #68	; 0x44
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	8b39      	ldrh	r1, [r7, #24]
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4403      	add	r3, r0
 8001860:	3348      	adds	r3, #72	; 0x48
 8001862:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001864:	78fa      	ldrb	r2, [r7, #3]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	440b      	add	r3, r1
 8001872:	335c      	adds	r3, #92	; 0x5c
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001878:	78fa      	ldrb	r2, [r7, #3]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	334c      	adds	r3, #76	; 0x4c
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800188c:	78fa      	ldrb	r2, [r7, #3]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	440b      	add	r3, r1
 800189a:	3339      	adds	r3, #57	; 0x39
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018a0:	78fa      	ldrb	r2, [r7, #3]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	440b      	add	r3, r1
 80018ae:	335d      	adds	r3, #93	; 0x5d
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	78fa      	ldrb	r2, [r7, #3]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	3338      	adds	r3, #56	; 0x38
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	18d1      	adds	r1, r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	f004 fc4e 	bl	8006170 <USB_HC_StartXfer>
 80018d4:	4603      	mov	r3, r0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop

080018e0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f004 f96b 	bl	8005bd2 <USB_GetMode>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b01      	cmp	r3, #1
 8001900:	f040 80f1 	bne.w	8001ae6 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f004 f94f 	bl	8005bac <USB_ReadInterrupts>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80e7 	beq.w	8001ae4 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f004 f946 	bl	8005bac <USB_ReadInterrupts>
 8001920:	4603      	mov	r3, r0
 8001922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001926:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800192a:	d104      	bne.n	8001936 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001934:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f004 f936 	bl	8005bac <USB_ReadInterrupts>
 8001940:	4603      	mov	r3, r0
 8001942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800194a:	d104      	bne.n	8001956 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001954:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f004 f926 	bl	8005bac <USB_ReadInterrupts>
 8001960:	4603      	mov	r3, r0
 8001962:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001966:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800196a:	d104      	bne.n	8001976 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001974:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f004 f916 	bl	8005bac <USB_ReadInterrupts>
 8001980:	4603      	mov	r3, r0
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b02      	cmp	r3, #2
 8001988:	d103      	bne.n	8001992 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2202      	movs	r2, #2
 8001990:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f004 f908 	bl	8005bac <USB_ReadInterrupts>
 800199c:	4603      	mov	r3, r0
 800199e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019a6:	d117      	bne.n	80019d8 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80019b6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80019ba:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f007 fbf9 	bl	80091b4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2101      	movs	r1, #1
 80019c8:	4618      	mov	r0, r3
 80019ca:	f004 fa01 	bl	8005dd0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f004 f8e5 	bl	8005bac <USB_ReadInterrupts>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ec:	d102      	bne.n	80019f4 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f001 f8c8 	bl	8002b84 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f004 f8d7 	bl	8005bac <USB_ReadInterrupts>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d106      	bne.n	8001a16 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f007 fbb7 	bl	800917c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2208      	movs	r2, #8
 8001a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f004 f8c6 	bl	8005bac <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a2a:	d138      	bne.n	8001a9e <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f004 fce1 	bl	80063f8 <USB_HC_ReadInterrupt>
 8001a36:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e025      	b.n	8001a8a <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d018      	beq.n	8001a84 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a68:	d106      	bne.n	8001a78 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	4619      	mov	r1, r3
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f8cf 	bl	8001c14 <HCD_HC_IN_IRQHandler>
 8001a76:	e005      	b.n	8001a84 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 fc5f 	bl	8002342 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3301      	adds	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d3d4      	bcc.n	8001a3e <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f004 f882 	bl	8005bac <USB_ReadInterrupts>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f003 0310 	and.w	r3, r3, #16
 8001aae:	2b10      	cmp	r3, #16
 8001ab0:	d101      	bne.n	8001ab6 <HAL_HCD_IRQHandler+0x1d6>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_HCD_IRQHandler+0x1d8>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d014      	beq.n	8001ae6 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	699a      	ldr	r2, [r3, #24]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0210 	bic.w	r2, r2, #16
 8001aca:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 ffad 	bl	8002a2c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	699a      	ldr	r2, [r3, #24]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0210 	orr.w	r2, r2, #16
 8001ae0:	619a      	str	r2, [r3, #24]
 8001ae2:	e000      	b.n	8001ae6 <HAL_HCD_IRQHandler+0x206>
      return;
 8001ae4:	bf00      	nop
    }
  }
}
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_HCD_Start+0x16>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e013      	b.n	8001b2a <HAL_HCD_Start+0x3e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 ff59 	bl	80059c6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 f9bc 	bl	8005e98 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_HCD_Stop+0x16>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e00d      	b.n	8001b64 <HAL_HCD_Stop+0x32>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f004 fd9b 	bl	8006690 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f004 f963 	bl	8005e44 <USB_ResetPort>
 8001b7e:	4603      	mov	r3, r0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b94:	78fa      	ldrb	r2, [r7, #3]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	335c      	adds	r3, #92	; 0x5c
 8001ba4:	781b      	ldrb	r3, [r3, #0]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001bbe:	78fa      	ldrb	r2, [r7, #3]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	334c      	adds	r3, #76	; 0x4c
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f004 f9a5 	bl	8005f38 <USB_GetCurrentFrame>
 8001bee:	4603      	mov	r3, r0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f004 f980 	bl	8005f0a <USB_GetHostSpeed>
 8001c0a:	4603      	mov	r3, r0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	015a      	lsls	r2, r3, #5
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d119      	bne.n	8001c78 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	015a      	lsls	r2, r3, #5
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c50:	461a      	mov	r2, r3
 8001c52:	2304      	movs	r3, #4
 8001c54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	0151      	lsls	r1, r2, #5
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	440a      	add	r2, r1
 8001c6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	60d3      	str	r3, [r2, #12]
 8001c76:	e095      	b.n	8001da4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	015a      	lsls	r2, r3, #5
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4413      	add	r3, r2
 8001c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b20      	cmp	r3, #32
 8001c8c:	d109      	bne.n	8001ca2 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	015a      	lsls	r2, r3, #5
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	6093      	str	r3, [r2, #8]
 8001ca0:	e080      	b.n	8001da4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	015a      	lsls	r2, r3, #5
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4413      	add	r3, r2
 8001caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d134      	bne.n	8001d22 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	015a      	lsls	r2, r3, #5
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	0151      	lsls	r1, r2, #5
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	440a      	add	r2, r1
 8001cce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cd2:	f043 0302 	orr.w	r3, r3, #2
 8001cd6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	440b      	add	r3, r1
 8001ce6:	335d      	adds	r3, #93	; 0x5d
 8001ce8:	2205      	movs	r2, #5
 8001cea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	015a      	lsls	r2, r3, #5
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	2310      	movs	r3, #16
 8001cfc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	015a      	lsls	r2, r3, #5
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	4611      	mov	r1, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f004 fb7d 	bl	800641a <USB_HC_Halt>
 8001d20:	e040      	b.n	8001da4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	015a      	lsls	r2, r3, #5
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d38:	d134      	bne.n	8001da4 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	015a      	lsls	r2, r3, #5
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	0151      	lsls	r1, r2, #5
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	440a      	add	r2, r1
 8001d50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f004 fb58 	bl	800641a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	461a      	mov	r2, r3
 8001d78:	2310      	movs	r3, #16
 8001d7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	440b      	add	r3, r1
 8001d8a:	335d      	adds	r3, #93	; 0x5d
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	015a      	lsls	r2, r3, #5
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4413      	add	r3, r2
 8001d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	015a      	lsls	r2, r3, #5
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dba:	d122      	bne.n	8001e02 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	015a      	lsls	r2, r3, #5
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	0151      	lsls	r1, r2, #5
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	440a      	add	r2, r1
 8001dd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dd6:	f043 0302 	orr.w	r3, r3, #2
 8001dda:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	4611      	mov	r1, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f004 fb17 	bl	800641a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df8:	461a      	mov	r2, r3
 8001dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dfe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e00:	e29b      	b.n	800233a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	f040 80c1 	bne.w	8001f9c <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d01b      	beq.n	8001e5a <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	440b      	add	r3, r1
 8001e30:	3348      	adds	r3, #72	; 0x48
 8001e32:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	0159      	lsls	r1, r3, #5
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e46:	1ad1      	subs	r1, r2, r3
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4403      	add	r3, r0
 8001e56:	334c      	adds	r3, #76	; 0x4c
 8001e58:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	440b      	add	r3, r1
 8001e68:	335d      	adds	r3, #93	; 0x5d
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	440b      	add	r3, r1
 8001e7c:	3358      	adds	r3, #88	; 0x58
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	015a      	lsls	r2, r3, #5
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2301      	movs	r3, #1
 8001e92:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	333f      	adds	r3, #63	; 0x3f
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00a      	beq.n	8001ec0 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	333f      	adds	r3, #63	; 0x3f
 8001eba:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d121      	bne.n	8001f04 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	0151      	lsls	r1, r2, #5
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	440a      	add	r2, r1
 8001ed6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eda:	f043 0302 	orr.w	r3, r3, #2
 8001ede:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f004 fa95 	bl	800641a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	015a      	lsls	r2, r3, #5
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efc:	461a      	mov	r2, r3
 8001efe:	2310      	movs	r3, #16
 8001f00:	6093      	str	r3, [r2, #8]
 8001f02:	e034      	b.n	8001f6e <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	440b      	add	r3, r1
 8001f12:	333f      	adds	r3, #63	; 0x3f
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d129      	bne.n	8001f6e <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	0151      	lsls	r1, r2, #5
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	440a      	add	r2, r1
 8001f30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f38:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	440b      	add	r3, r1
 8001f48:	335c      	adds	r3, #92	; 0x5c
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	b2d8      	uxtb	r0, r3
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	335c      	adds	r3, #92	; 0x5c
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4601      	mov	r1, r0
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f007 f931 	bl	80091d0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3350      	adds	r3, #80	; 0x50
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	f083 0301 	eor.w	r3, r3, #1
 8001f84:	b2d8      	uxtb	r0, r3
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	3350      	adds	r3, #80	; 0x50
 8001f96:	4602      	mov	r2, r0
 8001f98:	701a      	strb	r2, [r3, #0]
}
 8001f9a:	e1ce      	b.n	800233a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	f040 80f1 	bne.w	8002196 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	0151      	lsls	r1, r2, #5
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	440a      	add	r2, r1
 8001fca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fce:	f023 0302 	bic.w	r3, r3, #2
 8001fd2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	335d      	adds	r3, #93	; 0x5d
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d10a      	bne.n	8002000 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	440b      	add	r3, r1
 8001ff8:	335c      	adds	r3, #92	; 0x5c
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
 8001ffe:	e0b0      	b.n	8002162 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	440b      	add	r3, r1
 800200e:	335d      	adds	r3, #93	; 0x5d
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b05      	cmp	r3, #5
 8002014:	d10a      	bne.n	800202c <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	335c      	adds	r3, #92	; 0x5c
 8002026:	2205      	movs	r2, #5
 8002028:	701a      	strb	r2, [r3, #0]
 800202a:	e09a      	b.n	8002162 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	335d      	adds	r3, #93	; 0x5d
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b06      	cmp	r3, #6
 8002040:	d00a      	beq.n	8002058 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	440b      	add	r3, r1
 8002050:	335d      	adds	r3, #93	; 0x5d
 8002052:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002054:	2b08      	cmp	r3, #8
 8002056:	d156      	bne.n	8002106 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	440b      	add	r3, r1
 8002066:	3358      	adds	r3, #88	; 0x58
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	1c59      	adds	r1, r3, #1
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4403      	add	r3, r0
 800207a:	3358      	adds	r3, #88	; 0x58
 800207c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	440b      	add	r3, r1
 800208c:	3358      	adds	r3, #88	; 0x58
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b03      	cmp	r3, #3
 8002092:	d914      	bls.n	80020be <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	440b      	add	r3, r1
 80020a2:	3358      	adds	r3, #88	; 0x58
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	440b      	add	r3, r1
 80020b6:	335c      	adds	r3, #92	; 0x5c
 80020b8:	2204      	movs	r2, #4
 80020ba:	701a      	strb	r2, [r3, #0]
 80020bc:	e009      	b.n	80020d2 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	440b      	add	r3, r1
 80020cc:	335c      	adds	r3, #92	; 0x5c
 80020ce:	2202      	movs	r2, #2
 80020d0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020e8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020f0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fe:	461a      	mov	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	e02d      	b.n	8002162 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	440b      	add	r3, r1
 8002114:	335d      	adds	r3, #93	; 0x5d
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b03      	cmp	r3, #3
 800211a:	d122      	bne.n	8002162 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	440b      	add	r3, r1
 800212a:	335c      	adds	r3, #92	; 0x5c
 800212c:	2202      	movs	r2, #2
 800212e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4413      	add	r3, r2
 8002138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002146:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800214e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4413      	add	r3, r2
 8002158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215c:	461a      	mov	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4413      	add	r3, r2
 800216a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216e:	461a      	mov	r2, r3
 8002170:	2302      	movs	r3, #2
 8002172:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	b2d8      	uxtb	r0, r3
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	440b      	add	r3, r1
 8002186:	335c      	adds	r3, #92	; 0x5c
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	4601      	mov	r1, r0
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f007 f81e 	bl	80091d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002194:	e0d1      	b.n	800233a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4413      	add	r3, r2
 800219e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a8:	2b80      	cmp	r3, #128	; 0x80
 80021aa:	d13e      	bne.n	800222a <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	0151      	lsls	r1, r2, #5
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	440a      	add	r2, r1
 80021c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021c6:	f043 0302 	orr.w	r3, r3, #2
 80021ca:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	440b      	add	r3, r1
 80021da:	3358      	adds	r3, #88	; 0x58
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	1c59      	adds	r1, r3, #1
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4403      	add	r3, r0
 80021ee:	3358      	adds	r3, #88	; 0x58
 80021f0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	440b      	add	r3, r1
 8002200:	335d      	adds	r3, #93	; 0x5d
 8002202:	2206      	movs	r2, #6
 8002204:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f004 f902 	bl	800641a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4413      	add	r3, r2
 800221e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002222:	461a      	mov	r2, r3
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	6093      	str	r3, [r2, #8]
}
 8002228:	e087      	b.n	800233a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4413      	add	r3, r2
 8002232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b10      	cmp	r3, #16
 800223e:	d17c      	bne.n	800233a <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	440b      	add	r3, r1
 800224e:	333f      	adds	r3, #63	; 0x3f
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b03      	cmp	r3, #3
 8002254:	d122      	bne.n	800229c <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	440b      	add	r3, r1
 8002264:	3358      	adds	r3, #88	; 0x58
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4413      	add	r3, r2
 8002272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	0151      	lsls	r1, r2, #5
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	440a      	add	r2, r1
 8002280:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f004 f8c0 	bl	800641a <USB_HC_Halt>
 800229a:	e045      	b.n	8002328 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	333f      	adds	r3, #63	; 0x3f
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	440b      	add	r3, r1
 80022c0:	333f      	adds	r3, #63	; 0x3f
 80022c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d12f      	bne.n	8002328 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	440b      	add	r3, r1
 80022d6:	3358      	adds	r3, #88	; 0x58
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d121      	bne.n	8002328 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	440b      	add	r3, r1
 80022f2:	335d      	adds	r3, #93	; 0x5d
 80022f4:	2203      	movs	r2, #3
 80022f6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	0151      	lsls	r1, r2, #5
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	440a      	add	r2, r1
 800230e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002312:	f043 0302 	orr.w	r3, r3, #2
 8002316:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f004 f879 	bl	800641a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4413      	add	r3, r2
 8002330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002334:	461a      	mov	r2, r3
 8002336:	2310      	movs	r3, #16
 8002338:	6093      	str	r3, [r2, #8]
}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b086      	sub	sp, #24
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	460b      	mov	r3, r1
 800234c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4413      	add	r3, r2
 8002364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b04      	cmp	r3, #4
 8002370:	d119      	bne.n	80023a6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237e:	461a      	mov	r2, r3
 8002380:	2304      	movs	r3, #4
 8002382:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4413      	add	r3, r2
 800238c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	0151      	lsls	r1, r2, #5
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	440a      	add	r2, r1
 800239a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800239e:	f043 0302 	orr.w	r3, r3, #2
 80023a2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80023a4:	e33e      	b.n	8002a24 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d141      	bne.n	8002440 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c8:	461a      	mov	r2, r3
 80023ca:	2320      	movs	r3, #32
 80023cc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	333d      	adds	r3, #61	; 0x3d
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	f040 831f 	bne.w	8002a24 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	440b      	add	r3, r1
 80023f4:	333d      	adds	r3, #61	; 0x3d
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	440b      	add	r3, r1
 8002408:	335c      	adds	r3, #92	; 0x5c
 800240a:	2202      	movs	r2, #2
 800240c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	0151      	lsls	r1, r2, #5
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	440a      	add	r2, r1
 8002424:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002428:	f043 0302 	orr.w	r3, r3, #2
 800242c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f003 ffee 	bl	800641a <USB_HC_Halt>
}
 800243e:	e2f1      	b.n	8002a24 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4413      	add	r3, r2
 8002448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002452:	2b40      	cmp	r3, #64	; 0x40
 8002454:	d13f      	bne.n	80024d6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	335d      	adds	r3, #93	; 0x5d
 8002466:	2204      	movs	r2, #4
 8002468:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	440b      	add	r3, r1
 8002478:	333d      	adds	r3, #61	; 0x3d
 800247a:	2201      	movs	r2, #1
 800247c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	440b      	add	r3, r1
 800248c:	3358      	adds	r3, #88	; 0x58
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4413      	add	r3, r2
 800249a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	0151      	lsls	r1, r2, #5
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	440a      	add	r2, r1
 80024a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ac:	f043 0302 	orr.w	r3, r3, #2
 80024b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f003 ffac 	bl	800641a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ce:	461a      	mov	r2, r3
 80024d0:	2340      	movs	r3, #64	; 0x40
 80024d2:	6093      	str	r3, [r2, #8]
}
 80024d4:	e2a6      	b.n	8002a24 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ec:	d122      	bne.n	8002534 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	0151      	lsls	r1, r2, #5
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	440a      	add	r2, r1
 8002504:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002508:	f043 0302 	orr.w	r3, r3, #2
 800250c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f003 ff7e 	bl	800641a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4413      	add	r3, r2
 8002526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252a:	461a      	mov	r2, r3
 800252c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002530:	6093      	str	r3, [r2, #8]
}
 8002532:	e277      	b.n	8002a24 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b01      	cmp	r3, #1
 8002548:	d135      	bne.n	80025b6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	440b      	add	r3, r1
 8002558:	3358      	adds	r3, #88	; 0x58
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4413      	add	r3, r2
 8002566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	0151      	lsls	r1, r2, #5
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	440a      	add	r2, r1
 8002574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f003 ff46 	bl	800641a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4413      	add	r3, r2
 8002596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259a:	461a      	mov	r2, r3
 800259c:	2301      	movs	r3, #1
 800259e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	440b      	add	r3, r1
 80025ae:	335d      	adds	r3, #93	; 0x5d
 80025b0:	2201      	movs	r2, #1
 80025b2:	701a      	strb	r2, [r3, #0]
}
 80025b4:	e236      	b.n	8002a24 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d12b      	bne.n	8002624 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d8:	461a      	mov	r2, r3
 80025da:	2308      	movs	r3, #8
 80025dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	0151      	lsls	r1, r2, #5
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	440a      	add	r2, r1
 80025f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f003 ff06 	bl	800641a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	440b      	add	r3, r1
 800261c:	335d      	adds	r3, #93	; 0x5d
 800261e:	2205      	movs	r2, #5
 8002620:	701a      	strb	r2, [r3, #0]
}
 8002622:	e1ff      	b.n	8002a24 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4413      	add	r3, r2
 800262c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b10      	cmp	r3, #16
 8002638:	d155      	bne.n	80026e6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	440b      	add	r3, r1
 8002648:	3358      	adds	r3, #88	; 0x58
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	440b      	add	r3, r1
 800265c:	335d      	adds	r3, #93	; 0x5d
 800265e:	2203      	movs	r2, #3
 8002660:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	440b      	add	r3, r1
 8002670:	333d      	adds	r3, #61	; 0x3d
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d114      	bne.n	80026a2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	333c      	adds	r3, #60	; 0x3c
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	440b      	add	r3, r1
 800269c:	333d      	adds	r3, #61	; 0x3d
 800269e:	2201      	movs	r2, #1
 80026a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	0151      	lsls	r1, r2, #5
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	440a      	add	r2, r1
 80026b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026bc:	f043 0302 	orr.w	r3, r3, #2
 80026c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f003 fea4 	bl	800641a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026de:	461a      	mov	r2, r3
 80026e0:	2310      	movs	r3, #16
 80026e2:	6093      	str	r3, [r2, #8]
}
 80026e4:	e19e      	b.n	8002a24 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f8:	2b80      	cmp	r3, #128	; 0x80
 80026fa:	d12b      	bne.n	8002754 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	0151      	lsls	r1, r2, #5
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	440a      	add	r2, r1
 8002712:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002716:	f043 0302 	orr.w	r3, r3, #2
 800271a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f003 fe77 	bl	800641a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	440b      	add	r3, r1
 800273a:	335d      	adds	r3, #93	; 0x5d
 800273c:	2206      	movs	r2, #6
 800273e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	461a      	mov	r2, r3
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	6093      	str	r3, [r2, #8]
}
 8002752:	e167      	b.n	8002a24 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276a:	d135      	bne.n	80027d8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	0151      	lsls	r1, r2, #5
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	440a      	add	r2, r1
 8002782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002786:	f043 0302 	orr.w	r3, r3, #2
 800278a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f003 fe3f 	bl	800641a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a8:	461a      	mov	r2, r3
 80027aa:	2310      	movs	r3, #16
 80027ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ba:	461a      	mov	r2, r3
 80027bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	440b      	add	r3, r1
 80027d0:	335d      	adds	r3, #93	; 0x5d
 80027d2:	2208      	movs	r2, #8
 80027d4:	701a      	strb	r2, [r3, #0]
}
 80027d6:	e125      	b.n	8002a24 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	f040 811a 	bne.w	8002a24 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	0151      	lsls	r1, r2, #5
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	440a      	add	r2, r1
 8002806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800280a:	f023 0302 	bic.w	r3, r3, #2
 800280e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	335d      	adds	r3, #93	; 0x5d
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d137      	bne.n	8002896 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	335c      	adds	r3, #92	; 0x5c
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	440b      	add	r3, r1
 8002848:	333f      	adds	r3, #63	; 0x3f
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d00b      	beq.n	8002868 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	440b      	add	r3, r1
 800285e:	333f      	adds	r3, #63	; 0x3f
 8002860:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002862:	2b03      	cmp	r3, #3
 8002864:	f040 80c5 	bne.w	80029f2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	440b      	add	r3, r1
 8002876:	3351      	adds	r3, #81	; 0x51
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	f083 0301 	eor.w	r3, r3, #1
 800287e:	b2d8      	uxtb	r0, r3
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	440b      	add	r3, r1
 800288e:	3351      	adds	r3, #81	; 0x51
 8002890:	4602      	mov	r2, r0
 8002892:	701a      	strb	r2, [r3, #0]
 8002894:	e0ad      	b.n	80029f2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	440b      	add	r3, r1
 80028a4:	335d      	adds	r3, #93	; 0x5d
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d10a      	bne.n	80028c2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	440b      	add	r3, r1
 80028ba:	335c      	adds	r3, #92	; 0x5c
 80028bc:	2202      	movs	r2, #2
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	e097      	b.n	80029f2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	440b      	add	r3, r1
 80028d0:	335d      	adds	r3, #93	; 0x5d
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d10a      	bne.n	80028ee <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	440b      	add	r3, r1
 80028e6:	335c      	adds	r3, #92	; 0x5c
 80028e8:	2202      	movs	r2, #2
 80028ea:	701a      	strb	r2, [r3, #0]
 80028ec:	e081      	b.n	80029f2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	335d      	adds	r3, #93	; 0x5d
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b05      	cmp	r3, #5
 8002902:	d10a      	bne.n	800291a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	440b      	add	r3, r1
 8002912:	335c      	adds	r3, #92	; 0x5c
 8002914:	2205      	movs	r2, #5
 8002916:	701a      	strb	r2, [r3, #0]
 8002918:	e06b      	b.n	80029f2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	440b      	add	r3, r1
 8002928:	335d      	adds	r3, #93	; 0x5d
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b06      	cmp	r3, #6
 800292e:	d00a      	beq.n	8002946 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	440b      	add	r3, r1
 800293e:	335d      	adds	r3, #93	; 0x5d
 8002940:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002942:	2b08      	cmp	r3, #8
 8002944:	d155      	bne.n	80029f2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	440b      	add	r3, r1
 8002954:	3358      	adds	r3, #88	; 0x58
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	1c59      	adds	r1, r3, #1
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4403      	add	r3, r0
 8002968:	3358      	adds	r3, #88	; 0x58
 800296a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	440b      	add	r3, r1
 800297a:	3358      	adds	r3, #88	; 0x58
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b03      	cmp	r3, #3
 8002980:	d914      	bls.n	80029ac <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	3358      	adds	r3, #88	; 0x58
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	440b      	add	r3, r1
 80029a4:	335c      	adds	r3, #92	; 0x5c
 80029a6:	2204      	movs	r2, #4
 80029a8:	701a      	strb	r2, [r3, #0]
 80029aa:	e009      	b.n	80029c0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	440b      	add	r3, r1
 80029ba:	335c      	adds	r3, #92	; 0x5c
 80029bc:	2202      	movs	r2, #2
 80029be:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029d6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029de:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ec:	461a      	mov	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fe:	461a      	mov	r2, r3
 8002a00:	2302      	movs	r3, #2
 8002a02:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	b2d8      	uxtb	r0, r3
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	440b      	add	r3, r1
 8002a16:	335c      	adds	r3, #92	; 0x5c
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4601      	mov	r1, r0
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f006 fbd6 	bl	80091d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a24:	bf00      	nop
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08a      	sub	sp, #40	; 0x28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	0c5b      	lsrs	r3, r3, #17
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	091b      	lsrs	r3, r3, #4
 8002a5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a60:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d003      	beq.n	8002a70 <HCD_RXQLVL_IRQHandler+0x44>
 8002a68:	2b05      	cmp	r3, #5
 8002a6a:	f000 8082 	beq.w	8002b72 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a6e:	e083      	b.n	8002b78 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d07f      	beq.n	8002b76 <HCD_RXQLVL_IRQHandler+0x14a>
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	440b      	add	r3, r1
 8002a84:	3344      	adds	r3, #68	; 0x44
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d074      	beq.n	8002b76 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3344      	adds	r3, #68	; 0x44
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	b292      	uxth	r2, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	f003 f857 	bl	8005b5a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	440b      	add	r3, r1
 8002aba:	3344      	adds	r3, #68	; 0x44
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	18d1      	adds	r1, r2, r3
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4403      	add	r3, r0
 8002ad0:	3344      	adds	r3, #68	; 0x44
 8002ad2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	334c      	adds	r3, #76	; 0x4c
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	18d1      	adds	r1, r2, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4403      	add	r3, r0
 8002af8:	334c      	adds	r3, #76	; 0x4c
 8002afa:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <HCD_RXQLVL_IRQHandler+0x154>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d031      	beq.n	8002b76 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b28:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b30:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	440b      	add	r3, r1
 8002b52:	3350      	adds	r3, #80	; 0x50
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	f083 0301 	eor.w	r3, r3, #1
 8002b5a:	b2d8      	uxtb	r0, r3
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	3350      	adds	r3, #80	; 0x50
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	701a      	strb	r2, [r3, #0]
      break;
 8002b70:	e001      	b.n	8002b76 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002b72:	bf00      	nop
 8002b74:	e000      	b.n	8002b78 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002b76:	bf00      	nop
  }
}
 8002b78:	bf00      	nop
 8002b7a:	3728      	adds	r7, #40	; 0x28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	1ff80000 	.word	0x1ff80000

08002b84 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002bb0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d113      	bne.n	8002be4 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d10a      	bne.n	8002bdc <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699a      	ldr	r2, [r3, #24]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002bd4:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f006 fade 	bl	8009198 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f043 0302 	orr.w	r3, r3, #2
 8002be2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d147      	bne.n	8002c7e <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	f043 0308 	orr.w	r3, r3, #8
 8002bf4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d129      	bne.n	8002c54 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d113      	bne.n	8002c30 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c12:	d106      	bne.n	8002c22 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2102      	movs	r1, #2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f003 f8d8 	bl	8005dd0 <USB_InitFSLSPClkSel>
 8002c20:	e011      	b.n	8002c46 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2101      	movs	r1, #1
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f003 f8d1 	bl	8005dd0 <USB_InitFSLSPClkSel>
 8002c2e:	e00a      	b.n	8002c46 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d106      	bne.n	8002c46 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c44:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f006 fad0 	bl	80091ec <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f006 faa3 	bl	8009198 <HAL_HCD_Connect_Callback>
 8002c52:	e014      	b.n	8002c7e <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f006 fad7 	bl	8009208 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002c68:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c6c:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699a      	ldr	r2, [r3, #24]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c7c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	d103      	bne.n	8002c90 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f043 0320 	orr.w	r3, r3, #32
 8002c8e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c96:	461a      	mov	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	6013      	str	r3, [r2, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e11f      	b.n	8002ef6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f005 ff80 	bl	8008bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2224      	movs	r2, #36	; 0x24
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0201 	bic.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d08:	f001 f9de 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 8002d0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	4a7b      	ldr	r2, [pc, #492]	; (8002f00 <HAL_I2C_Init+0x25c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d807      	bhi.n	8002d28 <HAL_I2C_Init+0x84>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4a7a      	ldr	r2, [pc, #488]	; (8002f04 <HAL_I2C_Init+0x260>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	bf94      	ite	ls
 8002d20:	2301      	movls	r3, #1
 8002d22:	2300      	movhi	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	e006      	b.n	8002d36 <HAL_I2C_Init+0x92>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4a77      	ldr	r2, [pc, #476]	; (8002f08 <HAL_I2C_Init+0x264>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	bf94      	ite	ls
 8002d30:	2301      	movls	r3, #1
 8002d32:	2300      	movhi	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e0db      	b.n	8002ef6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4a72      	ldr	r2, [pc, #456]	; (8002f0c <HAL_I2C_Init+0x268>)
 8002d42:	fba2 2303 	umull	r2, r3, r2, r3
 8002d46:	0c9b      	lsrs	r3, r3, #18
 8002d48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4a64      	ldr	r2, [pc, #400]	; (8002f00 <HAL_I2C_Init+0x25c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d802      	bhi.n	8002d78 <HAL_I2C_Init+0xd4>
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	3301      	adds	r3, #1
 8002d76:	e009      	b.n	8002d8c <HAL_I2C_Init+0xe8>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d7e:	fb02 f303 	mul.w	r3, r2, r3
 8002d82:	4a63      	ldr	r2, [pc, #396]	; (8002f10 <HAL_I2C_Init+0x26c>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	430b      	orrs	r3, r1
 8002d92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4956      	ldr	r1, [pc, #344]	; (8002f00 <HAL_I2C_Init+0x25c>)
 8002da8:	428b      	cmp	r3, r1
 8002daa:	d80d      	bhi.n	8002dc8 <HAL_I2C_Init+0x124>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1e59      	subs	r1, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	bf38      	it	cc
 8002dc4:	2304      	movcc	r3, #4
 8002dc6:	e04f      	b.n	8002e68 <HAL_I2C_Init+0x1c4>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d111      	bne.n	8002df4 <HAL_I2C_Init+0x150>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1e58      	subs	r0, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6859      	ldr	r1, [r3, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	440b      	add	r3, r1
 8002dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de2:	3301      	adds	r3, #1
 8002de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	e012      	b.n	8002e1a <HAL_I2C_Init+0x176>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1e58      	subs	r0, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	0099      	lsls	r1, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_I2C_Init+0x17e>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e022      	b.n	8002e68 <HAL_I2C_Init+0x1c4>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10e      	bne.n	8002e48 <HAL_I2C_Init+0x1a4>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1e58      	subs	r0, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6859      	ldr	r1, [r3, #4]
 8002e32:	460b      	mov	r3, r1
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	440b      	add	r3, r1
 8002e38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e46:	e00f      	b.n	8002e68 <HAL_I2C_Init+0x1c4>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1e58      	subs	r0, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	0099      	lsls	r1, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	6809      	ldr	r1, [r1, #0]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69da      	ldr	r2, [r3, #28]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6911      	ldr	r1, [r2, #16]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68d2      	ldr	r2, [r2, #12]
 8002ea2:	4311      	orrs	r1, r2
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695a      	ldr	r2, [r3, #20]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	000186a0 	.word	0x000186a0
 8002f04:	001e847f 	.word	0x001e847f
 8002f08:	003d08ff 	.word	0x003d08ff
 8002f0c:	431bde83 	.word	0x431bde83
 8002f10:	10624dd3 	.word	0x10624dd3

08002f14 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e128      	b.n	8003178 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a90      	ldr	r2, [pc, #576]	; (8003180 <HAL_I2S_Init+0x26c>)
 8002f3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f005 fe8d 	bl	8008c60 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2202      	movs	r2, #2
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f5c:	f023 030f 	bic.w	r3, r3, #15
 8002f60:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2202      	movs	r2, #2
 8002f68:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d060      	beq.n	8003034 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d102      	bne.n	8002f80 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f7a:	2310      	movs	r3, #16
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	e001      	b.n	8002f84 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f80:	2320      	movs	r3, #32
 8002f82:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d802      	bhi.n	8002f92 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f92:	2001      	movs	r0, #1
 8002f94:	f001 f9a2 	bl	80042dc <HAL_RCCEx_GetPeriphCLKFreq>
 8002f98:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d125      	bne.n	8002ff0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d010      	beq.n	8002fce <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc8:	3305      	adds	r3, #5
 8002fca:	613b      	str	r3, [r7, #16]
 8002fcc:	e01f      	b.n	800300e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fea:	3305      	adds	r3, #5
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	e00e      	b.n	800300e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	461a      	mov	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	fbb2 f3f3 	udiv	r3, r2, r3
 800300a:	3305      	adds	r3, #5
 800300c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4a5c      	ldr	r2, [pc, #368]	; (8003184 <HAL_I2S_Init+0x270>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	08db      	lsrs	r3, r3, #3
 8003018:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	085b      	lsrs	r3, r3, #1
 800302a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	e003      	b.n	800303c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003034:	2302      	movs	r3, #2
 8003036:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d902      	bls.n	8003048 <HAL_I2S_Init+0x134>
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	2bff      	cmp	r3, #255	; 0xff
 8003046:	d907      	bls.n	8003058 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	f043 0210 	orr.w	r2, r3, #16
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e08f      	b.n	8003178 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	ea42 0103 	orr.w	r1, r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	430a      	orrs	r2, r1
 800306a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003076:	f023 030f 	bic.w	r3, r3, #15
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6851      	ldr	r1, [r2, #4]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6892      	ldr	r2, [r2, #8]
 8003082:	4311      	orrs	r1, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	68d2      	ldr	r2, [r2, #12]
 8003088:	4311      	orrs	r1, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6992      	ldr	r2, [r2, #24]
 800308e:	430a      	orrs	r2, r1
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800309a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d161      	bne.n	8003168 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a38      	ldr	r2, [pc, #224]	; (8003188 <HAL_I2S_Init+0x274>)
 80030a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a37      	ldr	r2, [pc, #220]	; (800318c <HAL_I2S_Init+0x278>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d101      	bne.n	80030b8 <HAL_I2S_Init+0x1a4>
 80030b4:	4b36      	ldr	r3, [pc, #216]	; (8003190 <HAL_I2S_Init+0x27c>)
 80030b6:	e001      	b.n	80030bc <HAL_I2S_Init+0x1a8>
 80030b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	4932      	ldr	r1, [pc, #200]	; (800318c <HAL_I2S_Init+0x278>)
 80030c4:	428a      	cmp	r2, r1
 80030c6:	d101      	bne.n	80030cc <HAL_I2S_Init+0x1b8>
 80030c8:	4a31      	ldr	r2, [pc, #196]	; (8003190 <HAL_I2S_Init+0x27c>)
 80030ca:	e001      	b.n	80030d0 <HAL_I2S_Init+0x1bc>
 80030cc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80030d0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030d4:	f023 030f 	bic.w	r3, r3, #15
 80030d8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a2b      	ldr	r2, [pc, #172]	; (800318c <HAL_I2S_Init+0x278>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d101      	bne.n	80030e8 <HAL_I2S_Init+0x1d4>
 80030e4:	4b2a      	ldr	r3, [pc, #168]	; (8003190 <HAL_I2S_Init+0x27c>)
 80030e6:	e001      	b.n	80030ec <HAL_I2S_Init+0x1d8>
 80030e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030ec:	2202      	movs	r2, #2
 80030ee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a25      	ldr	r2, [pc, #148]	; (800318c <HAL_I2S_Init+0x278>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <HAL_I2S_Init+0x1ea>
 80030fa:	4b25      	ldr	r3, [pc, #148]	; (8003190 <HAL_I2S_Init+0x27c>)
 80030fc:	e001      	b.n	8003102 <HAL_I2S_Init+0x1ee>
 80030fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310e:	d003      	beq.n	8003118 <HAL_I2S_Init+0x204>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d103      	bne.n	8003120 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	e001      	b.n	8003124 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003120:	2300      	movs	r3, #0
 8003122:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	b299      	uxth	r1, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800313a:	4303      	orrs	r3, r0
 800313c:	b29b      	uxth	r3, r3
 800313e:	430b      	orrs	r3, r1
 8003140:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003142:	4313      	orrs	r3, r2
 8003144:	b29a      	uxth	r2, r3
 8003146:	897b      	ldrh	r3, [r7, #10]
 8003148:	4313      	orrs	r3, r2
 800314a:	b29b      	uxth	r3, r3
 800314c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003150:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a0d      	ldr	r2, [pc, #52]	; (800318c <HAL_I2S_Init+0x278>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d101      	bne.n	8003160 <HAL_I2S_Init+0x24c>
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <HAL_I2S_Init+0x27c>)
 800315e:	e001      	b.n	8003164 <HAL_I2S_Init+0x250>
 8003160:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003164:	897a      	ldrh	r2, [r7, #10]
 8003166:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	0800328b 	.word	0x0800328b
 8003184:	cccccccd 	.word	0xcccccccd
 8003188:	080033a1 	.word	0x080033a1
 800318c:	40003800 	.word	0x40003800
 8003190:	40003400 	.word	0x40003400

08003194 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	881a      	ldrh	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	1c9a      	adds	r2, r3, #2
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10e      	bne.n	8003224 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003214:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff ffb8 	bl	8003194 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003224:	bf00      	nop
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323e:	b292      	uxth	r2, r2
 8003240:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	1c9a      	adds	r2, r3, #2
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10e      	bne.n	8003282 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003272:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff ff93 	bl	80031a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b086      	sub	sp, #24
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d13a      	bne.n	800331c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d109      	bne.n	80032c4 <I2S_IRQHandler+0x3a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ba:	2b40      	cmp	r3, #64	; 0x40
 80032bc:	d102      	bne.n	80032c4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff ffb4 	bl	800322c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ca:	2b40      	cmp	r3, #64	; 0x40
 80032cc:	d126      	bne.n	800331c <I2S_IRQHandler+0x92>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d11f      	bne.n	800331c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	f043 0202 	orr.w	r2, r3, #2
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ff50 	bl	80031bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b03      	cmp	r3, #3
 8003326:	d136      	bne.n	8003396 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b02      	cmp	r3, #2
 8003330:	d109      	bne.n	8003346 <I2S_IRQHandler+0xbc>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333c:	2b80      	cmp	r3, #128	; 0x80
 800333e:	d102      	bne.n	8003346 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ff45 	bl	80031d0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b08      	cmp	r3, #8
 800334e:	d122      	bne.n	8003396 <I2S_IRQHandler+0x10c>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b20      	cmp	r3, #32
 800335c:	d11b      	bne.n	8003396 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800336c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003388:	f043 0204 	orr.w	r2, r3, #4
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ff13 	bl	80031bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003396:	bf00      	nop
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4aa2      	ldr	r2, [pc, #648]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d101      	bne.n	80033be <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80033ba:	4ba2      	ldr	r3, [pc, #648]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033bc:	e001      	b.n	80033c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80033be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a9b      	ldr	r2, [pc, #620]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d101      	bne.n	80033dc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80033d8:	4b9a      	ldr	r3, [pc, #616]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033da:	e001      	b.n	80033e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80033dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ec:	d004      	beq.n	80033f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 8099 	bne.w	800352a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d107      	bne.n	8003412 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f925 	bl	800365c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b01      	cmp	r3, #1
 800341a:	d107      	bne.n	800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f9c8 	bl	80037bc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003432:	2b40      	cmp	r3, #64	; 0x40
 8003434:	d13a      	bne.n	80034ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d035      	beq.n	80034ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a7e      	ldr	r2, [pc, #504]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d101      	bne.n	800344e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800344a:	4b7e      	ldr	r3, [pc, #504]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800344c:	e001      	b.n	8003452 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800344e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4979      	ldr	r1, [pc, #484]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800345a:	428b      	cmp	r3, r1
 800345c:	d101      	bne.n	8003462 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800345e:	4b79      	ldr	r3, [pc, #484]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003460:	e001      	b.n	8003466 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003462:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003466:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800346a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800347a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	f043 0202 	orr.w	r2, r3, #2
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff fe88 	bl	80031bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	f040 80be 	bne.w	8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80b8 	beq.w	8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a59      	ldr	r2, [pc, #356]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d101      	bne.n	80034e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80034de:	4b59      	ldr	r3, [pc, #356]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034e0:	e001      	b.n	80034e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80034e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4954      	ldr	r1, [pc, #336]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034ee:	428b      	cmp	r3, r1
 80034f0:	d101      	bne.n	80034f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80034f2:	4b54      	ldr	r3, [pc, #336]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034f4:	e001      	b.n	80034fa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80034f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034fe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003500:	2300      	movs	r3, #0
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	f043 0204 	orr.w	r2, r3, #4
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff fe4a 	bl	80031bc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003528:	e084      	b.n	8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b02      	cmp	r3, #2
 8003532:	d107      	bne.n	8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f8be 	bl	80036c0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b01      	cmp	r3, #1
 800354c:	d107      	bne.n	800355e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f8fd 	bl	8003758 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d12f      	bne.n	80035c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b00      	cmp	r3, #0
 8003570:	d02a      	beq.n	80035c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003580:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a2e      	ldr	r2, [pc, #184]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d101      	bne.n	8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800358c:	4b2d      	ldr	r3, [pc, #180]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800358e:	e001      	b.n	8003594 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003590:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4929      	ldr	r1, [pc, #164]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800359c:	428b      	cmp	r3, r1
 800359e:	d101      	bne.n	80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80035a0:	4b28      	ldr	r3, [pc, #160]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035a2:	e001      	b.n	80035a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80035a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f043 0202 	orr.w	r2, r3, #2
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff fdfa 	bl	80031bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d131      	bne.n	8003636 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d02c      	beq.n	8003636 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a17      	ldr	r2, [pc, #92]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d101      	bne.n	80035ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80035e6:	4b17      	ldr	r3, [pc, #92]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035e8:	e001      	b.n	80035ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80035ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4912      	ldr	r1, [pc, #72]	; (8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035f6:	428b      	cmp	r3, r1
 80035f8:	d101      	bne.n	80035fe <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80035fa:	4b12      	ldr	r3, [pc, #72]	; (8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035fc:	e001      	b.n	8003602 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80035fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003602:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003606:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003616:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	f043 0204 	orr.w	r2, r3, #4
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff fdc5 	bl	80031bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003632:	e000      	b.n	8003636 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003634:	bf00      	nop
}
 8003636:	bf00      	nop
 8003638:	3720      	adds	r7, #32
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40003800 	.word	0x40003800
 8003644:	40003400 	.word	0x40003400

08003648 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	1c99      	adds	r1, r3, #2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6251      	str	r1, [r2, #36]	; 0x24
 800366e:	881a      	ldrh	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d113      	bne.n	80036b6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800369c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d106      	bne.n	80036b6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ffc9 	bl	8003648 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	1c99      	adds	r1, r3, #2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6251      	str	r1, [r2, #36]	; 0x24
 80036d2:	8819      	ldrh	r1, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1d      	ldr	r2, [pc, #116]	; (8003750 <I2SEx_TxISR_I2SExt+0x90>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d101      	bne.n	80036e2 <I2SEx_TxISR_I2SExt+0x22>
 80036de:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <I2SEx_TxISR_I2SExt+0x94>)
 80036e0:	e001      	b.n	80036e6 <I2SEx_TxISR_I2SExt+0x26>
 80036e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e6:	460a      	mov	r2, r1
 80036e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d121      	bne.n	8003746 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a12      	ldr	r2, [pc, #72]	; (8003750 <I2SEx_TxISR_I2SExt+0x90>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d101      	bne.n	8003710 <I2SEx_TxISR_I2SExt+0x50>
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <I2SEx_TxISR_I2SExt+0x94>)
 800370e:	e001      	b.n	8003714 <I2SEx_TxISR_I2SExt+0x54>
 8003710:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	490d      	ldr	r1, [pc, #52]	; (8003750 <I2SEx_TxISR_I2SExt+0x90>)
 800371c:	428b      	cmp	r3, r1
 800371e:	d101      	bne.n	8003724 <I2SEx_TxISR_I2SExt+0x64>
 8003720:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <I2SEx_TxISR_I2SExt+0x94>)
 8003722:	e001      	b.n	8003728 <I2SEx_TxISR_I2SExt+0x68>
 8003724:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003728:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800372c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d106      	bne.n	8003746 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ff81 	bl	8003648 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40003800 	.word	0x40003800
 8003754:	40003400 	.word	0x40003400

08003758 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68d8      	ldr	r0, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	1c99      	adds	r1, r3, #2
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003770:	b282      	uxth	r2, r0
 8003772:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d113      	bne.n	80037b4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800379a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff ff4a 	bl	8003648 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a20      	ldr	r2, [pc, #128]	; (800384c <I2SEx_RxISR_I2SExt+0x90>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d101      	bne.n	80037d2 <I2SEx_RxISR_I2SExt+0x16>
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <I2SEx_RxISR_I2SExt+0x94>)
 80037d0:	e001      	b.n	80037d6 <I2SEx_RxISR_I2SExt+0x1a>
 80037d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d6:	68d8      	ldr	r0, [r3, #12]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	1c99      	adds	r1, r3, #2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037e2:	b282      	uxth	r2, r0
 80037e4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d121      	bne.n	8003842 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a12      	ldr	r2, [pc, #72]	; (800384c <I2SEx_RxISR_I2SExt+0x90>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d101      	bne.n	800380c <I2SEx_RxISR_I2SExt+0x50>
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <I2SEx_RxISR_I2SExt+0x94>)
 800380a:	e001      	b.n	8003810 <I2SEx_RxISR_I2SExt+0x54>
 800380c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	490d      	ldr	r1, [pc, #52]	; (800384c <I2SEx_RxISR_I2SExt+0x90>)
 8003818:	428b      	cmp	r3, r1
 800381a:	d101      	bne.n	8003820 <I2SEx_RxISR_I2SExt+0x64>
 800381c:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <I2SEx_RxISR_I2SExt+0x94>)
 800381e:	e001      	b.n	8003824 <I2SEx_RxISR_I2SExt+0x68>
 8003820:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003824:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003828:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d106      	bne.n	8003842 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff ff03 	bl	8003648 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40003800 	.word	0x40003800
 8003850:	40003400 	.word	0x40003400

08003854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e25b      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d075      	beq.n	800395e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003872:	4ba3      	ldr	r3, [pc, #652]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	2b04      	cmp	r3, #4
 800387c:	d00c      	beq.n	8003898 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800387e:	4ba0      	ldr	r3, [pc, #640]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003886:	2b08      	cmp	r3, #8
 8003888:	d112      	bne.n	80038b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800388a:	4b9d      	ldr	r3, [pc, #628]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003896:	d10b      	bne.n	80038b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003898:	4b99      	ldr	r3, [pc, #612]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d05b      	beq.n	800395c <HAL_RCC_OscConfig+0x108>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d157      	bne.n	800395c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e236      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b8:	d106      	bne.n	80038c8 <HAL_RCC_OscConfig+0x74>
 80038ba:	4b91      	ldr	r3, [pc, #580]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a90      	ldr	r2, [pc, #576]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	e01d      	b.n	8003904 <HAL_RCC_OscConfig+0xb0>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d0:	d10c      	bne.n	80038ec <HAL_RCC_OscConfig+0x98>
 80038d2:	4b8b      	ldr	r3, [pc, #556]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a8a      	ldr	r2, [pc, #552]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	4b88      	ldr	r3, [pc, #544]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a87      	ldr	r2, [pc, #540]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e00b      	b.n	8003904 <HAL_RCC_OscConfig+0xb0>
 80038ec:	4b84      	ldr	r3, [pc, #528]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a83      	ldr	r2, [pc, #524]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	4b81      	ldr	r3, [pc, #516]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a80      	ldr	r2, [pc, #512]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80038fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d013      	beq.n	8003934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390c:	f7fc fe9e 	bl	800064c <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003914:	f7fc fe9a 	bl	800064c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	; 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e1fb      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	4b76      	ldr	r3, [pc, #472]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0xc0>
 8003932:	e014      	b.n	800395e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003934:	f7fc fe8a 	bl	800064c <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800393c:	f7fc fe86 	bl	800064c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b64      	cmp	r3, #100	; 0x64
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e1e7      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394e:	4b6c      	ldr	r3, [pc, #432]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0xe8>
 800395a:	e000      	b.n	800395e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d063      	beq.n	8003a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800396a:	4b65      	ldr	r3, [pc, #404]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003976:	4b62      	ldr	r3, [pc, #392]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800397e:	2b08      	cmp	r3, #8
 8003980:	d11c      	bne.n	80039bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003982:	4b5f      	ldr	r3, [pc, #380]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d116      	bne.n	80039bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398e:	4b5c      	ldr	r3, [pc, #368]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_RCC_OscConfig+0x152>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d001      	beq.n	80039a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e1bb      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a6:	4b56      	ldr	r3, [pc, #344]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	4952      	ldr	r1, [pc, #328]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ba:	e03a      	b.n	8003a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d020      	beq.n	8003a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039c4:	4b4f      	ldr	r3, [pc, #316]	; (8003b04 <HAL_RCC_OscConfig+0x2b0>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ca:	f7fc fe3f 	bl	800064c <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d2:	f7fc fe3b 	bl	800064c <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e19c      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e4:	4b46      	ldr	r3, [pc, #280]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0f0      	beq.n	80039d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f0:	4b43      	ldr	r3, [pc, #268]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	4940      	ldr	r1, [pc, #256]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	600b      	str	r3, [r1, #0]
 8003a04:	e015      	b.n	8003a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a06:	4b3f      	ldr	r3, [pc, #252]	; (8003b04 <HAL_RCC_OscConfig+0x2b0>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0c:	f7fc fe1e 	bl	800064c <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a14:	f7fc fe1a 	bl	800064c <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e17b      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a26:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d030      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d016      	beq.n	8003a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a46:	4b30      	ldr	r3, [pc, #192]	; (8003b08 <HAL_RCC_OscConfig+0x2b4>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4c:	f7fc fdfe 	bl	800064c <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a54:	f7fc fdfa 	bl	800064c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e15b      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a66:	4b26      	ldr	r3, [pc, #152]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0x200>
 8003a72:	e015      	b.n	8003aa0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a74:	4b24      	ldr	r3, [pc, #144]	; (8003b08 <HAL_RCC_OscConfig+0x2b4>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7a:	f7fc fde7 	bl	800064c <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a82:	f7fc fde3 	bl	800064c <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e144      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a94:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f0      	bne.n	8003a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80a0 	beq.w	8003bee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab2:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10f      	bne.n	8003ade <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	4a0e      	ldr	r2, [pc, #56]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003acc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <HAL_RCC_OscConfig+0x2ac>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	60bb      	str	r3, [r7, #8]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ada:	2301      	movs	r3, #1
 8003adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ade:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <HAL_RCC_OscConfig+0x2b8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d121      	bne.n	8003b2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <HAL_RCC_OscConfig+0x2b8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a07      	ldr	r2, [pc, #28]	; (8003b0c <HAL_RCC_OscConfig+0x2b8>)
 8003af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af6:	f7fc fda9 	bl	800064c <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afc:	e011      	b.n	8003b22 <HAL_RCC_OscConfig+0x2ce>
 8003afe:	bf00      	nop
 8003b00:	40023800 	.word	0x40023800
 8003b04:	42470000 	.word	0x42470000
 8003b08:	42470e80 	.word	0x42470e80
 8003b0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b10:	f7fc fd9c 	bl	800064c <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e0fd      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b22:	4b81      	ldr	r3, [pc, #516]	; (8003d28 <HAL_RCC_OscConfig+0x4d4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d106      	bne.n	8003b44 <HAL_RCC_OscConfig+0x2f0>
 8003b36:	4b7d      	ldr	r3, [pc, #500]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	4a7c      	ldr	r2, [pc, #496]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	6713      	str	r3, [r2, #112]	; 0x70
 8003b42:	e01c      	b.n	8003b7e <HAL_RCC_OscConfig+0x32a>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b05      	cmp	r3, #5
 8003b4a:	d10c      	bne.n	8003b66 <HAL_RCC_OscConfig+0x312>
 8003b4c:	4b77      	ldr	r3, [pc, #476]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	4a76      	ldr	r2, [pc, #472]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b52:	f043 0304 	orr.w	r3, r3, #4
 8003b56:	6713      	str	r3, [r2, #112]	; 0x70
 8003b58:	4b74      	ldr	r3, [pc, #464]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5c:	4a73      	ldr	r2, [pc, #460]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6713      	str	r3, [r2, #112]	; 0x70
 8003b64:	e00b      	b.n	8003b7e <HAL_RCC_OscConfig+0x32a>
 8003b66:	4b71      	ldr	r3, [pc, #452]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	4a70      	ldr	r2, [pc, #448]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	6713      	str	r3, [r2, #112]	; 0x70
 8003b72:	4b6e      	ldr	r3, [pc, #440]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b76:	4a6d      	ldr	r2, [pc, #436]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003b78:	f023 0304 	bic.w	r3, r3, #4
 8003b7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d015      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b86:	f7fc fd61 	bl	800064c <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b8e:	f7fc fd5d 	bl	800064c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e0bc      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba4:	4b61      	ldr	r3, [pc, #388]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ee      	beq.n	8003b8e <HAL_RCC_OscConfig+0x33a>
 8003bb0:	e014      	b.n	8003bdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb2:	f7fc fd4b 	bl	800064c <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fc fd47 	bl	800064c <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e0a6      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd0:	4b56      	ldr	r3, [pc, #344]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ee      	bne.n	8003bba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d105      	bne.n	8003bee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be2:	4b52      	ldr	r3, [pc, #328]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	4a51      	ldr	r2, [pc, #324]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 8092 	beq.w	8003d1c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bf8:	4b4c      	ldr	r3, [pc, #304]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 030c 	and.w	r3, r3, #12
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d05c      	beq.n	8003cbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d141      	bne.n	8003c90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0c:	4b48      	ldr	r3, [pc, #288]	; (8003d30 <HAL_RCC_OscConfig+0x4dc>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c12:	f7fc fd1b 	bl	800064c <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c1a:	f7fc fd17 	bl	800064c <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e078      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2c:	4b3f      	ldr	r3, [pc, #252]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1f0      	bne.n	8003c1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69da      	ldr	r2, [r3, #28]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	019b      	lsls	r3, r3, #6
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	085b      	lsrs	r3, r3, #1
 8003c50:	3b01      	subs	r3, #1
 8003c52:	041b      	lsls	r3, r3, #16
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	061b      	lsls	r3, r3, #24
 8003c5c:	4933      	ldr	r1, [pc, #204]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c62:	4b33      	ldr	r3, [pc, #204]	; (8003d30 <HAL_RCC_OscConfig+0x4dc>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fc fcf0 	bl	800064c <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c70:	f7fc fcec 	bl	800064c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e04d      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c82:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0x41c>
 8003c8e:	e045      	b.n	8003d1c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c90:	4b27      	ldr	r3, [pc, #156]	; (8003d30 <HAL_RCC_OscConfig+0x4dc>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c96:	f7fc fcd9 	bl	800064c <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c9e:	f7fc fcd5 	bl	800064c <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e036      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb0:	4b1e      	ldr	r3, [pc, #120]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1f0      	bne.n	8003c9e <HAL_RCC_OscConfig+0x44a>
 8003cbc:	e02e      	b.n	8003d1c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e029      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cca:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <HAL_RCC_OscConfig+0x4d8>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d11c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d115      	bne.n	8003d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d10d      	bne.n	8003d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d106      	bne.n	8003d18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e000      	b.n	8003d1e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	42470060 	.word	0x42470060

08003d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0cc      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d48:	4b68      	ldr	r3, [pc, #416]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d90c      	bls.n	8003d70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d56:	4b65      	ldr	r3, [pc, #404]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5e:	4b63      	ldr	r3, [pc, #396]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d001      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e0b8      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d020      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d88:	4b59      	ldr	r3, [pc, #356]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	4a58      	ldr	r2, [pc, #352]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003da0:	4b53      	ldr	r3, [pc, #332]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4a52      	ldr	r2, [pc, #328]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003daa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dac:	4b50      	ldr	r3, [pc, #320]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	494d      	ldr	r1, [pc, #308]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d044      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd2:	4b47      	ldr	r3, [pc, #284]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d119      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e07f      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d003      	beq.n	8003df2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df2:	4b3f      	ldr	r3, [pc, #252]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d109      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e06f      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e02:	4b3b      	ldr	r3, [pc, #236]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e067      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e12:	4b37      	ldr	r3, [pc, #220]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f023 0203 	bic.w	r2, r3, #3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	4934      	ldr	r1, [pc, #208]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e24:	f7fc fc12 	bl	800064c <HAL_GetTick>
 8003e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e2c:	f7fc fc0e 	bl	800064c <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e04f      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e42:	4b2b      	ldr	r3, [pc, #172]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 020c 	and.w	r2, r3, #12
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d1eb      	bne.n	8003e2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e54:	4b25      	ldr	r3, [pc, #148]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d20c      	bcs.n	8003e7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e62:	4b22      	ldr	r3, [pc, #136]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6a:	4b20      	ldr	r3, [pc, #128]	; (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e032      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e88:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4916      	ldr	r1, [pc, #88]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ea6:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	490e      	ldr	r1, [pc, #56]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eba:	f000 f821 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8003ebe:	4601      	mov	r1, r0
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8003ecc:	5cd3      	ldrb	r3, [r2, r3]
 8003ece:	fa21 f303 	lsr.w	r3, r1, r3
 8003ed2:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_RCC_ClockConfig+0x1c8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc fb72 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40023c00 	.word	0x40023c00
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	08009f40 	.word	0x08009f40
 8003ef8:	20000028 	.word	0x20000028
 8003efc:	20000000 	.word	0x20000000

08003f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f16:	4b63      	ldr	r3, [pc, #396]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d007      	beq.n	8003f32 <HAL_RCC_GetSysClockFreq+0x32>
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d008      	beq.n	8003f38 <HAL_RCC_GetSysClockFreq+0x38>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f040 80b4 	bne.w	8004094 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f2c:	4b5e      	ldr	r3, [pc, #376]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f2e:	60bb      	str	r3, [r7, #8]
       break;
 8003f30:	e0b3      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f32:	4b5e      	ldr	r3, [pc, #376]	; (80040ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003f34:	60bb      	str	r3, [r7, #8]
      break;
 8003f36:	e0b0      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f38:	4b5a      	ldr	r3, [pc, #360]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f40:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f42:	4b58      	ldr	r3, [pc, #352]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d04a      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f4e:	4b55      	ldr	r3, [pc, #340]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	099b      	lsrs	r3, r3, #6
 8003f54:	f04f 0400 	mov.w	r4, #0
 8003f58:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	ea03 0501 	and.w	r5, r3, r1
 8003f64:	ea04 0602 	and.w	r6, r4, r2
 8003f68:	4629      	mov	r1, r5
 8003f6a:	4632      	mov	r2, r6
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	f04f 0400 	mov.w	r4, #0
 8003f74:	0154      	lsls	r4, r2, #5
 8003f76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f7a:	014b      	lsls	r3, r1, #5
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4622      	mov	r2, r4
 8003f80:	1b49      	subs	r1, r1, r5
 8003f82:	eb62 0206 	sbc.w	r2, r2, r6
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	f04f 0400 	mov.w	r4, #0
 8003f8e:	0194      	lsls	r4, r2, #6
 8003f90:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f94:	018b      	lsls	r3, r1, #6
 8003f96:	1a5b      	subs	r3, r3, r1
 8003f98:	eb64 0402 	sbc.w	r4, r4, r2
 8003f9c:	f04f 0100 	mov.w	r1, #0
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	00e2      	lsls	r2, r4, #3
 8003fa6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003faa:	00d9      	lsls	r1, r3, #3
 8003fac:	460b      	mov	r3, r1
 8003fae:	4614      	mov	r4, r2
 8003fb0:	195b      	adds	r3, r3, r5
 8003fb2:	eb44 0406 	adc.w	r4, r4, r6
 8003fb6:	f04f 0100 	mov.w	r1, #0
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	0262      	lsls	r2, r4, #9
 8003fc0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003fc4:	0259      	lsls	r1, r3, #9
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4614      	mov	r4, r2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	4621      	mov	r1, r4
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f04f 0400 	mov.w	r4, #0
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4623      	mov	r3, r4
 8003fd8:	f7fc f952 	bl	8000280 <__aeabi_uldivmod>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	460c      	mov	r4, r1
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e049      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe4:	4b2f      	ldr	r3, [pc, #188]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	099b      	lsrs	r3, r3, #6
 8003fea:	f04f 0400 	mov.w	r4, #0
 8003fee:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	ea03 0501 	and.w	r5, r3, r1
 8003ffa:	ea04 0602 	and.w	r6, r4, r2
 8003ffe:	4629      	mov	r1, r5
 8004000:	4632      	mov	r2, r6
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	f04f 0400 	mov.w	r4, #0
 800400a:	0154      	lsls	r4, r2, #5
 800400c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004010:	014b      	lsls	r3, r1, #5
 8004012:	4619      	mov	r1, r3
 8004014:	4622      	mov	r2, r4
 8004016:	1b49      	subs	r1, r1, r5
 8004018:	eb62 0206 	sbc.w	r2, r2, r6
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	f04f 0400 	mov.w	r4, #0
 8004024:	0194      	lsls	r4, r2, #6
 8004026:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800402a:	018b      	lsls	r3, r1, #6
 800402c:	1a5b      	subs	r3, r3, r1
 800402e:	eb64 0402 	sbc.w	r4, r4, r2
 8004032:	f04f 0100 	mov.w	r1, #0
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	00e2      	lsls	r2, r4, #3
 800403c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004040:	00d9      	lsls	r1, r3, #3
 8004042:	460b      	mov	r3, r1
 8004044:	4614      	mov	r4, r2
 8004046:	195b      	adds	r3, r3, r5
 8004048:	eb44 0406 	adc.w	r4, r4, r6
 800404c:	f04f 0100 	mov.w	r1, #0
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	02a2      	lsls	r2, r4, #10
 8004056:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800405a:	0299      	lsls	r1, r3, #10
 800405c:	460b      	mov	r3, r1
 800405e:	4614      	mov	r4, r2
 8004060:	4618      	mov	r0, r3
 8004062:	4621      	mov	r1, r4
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f04f 0400 	mov.w	r4, #0
 800406a:	461a      	mov	r2, r3
 800406c:	4623      	mov	r3, r4
 800406e:	f7fc f907 	bl	8000280 <__aeabi_uldivmod>
 8004072:	4603      	mov	r3, r0
 8004074:	460c      	mov	r4, r1
 8004076:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004078:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	0c1b      	lsrs	r3, r3, #16
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	3301      	adds	r3, #1
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	60bb      	str	r3, [r7, #8]
      break;
 8004092:	e002      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004096:	60bb      	str	r3, [r7, #8]
      break;
 8004098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800409a:	68bb      	ldr	r3, [r7, #8]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040a4:	40023800 	.word	0x40023800
 80040a8:	00f42400 	.word	0x00f42400
 80040ac:	007a1200 	.word	0x007a1200

080040b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040b4:	4b03      	ldr	r3, [pc, #12]	; (80040c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040b6:	681b      	ldr	r3, [r3, #0]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	20000028 	.word	0x20000028

080040c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040cc:	f7ff fff0 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 80040d0:	4601      	mov	r1, r0
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	0a9b      	lsrs	r3, r3, #10
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	4a03      	ldr	r2, [pc, #12]	; (80040ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80040de:	5cd3      	ldrb	r3, [r2, r3]
 80040e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40023800 	.word	0x40023800
 80040ec:	08009f50 	.word	0x08009f50

080040f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040f4:	f7ff ffdc 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 80040f8:	4601      	mov	r1, r0
 80040fa:	4b05      	ldr	r3, [pc, #20]	; (8004110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	0b5b      	lsrs	r3, r3, #13
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	4a03      	ldr	r2, [pc, #12]	; (8004114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004106:	5cd3      	ldrb	r3, [r2, r3]
 8004108:	fa21 f303 	lsr.w	r3, r1, r3
}
 800410c:	4618      	mov	r0, r3
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40023800 	.word	0x40023800
 8004114:	08009f50 	.word	0x08009f50

08004118 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d105      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800413c:	2b00      	cmp	r3, #0
 800413e:	d035      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004140:	4b62      	ldr	r3, [pc, #392]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004146:	f7fc fa81 	bl	800064c <HAL_GetTick>
 800414a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800414c:	e008      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800414e:	f7fc fa7d 	bl	800064c <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e0b0      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004160:	4b5b      	ldr	r3, [pc, #364]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1f0      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	019a      	lsls	r2, r3, #6
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	071b      	lsls	r3, r3, #28
 8004178:	4955      	ldr	r1, [pc, #340]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004180:	4b52      	ldr	r3, [pc, #328]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004182:	2201      	movs	r2, #1
 8004184:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004186:	f7fc fa61 	bl	800064c <HAL_GetTick>
 800418a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800418e:	f7fc fa5d 	bl	800064c <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e090      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041a0:	4b4b      	ldr	r3, [pc, #300]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8083 	beq.w	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	4b44      	ldr	r3, [pc, #272]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	4a43      	ldr	r2, [pc, #268]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ca:	4b41      	ldr	r3, [pc, #260]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80041d6:	4b3f      	ldr	r3, [pc, #252]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a3e      	ldr	r2, [pc, #248]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041e2:	f7fc fa33 	bl	800064c <HAL_GetTick>
 80041e6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041e8:	e008      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041ea:	f7fc fa2f 	bl	800064c <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e062      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041fc:	4b35      	ldr	r3, [pc, #212]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f0      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004208:	4b31      	ldr	r3, [pc, #196]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004210:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d02f      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	429a      	cmp	r2, r3
 8004224:	d028      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004226:	4b2a      	ldr	r3, [pc, #168]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004230:	4b29      	ldr	r3, [pc, #164]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004232:	2201      	movs	r2, #1
 8004234:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004236:	4b28      	ldr	r3, [pc, #160]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800423c:	4a24      	ldr	r2, [pc, #144]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004242:	4b23      	ldr	r3, [pc, #140]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b01      	cmp	r3, #1
 800424c:	d114      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800424e:	f7fc f9fd 	bl	800064c <HAL_GetTick>
 8004252:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004254:	e00a      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004256:	f7fc f9f9 	bl	800064c <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	f241 3288 	movw	r2, #5000	; 0x1388
 8004264:	4293      	cmp	r3, r2
 8004266:	d901      	bls.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e02a      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426c:	4b18      	ldr	r3, [pc, #96]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0ee      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004284:	d10d      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004286:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800429a:	490d      	ldr	r1, [pc, #52]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800429c:	4313      	orrs	r3, r2
 800429e:	608b      	str	r3, [r1, #8]
 80042a0:	e005      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 80042a2:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	4a0a      	ldr	r2, [pc, #40]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042a8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042ac:	6093      	str	r3, [r2, #8]
 80042ae:	4b08      	ldr	r3, [pc, #32]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ba:	4905      	ldr	r1, [pc, #20]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	42470068 	.word	0x42470068
 80042d0:	40023800 	.word	0x40023800
 80042d4:	40007000 	.word	0x40007000
 80042d8:	42470e40 	.word	0x42470e40

080042dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d13d      	bne.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80042fa:	4b22      	ldr	r3, [pc, #136]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004302:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d004      	beq.n	8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800430a:	2b01      	cmp	r3, #1
 800430c:	d12f      	bne.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800430e:	4b1e      	ldr	r3, [pc, #120]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004310:	617b      	str	r3, [r7, #20]
          break;
 8004312:	e02f      	b.n	8004374 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004314:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004320:	d108      	bne.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004322:	4b18      	ldr	r3, [pc, #96]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800432a:	4a18      	ldr	r2, [pc, #96]	; (800438c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800432c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	e007      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004334:	4b13      	ldr	r3, [pc, #76]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800433c:	4a14      	ldr	r2, [pc, #80]	; (8004390 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800433e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004342:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004344:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800434a:	099b      	lsrs	r3, r3, #6
 800434c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	fb02 f303 	mul.w	r3, r2, r3
 8004356:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800435a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800435e:	0f1b      	lsrs	r3, r3, #28
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	fbb2 f3f3 	udiv	r3, r2, r3
 800436a:	617b      	str	r3, [r7, #20]
          break;
 800436c:	e002      	b.n	8004374 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]
          break;
 8004372:	bf00      	nop
        }
      }
      break;
 8004374:	bf00      	nop
    }
  }
  return frequency;
 8004376:	697b      	ldr	r3, [r7, #20]
}
 8004378:	4618      	mov	r0, r3
 800437a:	371c      	adds	r7, #28
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	40023800 	.word	0x40023800
 8004388:	00bb8000 	.word	0x00bb8000
 800438c:	007a1200 	.word	0x007a1200
 8004390:	00f42400 	.word	0x00f42400

08004394 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e056      	b.n	8004454 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d106      	bne.n	80043c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f004 fcb5 	bl	8008d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2202      	movs	r2, #2
 80043ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	ea42 0103 	orr.w	r1, r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	0c1b      	lsrs	r3, r3, #16
 8004424:	f003 0104 	and.w	r1, r3, #4
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69da      	ldr	r2, [r3, #28]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004442:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e01d      	b.n	80044aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d106      	bne.n	8004488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f004 fc9c 	bl	8008dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3304      	adds	r3, #4
 8004498:	4619      	mov	r1, r3
 800449a:	4610      	mov	r0, r2
 800449c:	f000 f9fa 	bl	8004894 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e01d      	b.n	8004500 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d106      	bne.n	80044de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f815 	bl	8004508 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2202      	movs	r2, #2
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3304      	adds	r3, #4
 80044ee:	4619      	mov	r1, r3
 80044f0:	4610      	mov	r0, r2
 80044f2:	f000 f9cf 	bl	8004894 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2201      	movs	r2, #1
 800452c:	6839      	ldr	r1, [r7, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fc9a 	bl	8004e68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a15      	ldr	r2, [pc, #84]	; (8004590 <HAL_TIM_PWM_Start+0x74>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d004      	beq.n	8004548 <HAL_TIM_PWM_Start+0x2c>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a14      	ldr	r2, [pc, #80]	; (8004594 <HAL_TIM_PWM_Start+0x78>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d101      	bne.n	800454c <HAL_TIM_PWM_Start+0x30>
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <HAL_TIM_PWM_Start+0x32>
 800454c:	2300      	movs	r3, #0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004560:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b06      	cmp	r3, #6
 8004572:	d007      	beq.n	8004584 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40010000 	.word	0x40010000
 8004594:	40010400 	.word	0x40010400

08004598 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d101      	bne.n	80045b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80045ae:	2302      	movs	r3, #2
 80045b0:	e0b4      	b.n	800471c <HAL_TIM_PWM_ConfigChannel+0x184>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2202      	movs	r2, #2
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b0c      	cmp	r3, #12
 80045c6:	f200 809f 	bhi.w	8004708 <HAL_TIM_PWM_ConfigChannel+0x170>
 80045ca:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80045cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d0:	08004605 	.word	0x08004605
 80045d4:	08004709 	.word	0x08004709
 80045d8:	08004709 	.word	0x08004709
 80045dc:	08004709 	.word	0x08004709
 80045e0:	08004645 	.word	0x08004645
 80045e4:	08004709 	.word	0x08004709
 80045e8:	08004709 	.word	0x08004709
 80045ec:	08004709 	.word	0x08004709
 80045f0:	08004687 	.word	0x08004687
 80045f4:	08004709 	.word	0x08004709
 80045f8:	08004709 	.word	0x08004709
 80045fc:	08004709 	.word	0x08004709
 8004600:	080046c7 	.word	0x080046c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 f9e2 	bl	80049d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0208 	orr.w	r2, r2, #8
 800461e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699a      	ldr	r2, [r3, #24]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0204 	bic.w	r2, r2, #4
 800462e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6999      	ldr	r1, [r3, #24]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	619a      	str	r2, [r3, #24]
      break;
 8004642:	e062      	b.n	800470a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fa32 	bl	8004ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699a      	ldr	r2, [r3, #24]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800465e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800466e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6999      	ldr	r1, [r3, #24]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	021a      	lsls	r2, r3, #8
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	619a      	str	r2, [r3, #24]
      break;
 8004684:	e041      	b.n	800470a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68b9      	ldr	r1, [r7, #8]
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fa87 	bl	8004ba0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0208 	orr.w	r2, r2, #8
 80046a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0204 	bic.w	r2, r2, #4
 80046b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69d9      	ldr	r1, [r3, #28]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	61da      	str	r2, [r3, #28]
      break;
 80046c4:	e021      	b.n	800470a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68b9      	ldr	r1, [r7, #8]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fadb 	bl	8004c88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69da      	ldr	r2, [r3, #28]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	69da      	ldr	r2, [r3, #28]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69d9      	ldr	r1, [r3, #28]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	021a      	lsls	r2, r3, #8
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	61da      	str	r2, [r3, #28]
      break;
 8004706:	e000      	b.n	800470a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004708:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_TIM_ConfigClockSource+0x18>
 8004738:	2302      	movs	r3, #2
 800473a:	e0a6      	b.n	800488a <HAL_TIM_ConfigClockSource+0x166>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800475a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004762:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b40      	cmp	r3, #64	; 0x40
 8004772:	d067      	beq.n	8004844 <HAL_TIM_ConfigClockSource+0x120>
 8004774:	2b40      	cmp	r3, #64	; 0x40
 8004776:	d80b      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x6c>
 8004778:	2b10      	cmp	r3, #16
 800477a:	d073      	beq.n	8004864 <HAL_TIM_ConfigClockSource+0x140>
 800477c:	2b10      	cmp	r3, #16
 800477e:	d802      	bhi.n	8004786 <HAL_TIM_ConfigClockSource+0x62>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d06f      	beq.n	8004864 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004784:	e078      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004786:	2b20      	cmp	r3, #32
 8004788:	d06c      	beq.n	8004864 <HAL_TIM_ConfigClockSource+0x140>
 800478a:	2b30      	cmp	r3, #48	; 0x30
 800478c:	d06a      	beq.n	8004864 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800478e:	e073      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004790:	2b70      	cmp	r3, #112	; 0x70
 8004792:	d00d      	beq.n	80047b0 <HAL_TIM_ConfigClockSource+0x8c>
 8004794:	2b70      	cmp	r3, #112	; 0x70
 8004796:	d804      	bhi.n	80047a2 <HAL_TIM_ConfigClockSource+0x7e>
 8004798:	2b50      	cmp	r3, #80	; 0x50
 800479a:	d033      	beq.n	8004804 <HAL_TIM_ConfigClockSource+0xe0>
 800479c:	2b60      	cmp	r3, #96	; 0x60
 800479e:	d041      	beq.n	8004824 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80047a0:	e06a      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a6:	d066      	beq.n	8004876 <HAL_TIM_ConfigClockSource+0x152>
 80047a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ac:	d017      	beq.n	80047de <HAL_TIM_ConfigClockSource+0xba>
      break;
 80047ae:	e063      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	6899      	ldr	r1, [r3, #8]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f000 fb32 	bl	8004e28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	609a      	str	r2, [r3, #8]
      break;
 80047dc:	e04c      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6899      	ldr	r1, [r3, #8]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f000 fb1b 	bl	8004e28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004800:	609a      	str	r2, [r3, #8]
      break;
 8004802:	e039      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	6859      	ldr	r1, [r3, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	461a      	mov	r2, r3
 8004812:	f000 fa8f 	bl	8004d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2150      	movs	r1, #80	; 0x50
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fae8 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 8004822:	e029      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	6859      	ldr	r1, [r3, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	461a      	mov	r2, r3
 8004832:	f000 faae 	bl	8004d92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2160      	movs	r1, #96	; 0x60
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fad8 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 8004842:	e019      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	6859      	ldr	r1, [r3, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	461a      	mov	r2, r3
 8004852:	f000 fa6f 	bl	8004d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2140      	movs	r1, #64	; 0x40
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fac8 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 8004862:	e009      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f000 fabf 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 8004874:	e000      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004876:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a40      	ldr	r2, [pc, #256]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d013      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b2:	d00f      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a3d      	ldr	r2, [pc, #244]	; (80049ac <TIM_Base_SetConfig+0x118>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00b      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a3c      	ldr	r2, [pc, #240]	; (80049b0 <TIM_Base_SetConfig+0x11c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d007      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a3b      	ldr	r2, [pc, #236]	; (80049b4 <TIM_Base_SetConfig+0x120>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d003      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a3a      	ldr	r2, [pc, #232]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d108      	bne.n	80048e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2f      	ldr	r2, [pc, #188]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d02b      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f4:	d027      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a2c      	ldr	r2, [pc, #176]	; (80049ac <TIM_Base_SetConfig+0x118>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d023      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2b      	ldr	r2, [pc, #172]	; (80049b0 <TIM_Base_SetConfig+0x11c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01f      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2a      	ldr	r2, [pc, #168]	; (80049b4 <TIM_Base_SetConfig+0x120>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01b      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a29      	ldr	r2, [pc, #164]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d017      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a28      	ldr	r2, [pc, #160]	; (80049bc <TIM_Base_SetConfig+0x128>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a27      	ldr	r2, [pc, #156]	; (80049c0 <TIM_Base_SetConfig+0x12c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00f      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a26      	ldr	r2, [pc, #152]	; (80049c4 <TIM_Base_SetConfig+0x130>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00b      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a25      	ldr	r2, [pc, #148]	; (80049c8 <TIM_Base_SetConfig+0x134>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d007      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a24      	ldr	r2, [pc, #144]	; (80049cc <TIM_Base_SetConfig+0x138>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d003      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a23      	ldr	r2, [pc, #140]	; (80049d0 <TIM_Base_SetConfig+0x13c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d108      	bne.n	8004958 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a0a      	ldr	r2, [pc, #40]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <TIM_Base_SetConfig+0xf8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a0c      	ldr	r2, [pc, #48]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d103      	bne.n	8004994 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	615a      	str	r2, [r3, #20]
}
 800499a:	bf00      	nop
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40010400 	.word	0x40010400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40014400 	.word	0x40014400
 80049c4:	40014800 	.word	0x40014800
 80049c8:	40001800 	.word	0x40001800
 80049cc:	40001c00 	.word	0x40001c00
 80049d0:	40002000 	.word	0x40002000

080049d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	f023 0201 	bic.w	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0303 	bic.w	r3, r3, #3
 8004a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 0302 	bic.w	r3, r3, #2
 8004a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a20      	ldr	r2, [pc, #128]	; (8004aac <TIM_OC1_SetConfig+0xd8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d003      	beq.n	8004a38 <TIM_OC1_SetConfig+0x64>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a1f      	ldr	r2, [pc, #124]	; (8004ab0 <TIM_OC1_SetConfig+0xdc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d10c      	bne.n	8004a52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f023 0308 	bic.w	r3, r3, #8
 8004a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f023 0304 	bic.w	r3, r3, #4
 8004a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a15      	ldr	r2, [pc, #84]	; (8004aac <TIM_OC1_SetConfig+0xd8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d003      	beq.n	8004a62 <TIM_OC1_SetConfig+0x8e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a14      	ldr	r2, [pc, #80]	; (8004ab0 <TIM_OC1_SetConfig+0xdc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d111      	bne.n	8004a86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	621a      	str	r2, [r3, #32]
}
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	40010000 	.word	0x40010000
 8004ab0:	40010400 	.word	0x40010400

08004ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f023 0210 	bic.w	r2, r3, #16
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f023 0320 	bic.w	r3, r3, #32
 8004afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a22      	ldr	r2, [pc, #136]	; (8004b98 <TIM_OC2_SetConfig+0xe4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d003      	beq.n	8004b1c <TIM_OC2_SetConfig+0x68>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <TIM_OC2_SetConfig+0xe8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d10d      	bne.n	8004b38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a17      	ldr	r2, [pc, #92]	; (8004b98 <TIM_OC2_SetConfig+0xe4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d003      	beq.n	8004b48 <TIM_OC2_SetConfig+0x94>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a16      	ldr	r2, [pc, #88]	; (8004b9c <TIM_OC2_SetConfig+0xe8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d113      	bne.n	8004b70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	40010400 	.word	0x40010400

08004ba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a21      	ldr	r2, [pc, #132]	; (8004c80 <TIM_OC3_SetConfig+0xe0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d003      	beq.n	8004c06 <TIM_OC3_SetConfig+0x66>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a20      	ldr	r2, [pc, #128]	; (8004c84 <TIM_OC3_SetConfig+0xe4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d10d      	bne.n	8004c22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a16      	ldr	r2, [pc, #88]	; (8004c80 <TIM_OC3_SetConfig+0xe0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d003      	beq.n	8004c32 <TIM_OC3_SetConfig+0x92>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a15      	ldr	r2, [pc, #84]	; (8004c84 <TIM_OC3_SetConfig+0xe4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d113      	bne.n	8004c5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	621a      	str	r2, [r3, #32]
}
 8004c74:	bf00      	nop
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	40010000 	.word	0x40010000
 8004c84:	40010400 	.word	0x40010400

08004c88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	031b      	lsls	r3, r3, #12
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a12      	ldr	r2, [pc, #72]	; (8004d2c <TIM_OC4_SetConfig+0xa4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <TIM_OC4_SetConfig+0x68>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a11      	ldr	r2, [pc, #68]	; (8004d30 <TIM_OC4_SetConfig+0xa8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d109      	bne.n	8004d04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	019b      	lsls	r3, r3, #6
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40010000 	.word	0x40010000
 8004d30:	40010400 	.word	0x40010400

08004d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f023 0201 	bic.w	r2, r3, #1
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f023 030a 	bic.w	r3, r3, #10
 8004d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b087      	sub	sp, #28
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f023 0210 	bic.w	r2, r3, #16
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	031b      	lsls	r3, r3, #12
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	621a      	str	r2, [r3, #32]
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b085      	sub	sp, #20
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f043 0307 	orr.w	r3, r3, #7
 8004e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	609a      	str	r2, [r3, #8]
}
 8004e1c:	bf00      	nop
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	021a      	lsls	r2, r3, #8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	609a      	str	r2, [r3, #8]
}
 8004e5c:	bf00      	nop
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f003 031f 	and.w	r3, r3, #31
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a1a      	ldr	r2, [r3, #32]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	401a      	ands	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a1a      	ldr	r2, [r3, #32]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	6879      	ldr	r1, [r7, #4]
 8004e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	621a      	str	r2, [r3, #32]
}
 8004ea6:	bf00      	nop
 8004ea8:	371c      	adds	r7, #28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
	...

08004eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e05a      	b.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a21      	ldr	r2, [pc, #132]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d022      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f18:	d01d      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1d      	ldr	r2, [pc, #116]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d018      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a1b      	ldr	r2, [pc, #108]	; (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d013      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1a      	ldr	r2, [pc, #104]	; (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00e      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a18      	ldr	r2, [pc, #96]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d009      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a17      	ldr	r2, [pc, #92]	; (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d004      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a15      	ldr	r2, [pc, #84]	; (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d10c      	bne.n	8004f70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40010000 	.word	0x40010000
 8004f94:	40000400 	.word	0x40000400
 8004f98:	40000800 	.word	0x40000800
 8004f9c:	40000c00 	.word	0x40000c00
 8004fa0:	40010400 	.word	0x40010400
 8004fa4:	40014000 	.word	0x40014000
 8004fa8:	40001800 	.word	0x40001800

08004fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e03f      	b.n	800503e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f003 ff50 	bl	8008e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2224      	movs	r2, #36	; 0x24
 8004fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f90b 	bl	800520c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695a      	ldr	r2, [r3, #20]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b088      	sub	sp, #32
 800504a:	af02      	add	r7, sp, #8
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	603b      	str	r3, [r7, #0]
 8005052:	4613      	mov	r3, r2
 8005054:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b20      	cmp	r3, #32
 8005064:	f040 8083 	bne.w	800516e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_UART_Transmit+0x2e>
 800506e:	88fb      	ldrh	r3, [r7, #6]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e07b      	b.n	8005170 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800507e:	2b01      	cmp	r3, #1
 8005080:	d101      	bne.n	8005086 <HAL_UART_Transmit+0x40>
 8005082:	2302      	movs	r3, #2
 8005084:	e074      	b.n	8005170 <HAL_UART_Transmit+0x12a>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2221      	movs	r2, #33	; 0x21
 8005098:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800509c:	f7fb fad6 	bl	800064c <HAL_GetTick>
 80050a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	88fa      	ldrh	r2, [r7, #6]
 80050a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	88fa      	ldrh	r2, [r7, #6]
 80050ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80050b6:	e042      	b.n	800513e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050bc:	b29b      	uxth	r3, r3
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ce:	d122      	bne.n	8005116 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2200      	movs	r2, #0
 80050d8:	2180      	movs	r1, #128	; 0x80
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 f84c 	bl	8005178 <UART_WaitOnFlagUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e042      	b.n	8005170 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050fc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d103      	bne.n	800510e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	3302      	adds	r3, #2
 800510a:	60bb      	str	r3, [r7, #8]
 800510c:	e017      	b.n	800513e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	3301      	adds	r3, #1
 8005112:	60bb      	str	r3, [r7, #8]
 8005114:	e013      	b.n	800513e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2200      	movs	r2, #0
 800511e:	2180      	movs	r1, #128	; 0x80
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 f829 	bl	8005178 <UART_WaitOnFlagUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e01f      	b.n	8005170 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	60ba      	str	r2, [r7, #8]
 8005136:	781a      	ldrb	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005142:	b29b      	uxth	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1b7      	bne.n	80050b8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2200      	movs	r2, #0
 8005150:	2140      	movs	r1, #64	; 0x40
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 f810 	bl	8005178 <UART_WaitOnFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e006      	b.n	8005170 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	e000      	b.n	8005170 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800516e:	2302      	movs	r3, #2
  }
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005188:	e02c      	b.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005190:	d028      	beq.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d007      	beq.n	80051a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005198:	f7fb fa58 	bl	800064c <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d21d      	bcs.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695a      	ldr	r2, [r3, #20]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0201 	bic.w	r2, r2, #1
 80051c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e00f      	b.n	8005204 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	4013      	ands	r3, r2
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	461a      	mov	r2, r3
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d0c3      	beq.n	800518a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800520c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005210:	b085      	sub	sp, #20
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800524e:	f023 030c 	bic.w	r3, r3, #12
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6812      	ldr	r2, [r2, #0]
 8005256:	68f9      	ldr	r1, [r7, #12]
 8005258:	430b      	orrs	r3, r1
 800525a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800527a:	f040 818b 	bne.w	8005594 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4ac1      	ldr	r2, [pc, #772]	; (8005588 <UART_SetConfig+0x37c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d005      	beq.n	8005294 <UART_SetConfig+0x88>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4abf      	ldr	r2, [pc, #764]	; (800558c <UART_SetConfig+0x380>)
 800528e:	4293      	cmp	r3, r2
 8005290:	f040 80bd 	bne.w	800540e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005294:	f7fe ff2c 	bl	80040f0 <HAL_RCC_GetPCLK2Freq>
 8005298:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	461d      	mov	r5, r3
 800529e:	f04f 0600 	mov.w	r6, #0
 80052a2:	46a8      	mov	r8, r5
 80052a4:	46b1      	mov	r9, r6
 80052a6:	eb18 0308 	adds.w	r3, r8, r8
 80052aa:	eb49 0409 	adc.w	r4, r9, r9
 80052ae:	4698      	mov	r8, r3
 80052b0:	46a1      	mov	r9, r4
 80052b2:	eb18 0805 	adds.w	r8, r8, r5
 80052b6:	eb49 0906 	adc.w	r9, r9, r6
 80052ba:	f04f 0100 	mov.w	r1, #0
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80052ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80052ce:	4688      	mov	r8, r1
 80052d0:	4691      	mov	r9, r2
 80052d2:	eb18 0005 	adds.w	r0, r8, r5
 80052d6:	eb49 0106 	adc.w	r1, r9, r6
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	461d      	mov	r5, r3
 80052e0:	f04f 0600 	mov.w	r6, #0
 80052e4:	196b      	adds	r3, r5, r5
 80052e6:	eb46 0406 	adc.w	r4, r6, r6
 80052ea:	461a      	mov	r2, r3
 80052ec:	4623      	mov	r3, r4
 80052ee:	f7fa ffc7 	bl	8000280 <__aeabi_uldivmod>
 80052f2:	4603      	mov	r3, r0
 80052f4:	460c      	mov	r4, r1
 80052f6:	461a      	mov	r2, r3
 80052f8:	4ba5      	ldr	r3, [pc, #660]	; (8005590 <UART_SetConfig+0x384>)
 80052fa:	fba3 2302 	umull	r2, r3, r3, r2
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	461d      	mov	r5, r3
 8005308:	f04f 0600 	mov.w	r6, #0
 800530c:	46a9      	mov	r9, r5
 800530e:	46b2      	mov	sl, r6
 8005310:	eb19 0309 	adds.w	r3, r9, r9
 8005314:	eb4a 040a 	adc.w	r4, sl, sl
 8005318:	4699      	mov	r9, r3
 800531a:	46a2      	mov	sl, r4
 800531c:	eb19 0905 	adds.w	r9, r9, r5
 8005320:	eb4a 0a06 	adc.w	sl, sl, r6
 8005324:	f04f 0100 	mov.w	r1, #0
 8005328:	f04f 0200 	mov.w	r2, #0
 800532c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005330:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005334:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005338:	4689      	mov	r9, r1
 800533a:	4692      	mov	sl, r2
 800533c:	eb19 0005 	adds.w	r0, r9, r5
 8005340:	eb4a 0106 	adc.w	r1, sl, r6
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	461d      	mov	r5, r3
 800534a:	f04f 0600 	mov.w	r6, #0
 800534e:	196b      	adds	r3, r5, r5
 8005350:	eb46 0406 	adc.w	r4, r6, r6
 8005354:	461a      	mov	r2, r3
 8005356:	4623      	mov	r3, r4
 8005358:	f7fa ff92 	bl	8000280 <__aeabi_uldivmod>
 800535c:	4603      	mov	r3, r0
 800535e:	460c      	mov	r4, r1
 8005360:	461a      	mov	r2, r3
 8005362:	4b8b      	ldr	r3, [pc, #556]	; (8005590 <UART_SetConfig+0x384>)
 8005364:	fba3 1302 	umull	r1, r3, r3, r2
 8005368:	095b      	lsrs	r3, r3, #5
 800536a:	2164      	movs	r1, #100	; 0x64
 800536c:	fb01 f303 	mul.w	r3, r1, r3
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	3332      	adds	r3, #50	; 0x32
 8005376:	4a86      	ldr	r2, [pc, #536]	; (8005590 <UART_SetConfig+0x384>)
 8005378:	fba2 2303 	umull	r2, r3, r2, r3
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005384:	4498      	add	r8, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	461d      	mov	r5, r3
 800538a:	f04f 0600 	mov.w	r6, #0
 800538e:	46a9      	mov	r9, r5
 8005390:	46b2      	mov	sl, r6
 8005392:	eb19 0309 	adds.w	r3, r9, r9
 8005396:	eb4a 040a 	adc.w	r4, sl, sl
 800539a:	4699      	mov	r9, r3
 800539c:	46a2      	mov	sl, r4
 800539e:	eb19 0905 	adds.w	r9, r9, r5
 80053a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80053a6:	f04f 0100 	mov.w	r1, #0
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053ba:	4689      	mov	r9, r1
 80053bc:	4692      	mov	sl, r2
 80053be:	eb19 0005 	adds.w	r0, r9, r5
 80053c2:	eb4a 0106 	adc.w	r1, sl, r6
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	461d      	mov	r5, r3
 80053cc:	f04f 0600 	mov.w	r6, #0
 80053d0:	196b      	adds	r3, r5, r5
 80053d2:	eb46 0406 	adc.w	r4, r6, r6
 80053d6:	461a      	mov	r2, r3
 80053d8:	4623      	mov	r3, r4
 80053da:	f7fa ff51 	bl	8000280 <__aeabi_uldivmod>
 80053de:	4603      	mov	r3, r0
 80053e0:	460c      	mov	r4, r1
 80053e2:	461a      	mov	r2, r3
 80053e4:	4b6a      	ldr	r3, [pc, #424]	; (8005590 <UART_SetConfig+0x384>)
 80053e6:	fba3 1302 	umull	r1, r3, r3, r2
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	2164      	movs	r1, #100	; 0x64
 80053ee:	fb01 f303 	mul.w	r3, r1, r3
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	3332      	adds	r3, #50	; 0x32
 80053f8:	4a65      	ldr	r2, [pc, #404]	; (8005590 <UART_SetConfig+0x384>)
 80053fa:	fba2 2303 	umull	r2, r3, r2, r3
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	f003 0207 	and.w	r2, r3, #7
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4442      	add	r2, r8
 800540a:	609a      	str	r2, [r3, #8]
 800540c:	e26f      	b.n	80058ee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800540e:	f7fe fe5b 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 8005412:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	461d      	mov	r5, r3
 8005418:	f04f 0600 	mov.w	r6, #0
 800541c:	46a8      	mov	r8, r5
 800541e:	46b1      	mov	r9, r6
 8005420:	eb18 0308 	adds.w	r3, r8, r8
 8005424:	eb49 0409 	adc.w	r4, r9, r9
 8005428:	4698      	mov	r8, r3
 800542a:	46a1      	mov	r9, r4
 800542c:	eb18 0805 	adds.w	r8, r8, r5
 8005430:	eb49 0906 	adc.w	r9, r9, r6
 8005434:	f04f 0100 	mov.w	r1, #0
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005440:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005444:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005448:	4688      	mov	r8, r1
 800544a:	4691      	mov	r9, r2
 800544c:	eb18 0005 	adds.w	r0, r8, r5
 8005450:	eb49 0106 	adc.w	r1, r9, r6
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	461d      	mov	r5, r3
 800545a:	f04f 0600 	mov.w	r6, #0
 800545e:	196b      	adds	r3, r5, r5
 8005460:	eb46 0406 	adc.w	r4, r6, r6
 8005464:	461a      	mov	r2, r3
 8005466:	4623      	mov	r3, r4
 8005468:	f7fa ff0a 	bl	8000280 <__aeabi_uldivmod>
 800546c:	4603      	mov	r3, r0
 800546e:	460c      	mov	r4, r1
 8005470:	461a      	mov	r2, r3
 8005472:	4b47      	ldr	r3, [pc, #284]	; (8005590 <UART_SetConfig+0x384>)
 8005474:	fba3 2302 	umull	r2, r3, r3, r2
 8005478:	095b      	lsrs	r3, r3, #5
 800547a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	461d      	mov	r5, r3
 8005482:	f04f 0600 	mov.w	r6, #0
 8005486:	46a9      	mov	r9, r5
 8005488:	46b2      	mov	sl, r6
 800548a:	eb19 0309 	adds.w	r3, r9, r9
 800548e:	eb4a 040a 	adc.w	r4, sl, sl
 8005492:	4699      	mov	r9, r3
 8005494:	46a2      	mov	sl, r4
 8005496:	eb19 0905 	adds.w	r9, r9, r5
 800549a:	eb4a 0a06 	adc.w	sl, sl, r6
 800549e:	f04f 0100 	mov.w	r1, #0
 80054a2:	f04f 0200 	mov.w	r2, #0
 80054a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054b2:	4689      	mov	r9, r1
 80054b4:	4692      	mov	sl, r2
 80054b6:	eb19 0005 	adds.w	r0, r9, r5
 80054ba:	eb4a 0106 	adc.w	r1, sl, r6
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	461d      	mov	r5, r3
 80054c4:	f04f 0600 	mov.w	r6, #0
 80054c8:	196b      	adds	r3, r5, r5
 80054ca:	eb46 0406 	adc.w	r4, r6, r6
 80054ce:	461a      	mov	r2, r3
 80054d0:	4623      	mov	r3, r4
 80054d2:	f7fa fed5 	bl	8000280 <__aeabi_uldivmod>
 80054d6:	4603      	mov	r3, r0
 80054d8:	460c      	mov	r4, r1
 80054da:	461a      	mov	r2, r3
 80054dc:	4b2c      	ldr	r3, [pc, #176]	; (8005590 <UART_SetConfig+0x384>)
 80054de:	fba3 1302 	umull	r1, r3, r3, r2
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	2164      	movs	r1, #100	; 0x64
 80054e6:	fb01 f303 	mul.w	r3, r1, r3
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	3332      	adds	r3, #50	; 0x32
 80054f0:	4a27      	ldr	r2, [pc, #156]	; (8005590 <UART_SetConfig+0x384>)
 80054f2:	fba2 2303 	umull	r2, r3, r2, r3
 80054f6:	095b      	lsrs	r3, r3, #5
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054fe:	4498      	add	r8, r3
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	461d      	mov	r5, r3
 8005504:	f04f 0600 	mov.w	r6, #0
 8005508:	46a9      	mov	r9, r5
 800550a:	46b2      	mov	sl, r6
 800550c:	eb19 0309 	adds.w	r3, r9, r9
 8005510:	eb4a 040a 	adc.w	r4, sl, sl
 8005514:	4699      	mov	r9, r3
 8005516:	46a2      	mov	sl, r4
 8005518:	eb19 0905 	adds.w	r9, r9, r5
 800551c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005520:	f04f 0100 	mov.w	r1, #0
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800552c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005530:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005534:	4689      	mov	r9, r1
 8005536:	4692      	mov	sl, r2
 8005538:	eb19 0005 	adds.w	r0, r9, r5
 800553c:	eb4a 0106 	adc.w	r1, sl, r6
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	461d      	mov	r5, r3
 8005546:	f04f 0600 	mov.w	r6, #0
 800554a:	196b      	adds	r3, r5, r5
 800554c:	eb46 0406 	adc.w	r4, r6, r6
 8005550:	461a      	mov	r2, r3
 8005552:	4623      	mov	r3, r4
 8005554:	f7fa fe94 	bl	8000280 <__aeabi_uldivmod>
 8005558:	4603      	mov	r3, r0
 800555a:	460c      	mov	r4, r1
 800555c:	461a      	mov	r2, r3
 800555e:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <UART_SetConfig+0x384>)
 8005560:	fba3 1302 	umull	r1, r3, r3, r2
 8005564:	095b      	lsrs	r3, r3, #5
 8005566:	2164      	movs	r1, #100	; 0x64
 8005568:	fb01 f303 	mul.w	r3, r1, r3
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	3332      	adds	r3, #50	; 0x32
 8005572:	4a07      	ldr	r2, [pc, #28]	; (8005590 <UART_SetConfig+0x384>)
 8005574:	fba2 2303 	umull	r2, r3, r2, r3
 8005578:	095b      	lsrs	r3, r3, #5
 800557a:	f003 0207 	and.w	r2, r3, #7
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4442      	add	r2, r8
 8005584:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005586:	e1b2      	b.n	80058ee <UART_SetConfig+0x6e2>
 8005588:	40011000 	.word	0x40011000
 800558c:	40011400 	.word	0x40011400
 8005590:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4ad7      	ldr	r2, [pc, #860]	; (80058f8 <UART_SetConfig+0x6ec>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d005      	beq.n	80055aa <UART_SetConfig+0x39e>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4ad6      	ldr	r2, [pc, #856]	; (80058fc <UART_SetConfig+0x6f0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	f040 80d1 	bne.w	800574c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80055aa:	f7fe fda1 	bl	80040f0 <HAL_RCC_GetPCLK2Freq>
 80055ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	469a      	mov	sl, r3
 80055b4:	f04f 0b00 	mov.w	fp, #0
 80055b8:	46d0      	mov	r8, sl
 80055ba:	46d9      	mov	r9, fp
 80055bc:	eb18 0308 	adds.w	r3, r8, r8
 80055c0:	eb49 0409 	adc.w	r4, r9, r9
 80055c4:	4698      	mov	r8, r3
 80055c6:	46a1      	mov	r9, r4
 80055c8:	eb18 080a 	adds.w	r8, r8, sl
 80055cc:	eb49 090b 	adc.w	r9, r9, fp
 80055d0:	f04f 0100 	mov.w	r1, #0
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80055dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80055e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80055e4:	4688      	mov	r8, r1
 80055e6:	4691      	mov	r9, r2
 80055e8:	eb1a 0508 	adds.w	r5, sl, r8
 80055ec:	eb4b 0609 	adc.w	r6, fp, r9
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	4619      	mov	r1, r3
 80055f6:	f04f 0200 	mov.w	r2, #0
 80055fa:	f04f 0300 	mov.w	r3, #0
 80055fe:	f04f 0400 	mov.w	r4, #0
 8005602:	0094      	lsls	r4, r2, #2
 8005604:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005608:	008b      	lsls	r3, r1, #2
 800560a:	461a      	mov	r2, r3
 800560c:	4623      	mov	r3, r4
 800560e:	4628      	mov	r0, r5
 8005610:	4631      	mov	r1, r6
 8005612:	f7fa fe35 	bl	8000280 <__aeabi_uldivmod>
 8005616:	4603      	mov	r3, r0
 8005618:	460c      	mov	r4, r1
 800561a:	461a      	mov	r2, r3
 800561c:	4bb8      	ldr	r3, [pc, #736]	; (8005900 <UART_SetConfig+0x6f4>)
 800561e:	fba3 2302 	umull	r2, r3, r3, r2
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	469b      	mov	fp, r3
 800562c:	f04f 0c00 	mov.w	ip, #0
 8005630:	46d9      	mov	r9, fp
 8005632:	46e2      	mov	sl, ip
 8005634:	eb19 0309 	adds.w	r3, r9, r9
 8005638:	eb4a 040a 	adc.w	r4, sl, sl
 800563c:	4699      	mov	r9, r3
 800563e:	46a2      	mov	sl, r4
 8005640:	eb19 090b 	adds.w	r9, r9, fp
 8005644:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005648:	f04f 0100 	mov.w	r1, #0
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005654:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005658:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800565c:	4689      	mov	r9, r1
 800565e:	4692      	mov	sl, r2
 8005660:	eb1b 0509 	adds.w	r5, fp, r9
 8005664:	eb4c 060a 	adc.w	r6, ip, sl
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	4619      	mov	r1, r3
 800566e:	f04f 0200 	mov.w	r2, #0
 8005672:	f04f 0300 	mov.w	r3, #0
 8005676:	f04f 0400 	mov.w	r4, #0
 800567a:	0094      	lsls	r4, r2, #2
 800567c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005680:	008b      	lsls	r3, r1, #2
 8005682:	461a      	mov	r2, r3
 8005684:	4623      	mov	r3, r4
 8005686:	4628      	mov	r0, r5
 8005688:	4631      	mov	r1, r6
 800568a:	f7fa fdf9 	bl	8000280 <__aeabi_uldivmod>
 800568e:	4603      	mov	r3, r0
 8005690:	460c      	mov	r4, r1
 8005692:	461a      	mov	r2, r3
 8005694:	4b9a      	ldr	r3, [pc, #616]	; (8005900 <UART_SetConfig+0x6f4>)
 8005696:	fba3 1302 	umull	r1, r3, r3, r2
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	2164      	movs	r1, #100	; 0x64
 800569e:	fb01 f303 	mul.w	r3, r1, r3
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	3332      	adds	r3, #50	; 0x32
 80056a8:	4a95      	ldr	r2, [pc, #596]	; (8005900 <UART_SetConfig+0x6f4>)
 80056aa:	fba2 2303 	umull	r2, r3, r2, r3
 80056ae:	095b      	lsrs	r3, r3, #5
 80056b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056b4:	4498      	add	r8, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	469b      	mov	fp, r3
 80056ba:	f04f 0c00 	mov.w	ip, #0
 80056be:	46d9      	mov	r9, fp
 80056c0:	46e2      	mov	sl, ip
 80056c2:	eb19 0309 	adds.w	r3, r9, r9
 80056c6:	eb4a 040a 	adc.w	r4, sl, sl
 80056ca:	4699      	mov	r9, r3
 80056cc:	46a2      	mov	sl, r4
 80056ce:	eb19 090b 	adds.w	r9, r9, fp
 80056d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80056d6:	f04f 0100 	mov.w	r1, #0
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056ea:	4689      	mov	r9, r1
 80056ec:	4692      	mov	sl, r2
 80056ee:	eb1b 0509 	adds.w	r5, fp, r9
 80056f2:	eb4c 060a 	adc.w	r6, ip, sl
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	4619      	mov	r1, r3
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	f04f 0400 	mov.w	r4, #0
 8005708:	0094      	lsls	r4, r2, #2
 800570a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800570e:	008b      	lsls	r3, r1, #2
 8005710:	461a      	mov	r2, r3
 8005712:	4623      	mov	r3, r4
 8005714:	4628      	mov	r0, r5
 8005716:	4631      	mov	r1, r6
 8005718:	f7fa fdb2 	bl	8000280 <__aeabi_uldivmod>
 800571c:	4603      	mov	r3, r0
 800571e:	460c      	mov	r4, r1
 8005720:	461a      	mov	r2, r3
 8005722:	4b77      	ldr	r3, [pc, #476]	; (8005900 <UART_SetConfig+0x6f4>)
 8005724:	fba3 1302 	umull	r1, r3, r3, r2
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	2164      	movs	r1, #100	; 0x64
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	3332      	adds	r3, #50	; 0x32
 8005736:	4a72      	ldr	r2, [pc, #456]	; (8005900 <UART_SetConfig+0x6f4>)
 8005738:	fba2 2303 	umull	r2, r3, r2, r3
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	f003 020f 	and.w	r2, r3, #15
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4442      	add	r2, r8
 8005748:	609a      	str	r2, [r3, #8]
 800574a:	e0d0      	b.n	80058ee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800574c:	f7fe fcbc 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 8005750:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	469a      	mov	sl, r3
 8005756:	f04f 0b00 	mov.w	fp, #0
 800575a:	46d0      	mov	r8, sl
 800575c:	46d9      	mov	r9, fp
 800575e:	eb18 0308 	adds.w	r3, r8, r8
 8005762:	eb49 0409 	adc.w	r4, r9, r9
 8005766:	4698      	mov	r8, r3
 8005768:	46a1      	mov	r9, r4
 800576a:	eb18 080a 	adds.w	r8, r8, sl
 800576e:	eb49 090b 	adc.w	r9, r9, fp
 8005772:	f04f 0100 	mov.w	r1, #0
 8005776:	f04f 0200 	mov.w	r2, #0
 800577a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800577e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005782:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005786:	4688      	mov	r8, r1
 8005788:	4691      	mov	r9, r2
 800578a:	eb1a 0508 	adds.w	r5, sl, r8
 800578e:	eb4b 0609 	adc.w	r6, fp, r9
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	4619      	mov	r1, r3
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	f04f 0400 	mov.w	r4, #0
 80057a4:	0094      	lsls	r4, r2, #2
 80057a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057aa:	008b      	lsls	r3, r1, #2
 80057ac:	461a      	mov	r2, r3
 80057ae:	4623      	mov	r3, r4
 80057b0:	4628      	mov	r0, r5
 80057b2:	4631      	mov	r1, r6
 80057b4:	f7fa fd64 	bl	8000280 <__aeabi_uldivmod>
 80057b8:	4603      	mov	r3, r0
 80057ba:	460c      	mov	r4, r1
 80057bc:	461a      	mov	r2, r3
 80057be:	4b50      	ldr	r3, [pc, #320]	; (8005900 <UART_SetConfig+0x6f4>)
 80057c0:	fba3 2302 	umull	r2, r3, r3, r2
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	469b      	mov	fp, r3
 80057ce:	f04f 0c00 	mov.w	ip, #0
 80057d2:	46d9      	mov	r9, fp
 80057d4:	46e2      	mov	sl, ip
 80057d6:	eb19 0309 	adds.w	r3, r9, r9
 80057da:	eb4a 040a 	adc.w	r4, sl, sl
 80057de:	4699      	mov	r9, r3
 80057e0:	46a2      	mov	sl, r4
 80057e2:	eb19 090b 	adds.w	r9, r9, fp
 80057e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80057ea:	f04f 0100 	mov.w	r1, #0
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057fe:	4689      	mov	r9, r1
 8005800:	4692      	mov	sl, r2
 8005802:	eb1b 0509 	adds.w	r5, fp, r9
 8005806:	eb4c 060a 	adc.w	r6, ip, sl
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	4619      	mov	r1, r3
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	f04f 0300 	mov.w	r3, #0
 8005818:	f04f 0400 	mov.w	r4, #0
 800581c:	0094      	lsls	r4, r2, #2
 800581e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005822:	008b      	lsls	r3, r1, #2
 8005824:	461a      	mov	r2, r3
 8005826:	4623      	mov	r3, r4
 8005828:	4628      	mov	r0, r5
 800582a:	4631      	mov	r1, r6
 800582c:	f7fa fd28 	bl	8000280 <__aeabi_uldivmod>
 8005830:	4603      	mov	r3, r0
 8005832:	460c      	mov	r4, r1
 8005834:	461a      	mov	r2, r3
 8005836:	4b32      	ldr	r3, [pc, #200]	; (8005900 <UART_SetConfig+0x6f4>)
 8005838:	fba3 1302 	umull	r1, r3, r3, r2
 800583c:	095b      	lsrs	r3, r3, #5
 800583e:	2164      	movs	r1, #100	; 0x64
 8005840:	fb01 f303 	mul.w	r3, r1, r3
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	3332      	adds	r3, #50	; 0x32
 800584a:	4a2d      	ldr	r2, [pc, #180]	; (8005900 <UART_SetConfig+0x6f4>)
 800584c:	fba2 2303 	umull	r2, r3, r2, r3
 8005850:	095b      	lsrs	r3, r3, #5
 8005852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005856:	4498      	add	r8, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	469b      	mov	fp, r3
 800585c:	f04f 0c00 	mov.w	ip, #0
 8005860:	46d9      	mov	r9, fp
 8005862:	46e2      	mov	sl, ip
 8005864:	eb19 0309 	adds.w	r3, r9, r9
 8005868:	eb4a 040a 	adc.w	r4, sl, sl
 800586c:	4699      	mov	r9, r3
 800586e:	46a2      	mov	sl, r4
 8005870:	eb19 090b 	adds.w	r9, r9, fp
 8005874:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005878:	f04f 0100 	mov.w	r1, #0
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005884:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005888:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800588c:	4689      	mov	r9, r1
 800588e:	4692      	mov	sl, r2
 8005890:	eb1b 0509 	adds.w	r5, fp, r9
 8005894:	eb4c 060a 	adc.w	r6, ip, sl
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	4619      	mov	r1, r3
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	f04f 0400 	mov.w	r4, #0
 80058aa:	0094      	lsls	r4, r2, #2
 80058ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058b0:	008b      	lsls	r3, r1, #2
 80058b2:	461a      	mov	r2, r3
 80058b4:	4623      	mov	r3, r4
 80058b6:	4628      	mov	r0, r5
 80058b8:	4631      	mov	r1, r6
 80058ba:	f7fa fce1 	bl	8000280 <__aeabi_uldivmod>
 80058be:	4603      	mov	r3, r0
 80058c0:	460c      	mov	r4, r1
 80058c2:	461a      	mov	r2, r3
 80058c4:	4b0e      	ldr	r3, [pc, #56]	; (8005900 <UART_SetConfig+0x6f4>)
 80058c6:	fba3 1302 	umull	r1, r3, r3, r2
 80058ca:	095b      	lsrs	r3, r3, #5
 80058cc:	2164      	movs	r1, #100	; 0x64
 80058ce:	fb01 f303 	mul.w	r3, r1, r3
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	3332      	adds	r3, #50	; 0x32
 80058d8:	4a09      	ldr	r2, [pc, #36]	; (8005900 <UART_SetConfig+0x6f4>)
 80058da:	fba2 2303 	umull	r2, r3, r2, r3
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	f003 020f 	and.w	r2, r3, #15
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4442      	add	r2, r8
 80058ea:	609a      	str	r2, [r3, #8]
}
 80058ec:	e7ff      	b.n	80058ee <UART_SetConfig+0x6e2>
 80058ee:	bf00      	nop
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058f8:	40011000 	.word	0x40011000
 80058fc:	40011400 	.word	0x40011400
 8005900:	51eb851f 	.word	0x51eb851f

08005904 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005904:	b084      	sub	sp, #16
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	f107 001c 	add.w	r0, r7, #28
 8005912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	2b01      	cmp	r3, #1
 800591a:	d122      	bne.n	8005962 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005946:	2b01      	cmp	r3, #1
 8005948:	d105      	bne.n	8005956 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f94a 	bl	8005bf0 <USB_CoreReset>
 800595c:	4603      	mov	r3, r0
 800595e:	73fb      	strb	r3, [r7, #15]
 8005960:	e01a      	b.n	8005998 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f93e 	bl	8005bf0 <USB_CoreReset>
 8005974:	4603      	mov	r3, r0
 8005976:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	639a      	str	r2, [r3, #56]	; 0x38
 800598a:	e005      	b.n	8005998 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005990:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	2b01      	cmp	r3, #1
 800599c:	d10b      	bne.n	80059b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f043 0206 	orr.w	r2, r3, #6
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f043 0220 	orr.w	r2, r3, #32
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059c2:	b004      	add	sp, #16
 80059c4:	4770      	bx	lr

080059c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f043 0201 	orr.w	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f023 0201 	bic.w	r2, r3, #1
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b082      	sub	sp, #8
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	460b      	mov	r3, r1
 8005a14:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a22:	78fb      	ldrb	r3, [r7, #3]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d106      	bne.n	8005a36 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	60da      	str	r2, [r3, #12]
 8005a34:	e00b      	b.n	8005a4e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a36:	78fb      	ldrb	r3, [r7, #3]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d106      	bne.n	8005a4a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	60da      	str	r2, [r3, #12]
 8005a48:	e001      	b.n	8005a4e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e003      	b.n	8005a56 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005a4e:	2032      	movs	r0, #50	; 0x32
 8005a50:	f7fa fe08 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	019b      	lsls	r3, r3, #6
 8005a72:	f043 0220 	orr.w	r2, r3, #32
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4a09      	ldr	r2, [pc, #36]	; (8005aa8 <USB_FlushTxFifo+0x48>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d901      	bls.n	8005a8c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e006      	b.n	8005a9a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	f003 0320 	and.w	r3, r3, #32
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	d0f0      	beq.n	8005a7a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	00030d40 	.word	0x00030d40

08005aac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2210      	movs	r2, #16
 8005abc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4a09      	ldr	r2, [pc, #36]	; (8005aec <USB_FlushRxFifo+0x40>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d901      	bls.n	8005ad0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e006      	b.n	8005ade <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	2b10      	cmp	r3, #16
 8005ada:	d0f0      	beq.n	8005abe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	00030d40 	.word	0x00030d40

08005af0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b089      	sub	sp, #36	; 0x24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	4611      	mov	r1, r2
 8005afc:	461a      	mov	r2, r3
 8005afe:	460b      	mov	r3, r1
 8005b00:	71fb      	strb	r3, [r7, #7]
 8005b02:	4613      	mov	r3, r2
 8005b04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005b0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d11a      	bne.n	8005b4c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b16:	88bb      	ldrh	r3, [r7, #4]
 8005b18:	3303      	adds	r3, #3
 8005b1a:	089b      	lsrs	r3, r3, #2
 8005b1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	e00f      	b.n	8005b44 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	031a      	lsls	r2, r3, #12
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b30:	461a      	mov	r2, r3
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	3301      	adds	r3, #1
 8005b42:	61bb      	str	r3, [r7, #24]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d3eb      	bcc.n	8005b24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3724      	adds	r7, #36	; 0x24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b089      	sub	sp, #36	; 0x24
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	4613      	mov	r3, r2
 8005b66:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005b70:	88fb      	ldrh	r3, [r7, #6]
 8005b72:	3303      	adds	r3, #3
 8005b74:	089b      	lsrs	r3, r3, #2
 8005b76:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	61bb      	str	r3, [r7, #24]
 8005b7c:	e00b      	b.n	8005b96 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	3301      	adds	r3, #1
 8005b94:	61bb      	str	r3, [r7, #24]
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d3ef      	bcc.n	8005b7e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005b9e:	69fb      	ldr	r3, [r7, #28]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3724      	adds	r7, #36	; 0x24
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f003 0301 	and.w	r3, r3, #1
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
	...

08005bf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	4a13      	ldr	r2, [pc, #76]	; (8005c54 <USB_CoreReset+0x64>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d901      	bls.n	8005c0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e01b      	b.n	8005c46 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	daf2      	bge.n	8005bfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f043 0201 	orr.w	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4a09      	ldr	r2, [pc, #36]	; (8005c54 <USB_CoreReset+0x64>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d901      	bls.n	8005c38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e006      	b.n	8005c46 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d0f0      	beq.n	8005c26 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	00030d40 	.word	0x00030d40

08005c58 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c58:	b084      	sub	sp, #16
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	f107 001c 	add.w	r0, r7, #28
 8005c66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c74:	461a      	mov	r2, r3
 8005c76:	2300      	movs	r3, #0
 8005c78:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d018      	beq.n	8005cdc <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	d10a      	bne.n	8005cc6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cbe:	f043 0304 	orr.w	r3, r3, #4
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	e014      	b.n	8005cf0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cd4:	f023 0304 	bic.w	r3, r3, #4
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	e009      	b.n	8005cf0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cea:	f023 0304 	bic.w	r3, r3, #4
 8005cee:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005cf0:	2110      	movs	r1, #16
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff feb4 	bl	8005a60 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff fed7 	bl	8005aac <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	e015      	b.n	8005d30 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d10:	461a      	mov	r2, r3
 8005d12:	f04f 33ff 	mov.w	r3, #4294967295
 8005d16:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d24:	461a      	mov	r2, r3
 8005d26:	2300      	movs	r3, #0
 8005d28:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d3e5      	bcc.n	8005d04 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005d38:	2101      	movs	r1, #1
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f8ac 	bl	8005e98 <USB_DriveVbus>

  HAL_Delay(200U);
 8005d40:	20c8      	movs	r0, #200	; 0xc8
 8005d42:	f7fa fc8f 	bl	8000664 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d52:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00b      	beq.n	8005d78 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d66:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a14      	ldr	r2, [pc, #80]	; (8005dbc <USB_HostInit+0x164>)
 8005d6c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a13      	ldr	r2, [pc, #76]	; (8005dc0 <USB_HostInit+0x168>)
 8005d72:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005d76:	e009      	b.n	8005d8c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2280      	movs	r2, #128	; 0x80
 8005d7c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a10      	ldr	r2, [pc, #64]	; (8005dc4 <USB_HostInit+0x16c>)
 8005d82:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a10      	ldr	r2, [pc, #64]	; (8005dc8 <USB_HostInit+0x170>)
 8005d88:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d105      	bne.n	8005d9e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	f043 0210 	orr.w	r2, r3, #16
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <USB_HostInit+0x174>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005db6:	b004      	add	sp, #16
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	01000200 	.word	0x01000200
 8005dc0:	00e00300 	.word	0x00e00300
 8005dc4:	00600080 	.word	0x00600080
 8005dc8:	004000e0 	.word	0x004000e0
 8005dcc:	a3200008 	.word	0xa3200008

08005dd0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005dee:	f023 0303 	bic.w	r3, r3, #3
 8005df2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	78fb      	ldrb	r3, [r7, #3]
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	68f9      	ldr	r1, [r7, #12]
 8005e04:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e0c:	78fb      	ldrb	r3, [r7, #3]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d107      	bne.n	8005e22 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e18:	461a      	mov	r2, r3
 8005e1a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e1e:	6053      	str	r3, [r2, #4]
 8005e20:	e009      	b.n	8005e36 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005e22:	78fb      	ldrb	r3, [r7, #3]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d106      	bne.n	8005e36 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f241 7370 	movw	r3, #6000	; 0x1770
 8005e34:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e64:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e72:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005e74:	2064      	movs	r0, #100	; 0x64
 8005e76:	f7fa fbf5 	bl	8000664 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e86:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005e88:	200a      	movs	r0, #10
 8005e8a:	f7fa fbeb 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ebc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d109      	bne.n	8005edc <USB_DriveVbus+0x44>
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d106      	bne.n	8005edc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ed6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005eda:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee6:	d109      	bne.n	8005efc <USB_DriveVbus+0x64>
 8005ee8:	78fb      	ldrb	r3, [r7, #3]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ef6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005efa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b085      	sub	sp, #20
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	0c5b      	lsrs	r3, r3, #17
 8005f28:	f003 0303 	and.w	r3, r3, #3
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	b29b      	uxth	r3, r3
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
	...

08005f5c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	4608      	mov	r0, r1
 8005f66:	4611      	mov	r1, r2
 8005f68:	461a      	mov	r2, r3
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	70fb      	strb	r3, [r7, #3]
 8005f6e:	460b      	mov	r3, r1
 8005f70:	70bb      	strb	r3, [r7, #2]
 8005f72:	4613      	mov	r3, r2
 8005f74:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005f7e:	78fb      	ldrb	r3, [r7, #3]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f90:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005f92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d87e      	bhi.n	8006098 <USB_HC_Init+0x13c>
 8005f9a:	a201      	add	r2, pc, #4	; (adr r2, 8005fa0 <USB_HC_Init+0x44>)
 8005f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa0:	08005fb1 	.word	0x08005fb1
 8005fa4:	0800605b 	.word	0x0800605b
 8005fa8:	08005fb1 	.word	0x08005fb1
 8005fac:	0800601d 	.word	0x0800601d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f240 439d 	movw	r3, #1181	; 0x49d
 8005fc2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005fc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	da10      	bge.n	8005fee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	78fa      	ldrb	r2, [r7, #3]
 8005fdc:	0151      	lsls	r1, r2, #5
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	440a      	add	r2, r1
 8005fe2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fea:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005fec:	e057      	b.n	800609e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d051      	beq.n	800609e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005ffa:	78fb      	ldrb	r3, [r7, #3]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	4413      	add	r3, r2
 8006002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	78fa      	ldrb	r2, [r7, #3]
 800600a:	0151      	lsls	r1, r2, #5
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	440a      	add	r2, r1
 8006010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006014:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006018:	60d3      	str	r3, [r2, #12]
      break;
 800601a:	e040      	b.n	800609e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4413      	add	r3, r2
 8006024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006028:	461a      	mov	r2, r3
 800602a:	f240 639d 	movw	r3, #1693	; 0x69d
 800602e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006030:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006034:	2b00      	cmp	r3, #0
 8006036:	da34      	bge.n	80060a2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4413      	add	r3, r2
 8006040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	78fa      	ldrb	r2, [r7, #3]
 8006048:	0151      	lsls	r1, r2, #5
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	440a      	add	r2, r1
 800604e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006056:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006058:	e023      	b.n	80060a2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800605a:	78fb      	ldrb	r3, [r7, #3]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4413      	add	r3, r2
 8006062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006066:	461a      	mov	r2, r3
 8006068:	f240 2325 	movw	r3, #549	; 0x225
 800606c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800606e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006072:	2b00      	cmp	r3, #0
 8006074:	da17      	bge.n	80060a6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	4413      	add	r3, r2
 800607e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	78fa      	ldrb	r2, [r7, #3]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	440a      	add	r2, r1
 800608c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006090:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006094:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006096:	e006      	b.n	80060a6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	75fb      	strb	r3, [r7, #23]
      break;
 800609c:	e004      	b.n	80060a8 <USB_HC_Init+0x14c>
      break;
 800609e:	bf00      	nop
 80060a0:	e002      	b.n	80060a8 <USB_HC_Init+0x14c>
      break;
 80060a2:	bf00      	nop
 80060a4:	e000      	b.n	80060a8 <USB_HC_Init+0x14c>
      break;
 80060a6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ae:	699a      	ldr	r2, [r3, #24]
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	f003 030f 	and.w	r3, r3, #15
 80060b6:	2101      	movs	r1, #1
 80060b8:	fa01 f303 	lsl.w	r3, r1, r3
 80060bc:	68b9      	ldr	r1, [r7, #8]
 80060be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80060c2:	4313      	orrs	r3, r2
 80060c4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80060d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	da03      	bge.n	80060e2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80060da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060de:	613b      	str	r3, [r7, #16]
 80060e0:	e001      	b.n	80060e6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80060e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d103      	bne.n	80060f6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80060ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	e001      	b.n	80060fa <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060fa:	787b      	ldrb	r3, [r7, #1]
 80060fc:	059b      	lsls	r3, r3, #22
 80060fe:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006102:	78bb      	ldrb	r3, [r7, #2]
 8006104:	02db      	lsls	r3, r3, #11
 8006106:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800610a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800610c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006110:	049b      	lsls	r3, r3, #18
 8006112:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006116:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006118:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800611a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800611e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	0159      	lsls	r1, r3, #5
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	440b      	add	r3, r1
 800612c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006130:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006136:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006138:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800613c:	2b03      	cmp	r3, #3
 800613e:	d10f      	bne.n	8006160 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4413      	add	r3, r2
 8006148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	78fa      	ldrb	r2, [r7, #3]
 8006150:	0151      	lsls	r1, r2, #5
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	440a      	add	r2, r1
 8006156:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800615a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800615e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006160:	7dfb      	ldrb	r3, [r7, #23]
}
 8006162:	4618      	mov	r0, r3
 8006164:	371c      	adds	r7, #28
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop

08006170 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08c      	sub	sp, #48	; 0x30
 8006174:	af02      	add	r7, sp, #8
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	4613      	mov	r3, r2
 800617c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	785b      	ldrb	r3, [r3, #1]
 8006186:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800618c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006196:	2b00      	cmp	r3, #0
 8006198:	d028      	beq.n	80061ec <USB_HC_StartXfer+0x7c>
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	791b      	ldrb	r3, [r3, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d124      	bne.n	80061ec <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80061a2:	79fb      	ldrb	r3, [r7, #7]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10b      	bne.n	80061c0 <USB_HC_StartXfer+0x50>
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	795b      	ldrb	r3, [r3, #5]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d107      	bne.n	80061c0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	785b      	ldrb	r3, [r3, #1]
 80061b4:	4619      	mov	r1, r3
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 fa2e 	bl	8006618 <USB_DoPing>
      return HAL_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	e112      	b.n	80063e6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d112      	bne.n	80061ec <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	0151      	lsls	r1, r2, #5
 80061d8:	6a3a      	ldr	r2, [r7, #32]
 80061da:	440a      	add	r2, r1
 80061dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061e0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80061e4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2200      	movs	r2, #0
 80061ea:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d018      	beq.n	8006226 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	8912      	ldrh	r2, [r2, #8]
 80061fc:	4413      	add	r3, r2
 80061fe:	3b01      	subs	r3, #1
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	8912      	ldrh	r2, [r2, #8]
 8006204:	fbb3 f3f2 	udiv	r3, r3, r2
 8006208:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800620a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800620c:	8b7b      	ldrh	r3, [r7, #26]
 800620e:	429a      	cmp	r2, r3
 8006210:	d90b      	bls.n	800622a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006212:	8b7b      	ldrh	r3, [r7, #26]
 8006214:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006216:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	8912      	ldrh	r2, [r2, #8]
 800621c:	fb02 f203 	mul.w	r2, r2, r3
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	611a      	str	r2, [r3, #16]
 8006224:	e001      	b.n	800622a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006226:	2301      	movs	r3, #1
 8006228:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	78db      	ldrb	r3, [r3, #3]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d006      	beq.n	8006240 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006232:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	8912      	ldrh	r2, [r2, #8]
 8006238:	fb02 f203 	mul.w	r2, r2, r3
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006248:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800624a:	04d9      	lsls	r1, r3, #19
 800624c:	4b68      	ldr	r3, [pc, #416]	; (80063f0 <USB_HC_StartXfer+0x280>)
 800624e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006250:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	7a9b      	ldrb	r3, [r3, #10]
 8006256:	075b      	lsls	r3, r3, #29
 8006258:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800625c:	69f9      	ldr	r1, [r7, #28]
 800625e:	0148      	lsls	r0, r1, #5
 8006260:	6a39      	ldr	r1, [r7, #32]
 8006262:	4401      	add	r1, r0
 8006264:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006268:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800626a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d009      	beq.n	8006286 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	68d9      	ldr	r1, [r3, #12]
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	4413      	add	r3, r2
 800627e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006282:	460a      	mov	r2, r1
 8006284:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	bf0c      	ite	eq
 8006296:	2301      	moveq	r3, #1
 8006298:	2300      	movne	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	69fa      	ldr	r2, [r7, #28]
 80062ae:	0151      	lsls	r1, r2, #5
 80062b0:	6a3a      	ldr	r2, [r7, #32]
 80062b2:	440a      	add	r2, r1
 80062b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062bc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	7e7b      	ldrb	r3, [r7, #25]
 80062ce:	075b      	lsls	r3, r3, #29
 80062d0:	69f9      	ldr	r1, [r7, #28]
 80062d2:	0148      	lsls	r0, r1, #5
 80062d4:	6a39      	ldr	r1, [r7, #32]
 80062d6:	4401      	add	r1, r0
 80062d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80062dc:	4313      	orrs	r3, r2
 80062de:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a41      	ldr	r2, [pc, #260]	; (80063f4 <USB_HC_StartXfer+0x284>)
 80062f0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062f2:	4b40      	ldr	r3, [pc, #256]	; (80063f4 <USB_HC_StartXfer+0x284>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062fa:	4a3e      	ldr	r2, [pc, #248]	; (80063f4 <USB_HC_StartXfer+0x284>)
 80062fc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	78db      	ldrb	r3, [r3, #3]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d006      	beq.n	8006314 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006306:	4b3b      	ldr	r3, [pc, #236]	; (80063f4 <USB_HC_StartXfer+0x284>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800630e:	4a39      	ldr	r2, [pc, #228]	; (80063f4 <USB_HC_StartXfer+0x284>)
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	e005      	b.n	8006320 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006314:	4b37      	ldr	r3, [pc, #220]	; (80063f4 <USB_HC_StartXfer+0x284>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800631c:	4a35      	ldr	r2, [pc, #212]	; (80063f4 <USB_HC_StartXfer+0x284>)
 800631e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006320:	4b34      	ldr	r3, [pc, #208]	; (80063f4 <USB_HC_StartXfer+0x284>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006328:	4a32      	ldr	r2, [pc, #200]	; (80063f4 <USB_HC_StartXfer+0x284>)
 800632a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	4413      	add	r3, r2
 8006334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006338:	461a      	mov	r2, r3
 800633a:	4b2e      	ldr	r3, [pc, #184]	; (80063f4 <USB_HC_StartXfer+0x284>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d14e      	bne.n	80063e4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	78db      	ldrb	r3, [r3, #3]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d14a      	bne.n	80063e4 <USB_HC_StartXfer+0x274>
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d046      	beq.n	80063e4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	79db      	ldrb	r3, [r3, #7]
 800635a:	2b03      	cmp	r3, #3
 800635c:	d830      	bhi.n	80063c0 <USB_HC_StartXfer+0x250>
 800635e:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <USB_HC_StartXfer+0x1f4>)
 8006360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006364:	08006375 	.word	0x08006375
 8006368:	08006399 	.word	0x08006399
 800636c:	08006375 	.word	0x08006375
 8006370:	08006399 	.word	0x08006399
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	3303      	adds	r3, #3
 800637a:	089b      	lsrs	r3, r3, #2
 800637c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800637e:	8afa      	ldrh	r2, [r7, #22]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006384:	b29b      	uxth	r3, r3
 8006386:	429a      	cmp	r2, r3
 8006388:	d91c      	bls.n	80063c4 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	f043 0220 	orr.w	r2, r3, #32
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	619a      	str	r2, [r3, #24]
          }
          break;
 8006396:	e015      	b.n	80063c4 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	3303      	adds	r3, #3
 800639e:	089b      	lsrs	r3, r3, #2
 80063a0:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80063a2:	8afa      	ldrh	r2, [r7, #22]
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d90a      	bls.n	80063c8 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	619a      	str	r2, [r3, #24]
          }
          break;
 80063be:	e003      	b.n	80063c8 <USB_HC_StartXfer+0x258>

        default:
          break;
 80063c0:	bf00      	nop
 80063c2:	e002      	b.n	80063ca <USB_HC_StartXfer+0x25a>
          break;
 80063c4:	bf00      	nop
 80063c6:	e000      	b.n	80063ca <USB_HC_StartXfer+0x25a>
          break;
 80063c8:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	68d9      	ldr	r1, [r3, #12]
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	785a      	ldrb	r2, [r3, #1]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	b298      	uxth	r0, r3
 80063d8:	2300      	movs	r3, #0
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	4603      	mov	r3, r0
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7ff fb86 	bl	8005af0 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3728      	adds	r7, #40	; 0x28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	1ff80000 	.word	0x1ff80000
 80063f4:	200000ac 	.word	0x200000ac

080063f8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	b29b      	uxth	r3, r3
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800641a:	b480      	push	{r7}
 800641c:	b087      	sub	sp, #28
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
 8006422:	460b      	mov	r3, r1
 8006424:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800642a:	78fb      	ldrb	r3, [r7, #3]
 800642c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	4413      	add	r3, r2
 800643a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	0c9b      	lsrs	r3, r3, #18
 8006442:	f003 0303 	and.w	r3, r3, #3
 8006446:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <USB_HC_Halt+0x3a>
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2b02      	cmp	r3, #2
 8006452:	d16c      	bne.n	800652e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	4413      	add	r3, r2
 800645c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	0151      	lsls	r1, r2, #5
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	440a      	add	r2, r1
 800646a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800646e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006472:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006478:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d143      	bne.n	8006508 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	4413      	add	r3, r2
 8006488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	0151      	lsls	r1, r2, #5
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	440a      	add	r2, r1
 8006496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800649a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800649e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	0151      	lsls	r1, r2, #5
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	440a      	add	r2, r1
 80064d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064de:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	3301      	adds	r3, #1
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064ec:	d81d      	bhi.n	800652a <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006500:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006504:	d0ec      	beq.n	80064e0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006506:	e080      	b.n	800660a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	4413      	add	r3, r2
 8006510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	440a      	add	r2, r1
 800651e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006522:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006526:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006528:	e06f      	b.n	800660a <USB_HC_Halt+0x1f0>
          break;
 800652a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800652c:	e06d      	b.n	800660a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	4413      	add	r3, r2
 8006536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	0151      	lsls	r1, r2, #5
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	440a      	add	r2, r1
 8006544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006548:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800654c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d143      	bne.n	80065e6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	4413      	add	r3, r2
 8006566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	0151      	lsls	r1, r2, #5
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	440a      	add	r2, r1
 8006574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006578:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800657c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	4413      	add	r3, r2
 8006586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	440a      	add	r2, r1
 8006594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800659c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	0151      	lsls	r1, r2, #5
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	440a      	add	r2, r1
 80065b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065bc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	3301      	adds	r3, #1
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065ca:	d81d      	bhi.n	8006608 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065e2:	d0ec      	beq.n	80065be <USB_HC_Halt+0x1a4>
 80065e4:	e011      	b.n	800660a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	0151      	lsls	r1, r2, #5
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	440a      	add	r2, r1
 80065fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006600:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	e000      	b.n	800660a <USB_HC_Halt+0x1f0>
          break;
 8006608:	bf00      	nop
    }
  }

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	371c      	adds	r7, #28
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006618:	b480      	push	{r7}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006628:	78fb      	ldrb	r3, [r7, #3]
 800662a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800662c:	2301      	movs	r3, #1
 800662e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	04da      	lsls	r2, r3, #19
 8006634:	4b15      	ldr	r3, [pc, #84]	; (800668c <USB_DoPing+0x74>)
 8006636:	4013      	ands	r3, r2
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	0151      	lsls	r1, r2, #5
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	440a      	add	r2, r1
 8006640:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006648:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	4413      	add	r3, r2
 8006652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006660:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006668:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	4413      	add	r3, r2
 8006672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006676:	461a      	mov	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	371c      	adds	r7, #28
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	1ff80000 	.word	0x1ff80000

08006690 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7ff f9a1 	bl	80059e8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80066a6:	2110      	movs	r1, #16
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff f9d9 	bl	8005a60 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7ff f9fc 	bl	8005aac <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80066b4:	2300      	movs	r3, #0
 80066b6:	613b      	str	r3, [r7, #16]
 80066b8:	e01f      	b.n	80066fa <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066e0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ee:	461a      	mov	r2, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	3301      	adds	r3, #1
 80066f8:	613b      	str	r3, [r7, #16]
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	2b0f      	cmp	r3, #15
 80066fe:	d9dc      	bls.n	80066ba <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006700:	2300      	movs	r3, #0
 8006702:	613b      	str	r3, [r7, #16]
 8006704:	e034      	b.n	8006770 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800671c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006724:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800672c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4413      	add	r3, r2
 8006736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673a:	461a      	mov	r2, r3
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	3301      	adds	r3, #1
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800674c:	d80c      	bhi.n	8006768 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4413      	add	r3, r2
 8006756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006764:	d0ec      	beq.n	8006740 <USB_StopHost+0xb0>
 8006766:	e000      	b.n	800676a <USB_StopHost+0xda>
        break;
 8006768:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	3301      	adds	r3, #1
 800676e:	613b      	str	r3, [r7, #16]
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	2b0f      	cmp	r3, #15
 8006774:	d9c7      	bls.n	8006706 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800677c:	461a      	mov	r2, r3
 800677e:	f04f 33ff 	mov.w	r3, #4294967295
 8006782:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f04f 32ff 	mov.w	r2, #4294967295
 800678a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7ff f91a 	bl	80059c6 <USB_EnableGlobalInt>

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800679c:	b590      	push	{r4, r7, lr}
 800679e:	b089      	sub	sp, #36	; 0x24
 80067a0:	af04      	add	r7, sp, #16
 80067a2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80067a4:	2302      	movs	r3, #2
 80067a6:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80067a8:	2301      	movs	r3, #1
 80067aa:	2202      	movs	r2, #2
 80067ac:	2102      	movs	r1, #2
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fc3a 	bl	8007028 <USBH_FindInterface>
 80067b4:	4603      	mov	r3, r0
 80067b6:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80067b8:	7bbb      	ldrb	r3, [r7, #14]
 80067ba:	2bff      	cmp	r3, #255	; 0xff
 80067bc:	f000 812a 	beq.w	8006a14 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80067c0:	7bbb      	ldrb	r3, [r7, #14]
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fc13 	bl	8006ff0 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80067d0:	2050      	movs	r0, #80	; 0x50
 80067d2:	f002 ff6f 	bl	80096b4 <malloc>
 80067d6:	4603      	mov	r3, r0
 80067d8:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	211a      	movs	r1, #26
 80067ea:	fb01 f303 	mul.w	r3, r1, r3
 80067ee:	4413      	add	r3, r2
 80067f0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	b25b      	sxtb	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	da15      	bge.n	8006828 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067fc:	7bbb      	ldrb	r3, [r7, #14]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	211a      	movs	r1, #26
 8006802:	fb01 f303 	mul.w	r3, r1, r3
 8006806:	4413      	add	r3, r2
 8006808:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800680c:	781a      	ldrb	r2, [r3, #0]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006812:	7bbb      	ldrb	r3, [r7, #14]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	211a      	movs	r1, #26
 8006818:	fb01 f303 	mul.w	r3, r1, r3
 800681c:	4413      	add	r3, r2
 800681e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006822:	881a      	ldrh	r2, [r3, #0]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	785b      	ldrb	r3, [r3, #1]
 800682c:	4619      	mov	r1, r3
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f001 fd21 	bl	8008276 <USBH_AllocPipe>
 8006834:	4603      	mov	r3, r0
 8006836:	461a      	mov	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	7819      	ldrb	r1, [r3, #0]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	7858      	ldrb	r0, [r3, #1]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	8952      	ldrh	r2, [r2, #10]
 8006854:	9202      	str	r2, [sp, #8]
 8006856:	2203      	movs	r2, #3
 8006858:	9201      	str	r2, [sp, #4]
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	4623      	mov	r3, r4
 800685e:	4602      	mov	r2, r0
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f001 fcd9 	bl	8008218 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2200      	movs	r2, #0
 800686c:	4619      	mov	r1, r3
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f002 fe46 	bl	8009500 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006874:	2300      	movs	r3, #0
 8006876:	2200      	movs	r2, #0
 8006878:	210a      	movs	r1, #10
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fbd4 	bl	8007028 <USBH_FindInterface>
 8006880:	4603      	mov	r3, r0
 8006882:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006884:	7bbb      	ldrb	r3, [r7, #14]
 8006886:	2bff      	cmp	r3, #255	; 0xff
 8006888:	f000 80c4 	beq.w	8006a14 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800688c:	7bbb      	ldrb	r3, [r7, #14]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	211a      	movs	r1, #26
 8006892:	fb01 f303 	mul.w	r3, r1, r3
 8006896:	4413      	add	r3, r2
 8006898:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	b25b      	sxtb	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	da16      	bge.n	80068d2 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068a4:	7bbb      	ldrb	r3, [r7, #14]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	211a      	movs	r1, #26
 80068aa:	fb01 f303 	mul.w	r3, r1, r3
 80068ae:	4413      	add	r3, r2
 80068b0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80068b4:	781a      	ldrb	r2, [r3, #0]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068ba:	7bbb      	ldrb	r3, [r7, #14]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	211a      	movs	r1, #26
 80068c0:	fb01 f303 	mul.w	r3, r1, r3
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80068ca:	881a      	ldrh	r2, [r3, #0]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	835a      	strh	r2, [r3, #26]
 80068d0:	e015      	b.n	80068fe <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068d2:	7bbb      	ldrb	r3, [r7, #14]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	211a      	movs	r1, #26
 80068d8:	fb01 f303 	mul.w	r3, r1, r3
 80068dc:	4413      	add	r3, r2
 80068de:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80068e2:	781a      	ldrb	r2, [r3, #0]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068e8:	7bbb      	ldrb	r3, [r7, #14]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	211a      	movs	r1, #26
 80068ee:	fb01 f303 	mul.w	r3, r1, r3
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80068f8:	881a      	ldrh	r2, [r3, #0]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	211a      	movs	r1, #26
 8006904:	fb01 f303 	mul.w	r3, r1, r3
 8006908:	4413      	add	r3, r2
 800690a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	b25b      	sxtb	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	da16      	bge.n	8006944 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006916:	7bbb      	ldrb	r3, [r7, #14]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	211a      	movs	r1, #26
 800691c:	fb01 f303 	mul.w	r3, r1, r3
 8006920:	4413      	add	r3, r2
 8006922:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006926:	781a      	ldrb	r2, [r3, #0]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800692c:	7bbb      	ldrb	r3, [r7, #14]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	211a      	movs	r1, #26
 8006932:	fb01 f303 	mul.w	r3, r1, r3
 8006936:	4413      	add	r3, r2
 8006938:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800693c:	881a      	ldrh	r2, [r3, #0]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	835a      	strh	r2, [r3, #26]
 8006942:	e015      	b.n	8006970 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006944:	7bbb      	ldrb	r3, [r7, #14]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	211a      	movs	r1, #26
 800694a:	fb01 f303 	mul.w	r3, r1, r3
 800694e:	4413      	add	r3, r2
 8006950:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006954:	781a      	ldrb	r2, [r3, #0]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800695a:	7bbb      	ldrb	r3, [r7, #14]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	211a      	movs	r1, #26
 8006960:	fb01 f303 	mul.w	r3, r1, r3
 8006964:	4413      	add	r3, r2
 8006966:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800696a:	881a      	ldrh	r2, [r3, #0]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	7b9b      	ldrb	r3, [r3, #14]
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f001 fc7d 	bl	8008276 <USBH_AllocPipe>
 800697c:	4603      	mov	r3, r0
 800697e:	461a      	mov	r2, r3
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	7bdb      	ldrb	r3, [r3, #15]
 8006988:	4619      	mov	r1, r3
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f001 fc73 	bl	8008276 <USBH_AllocPipe>
 8006990:	4603      	mov	r3, r0
 8006992:	461a      	mov	r2, r3
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	7b59      	ldrb	r1, [r3, #13]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	7b98      	ldrb	r0, [r3, #14]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	8b12      	ldrh	r2, [r2, #24]
 80069b0:	9202      	str	r2, [sp, #8]
 80069b2:	2202      	movs	r2, #2
 80069b4:	9201      	str	r2, [sp, #4]
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	4623      	mov	r3, r4
 80069ba:	4602      	mov	r2, r0
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f001 fc2b 	bl	8008218 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	7b19      	ldrb	r1, [r3, #12]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	7bd8      	ldrb	r0, [r3, #15]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	8b52      	ldrh	r2, [r2, #26]
 80069da:	9202      	str	r2, [sp, #8]
 80069dc:	2202      	movs	r2, #2
 80069de:	9201      	str	r2, [sp, #4]
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	4623      	mov	r3, r4
 80069e4:	4602      	mov	r2, r0
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f001 fc16 	bl	8008218 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	7b5b      	ldrb	r3, [r3, #13]
 80069f8:	2200      	movs	r2, #0
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f002 fd7f 	bl	8009500 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	7b1b      	ldrb	r3, [r3, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f002 fd78 	bl	8009500 <USBH_LL_SetToggle>
      status = USBH_OK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd90      	pop	{r4, r7, pc}

08006a1e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00e      	beq.n	8006a56 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 fc09 	bl	8008256 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 fc31 	bl	80082b2 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	7b1b      	ldrb	r3, [r3, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00e      	beq.n	8006a7c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	7b1b      	ldrb	r3, [r3, #12]
 8006a62:	4619      	mov	r1, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 fbf6 	bl	8008256 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	7b1b      	ldrb	r3, [r3, #12]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 fc1e 	bl	80082b2 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	7b5b      	ldrb	r3, [r3, #13]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00e      	beq.n	8006aa2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	7b5b      	ldrb	r3, [r3, #13]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 fbe3 	bl	8008256 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	7b5b      	ldrb	r3, [r3, #13]
 8006a94:	4619      	mov	r1, r3
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f001 fc0b 	bl	80082b2 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00b      	beq.n	8006ac6 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f002 fe04 	bl	80096c4 <free>
    phost->pActiveClass->pData = 0U;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006ad8:	2302      	movs	r3, #2
 8006ada:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	3340      	adds	r3, #64	; 0x40
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f8b2 	bl	8006c56 <GetLineCoding>
 8006af2:	4603      	mov	r3, r0
 8006af4:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8006af6:	7bfb      	ldrb	r3, [r7, #15]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d105      	bne.n	8006b08 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006b02:	2102      	movs	r1, #2
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	4798      	blx	r3
  }
  return status;
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
	...

08006b14 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d877      	bhi.n	8006c28 <USBH_CDC_Process+0x114>
 8006b38:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <USBH_CDC_Process+0x2c>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b55 	.word	0x08006b55
 8006b44:	08006b5b 	.word	0x08006b5b
 8006b48:	08006b8b 	.word	0x08006b8b
 8006b4c:	08006bff 	.word	0x08006bff
 8006b50:	08006c0d 	.word	0x08006c0d
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	73fb      	strb	r3, [r7, #15]
    break;
 8006b58:	e06d      	b.n	8006c36 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f897 	bl	8006c94 <SetLineCoding>
 8006b66:	4603      	mov	r3, r0
 8006b68:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d104      	bne.n	8006b7a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006b78:	e058      	b.n	8006c2c <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8006b7a:	7bbb      	ldrb	r3, [r7, #14]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d055      	beq.n	8006c2c <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2204      	movs	r2, #4
 8006b84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006b88:	e050      	b.n	8006c2c <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	3340      	adds	r3, #64	; 0x40
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f860 	bl	8006c56 <GetLineCoding>
 8006b96:	4603      	mov	r3, r0
 8006b98:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006b9a:	7bbb      	ldrb	r3, [r7, #14]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d126      	bne.n	8006bee <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb2:	791b      	ldrb	r3, [r3, #4]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d13b      	bne.n	8006c30 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc2:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d133      	bne.n	8006c30 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bd2:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d12b      	bne.n	8006c30 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006be0:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d124      	bne.n	8006c30 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f95a 	bl	8006ea0 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006bec:	e020      	b.n	8006c30 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8006bee:	7bbb      	ldrb	r3, [r7, #14]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d01d      	beq.n	8006c30 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2204      	movs	r2, #4
 8006bf8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006bfc:	e018      	b.n	8006c30 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f867 	bl	8006cd2 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f8dc 	bl	8006dc2 <CDC_ProcessReception>
    break;
 8006c0a:	e014      	b.n	8006c36 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fece 	bl	80079b0 <USBH_ClrFeature>
 8006c14:	4603      	mov	r3, r0
 8006c16:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8006c26:	e005      	b.n	8006c34 <USBH_CDC_Process+0x120>

  default:
    break;
 8006c28:	bf00      	nop
 8006c2a:	e004      	b.n	8006c36 <USBH_CDC_Process+0x122>
    break;
 8006c2c:	bf00      	nop
 8006c2e:	e002      	b.n	8006c36 <USBH_CDC_Process+0x122>
    break;
 8006c30:	bf00      	nop
 8006c32:	e000      	b.n	8006c36 <USBH_CDC_Process+0x122>
    break;
 8006c34:	bf00      	nop

  }

  return status;
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b082      	sub	sp, #8
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	22a1      	movs	r2, #161	; 0xa1
 8006c64:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2221      	movs	r2, #33	; 0x21
 8006c6a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2207      	movs	r2, #7
 8006c7c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2207      	movs	r2, #7
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 f873 	bl	8007d70 <USBH_CtlReq>
 8006c8a:	4603      	mov	r3, r0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2221      	movs	r2, #33	; 0x21
 8006ca2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2207      	movs	r2, #7
 8006cba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2207      	movs	r2, #7
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f001 f854 	bl	8007d70 <USBH_CtlReq>
 8006cc8:	4603      	mov	r3, r0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b086      	sub	sp, #24
 8006cd6:	af02      	add	r7, sp, #8
 8006cd8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d002      	beq.n	8006cf8 <CDC_ProcessTransmission+0x26>
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d025      	beq.n	8006d42 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8006cf6:	e060      	b.n	8006dba <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	8b12      	ldrh	r2, [r2, #24]
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d90c      	bls.n	8006d1e <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	69d9      	ldr	r1, [r3, #28]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8b1a      	ldrh	r2, [r3, #24]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	7b58      	ldrb	r0, [r3, #13]
 8006d10:	2301      	movs	r3, #1
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	4603      	mov	r3, r0
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f001 fa3b 	bl	8008192 <USBH_BulkSendData>
 8006d1c:	e00c      	b.n	8006d38 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	7b58      	ldrb	r0, [r3, #13]
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	4603      	mov	r3, r0
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f001 fa2d 	bl	8008192 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006d40:	e03b      	b.n	8006dba <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	7b5b      	ldrb	r3, [r3, #13]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f002 fbaf 	bl	80094ac <USBH_LL_GetURBState>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8006d52:	7afb      	ldrb	r3, [r7, #11]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d128      	bne.n	8006daa <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	8b12      	ldrh	r2, [r2, #24]
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d90e      	bls.n	8006d82 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	8b12      	ldrh	r2, [r2, #24]
 8006d6c:	1a9a      	subs	r2, r3, r2
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	8b12      	ldrh	r2, [r2, #24]
 8006d7a:	441a      	add	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	61da      	str	r2, [r3, #28]
 8006d80:	e002      	b.n	8006d88 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d004      	beq.n	8006d9a <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006d98:	e00e      	b.n	8006db8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f868 	bl	8006e78 <USBH_CDC_TransmitCallback>
    break;
 8006da8:	e006      	b.n	8006db8 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8006daa:	7afb      	ldrb	r3, [r7, #11]
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d103      	bne.n	8006db8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006db8:	bf00      	nop
  }
}
 8006dba:	bf00      	nop
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b086      	sub	sp, #24
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	d002      	beq.n	8006de8 <CDC_ProcessReception+0x26>
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	d00e      	beq.n	8006e04 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8006de6:	e043      	b.n	8006e70 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	6a19      	ldr	r1, [r3, #32]
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	8b5a      	ldrh	r2, [r3, #26]
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	7b1b      	ldrb	r3, [r3, #12]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 f9f1 	bl	80081dc <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2204      	movs	r2, #4
 8006dfe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006e02:	e035      	b.n	8006e70 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	7b1b      	ldrb	r3, [r3, #12]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f002 fb4e 	bl	80094ac <USBH_LL_GetURBState>
 8006e10:	4603      	mov	r3, r0
 8006e12:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8006e14:	7cfb      	ldrb	r3, [r7, #19]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d129      	bne.n	8006e6e <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	7b1b      	ldrb	r3, [r3, #12]
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f002 fab1 	bl	8009388 <USBH_LL_GetLastXferSize>
 8006e26:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d016      	beq.n	8006e60 <CDC_ProcessReception+0x9e>
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	8b5b      	ldrh	r3, [r3, #26]
 8006e36:	461a      	mov	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d910      	bls.n	8006e60 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	1ad2      	subs	r2, r2, r3
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	6a1a      	ldr	r2, [r3, #32]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	441a      	add	r2, r3
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2203      	movs	r2, #3
 8006e5a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006e5e:	e006      	b.n	8006e6e <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f80f 	bl	8006e8c <USBH_CDC_ReceiveCallback>
    break;
 8006e6e:	bf00      	nop
  }
}
 8006e70:	bf00      	nop
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]

}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]

}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]

}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e019      	b.n	8006f00 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	79fa      	ldrb	r2, [r7, #7]
 8006ed0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 f80f 	bl	8006f08 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f002 f993 	bl	8009224 <USBH_LL_Init>

  return USBH_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006f14:	e008      	b.n	8006f28 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	32e0      	adds	r2, #224	; 0xe0
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3301      	adds	r3, #1
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b0e      	cmp	r3, #14
 8006f2c:	d9f3      	bls.n	8006f16 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	e009      	b.n	8006f48 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f3e:	2200      	movs	r2, #0
 8006f40:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	3301      	adds	r3, #1
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f4e:	d3f1      	bcc.n	8006f34 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2240      	movs	r2, #64	; 0x40
 8006f74:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b085      	sub	sp, #20
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d017      	beq.n	8006fde <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10f      	bne.n	8006fd8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fbe:	1c59      	adds	r1, r3, #1
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	33dc      	adds	r3, #220	; 0xdc
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]
 8006fd6:	e004      	b.n	8006fe2 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006fd8:	2302      	movs	r3, #2
 8006fda:	73fb      	strb	r3, [r7, #15]
 8006fdc:	e001      	b.n	8006fe2 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006fde:	2302      	movs	r3, #2
 8006fe0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8007006:	78fa      	ldrb	r2, [r7, #3]
 8007008:	429a      	cmp	r2, r3
 800700a:	d204      	bcs.n	8007016 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	78fa      	ldrb	r2, [r7, #3]
 8007010:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8007014:	e001      	b.n	800701a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007016:	2302      	movs	r3, #2
 8007018:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800701a:	7bfb      	ldrb	r3, [r7, #15]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	4608      	mov	r0, r1
 8007032:	4611      	mov	r1, r2
 8007034:	461a      	mov	r2, r3
 8007036:	4603      	mov	r3, r0
 8007038:	70fb      	strb	r3, [r7, #3]
 800703a:	460b      	mov	r3, r1
 800703c:	70bb      	strb	r3, [r7, #2]
 800703e:	4613      	mov	r3, r2
 8007040:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007046:	2300      	movs	r3, #0
 8007048:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007050:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007052:	e025      	b.n	80070a0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007054:	7dfb      	ldrb	r3, [r7, #23]
 8007056:	221a      	movs	r2, #26
 8007058:	fb02 f303 	mul.w	r3, r2, r3
 800705c:	3308      	adds	r3, #8
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4413      	add	r3, r2
 8007062:	3302      	adds	r3, #2
 8007064:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	795b      	ldrb	r3, [r3, #5]
 800706a:	78fa      	ldrb	r2, [r7, #3]
 800706c:	429a      	cmp	r2, r3
 800706e:	d002      	beq.n	8007076 <USBH_FindInterface+0x4e>
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	2bff      	cmp	r3, #255	; 0xff
 8007074:	d111      	bne.n	800709a <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800707a:	78ba      	ldrb	r2, [r7, #2]
 800707c:	429a      	cmp	r2, r3
 800707e:	d002      	beq.n	8007086 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007080:	78bb      	ldrb	r3, [r7, #2]
 8007082:	2bff      	cmp	r3, #255	; 0xff
 8007084:	d109      	bne.n	800709a <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800708a:	787a      	ldrb	r2, [r7, #1]
 800708c:	429a      	cmp	r2, r3
 800708e:	d002      	beq.n	8007096 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007090:	787b      	ldrb	r3, [r7, #1]
 8007092:	2bff      	cmp	r3, #255	; 0xff
 8007094:	d101      	bne.n	800709a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007096:	7dfb      	ldrb	r3, [r7, #23]
 8007098:	e006      	b.n	80070a8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800709a:	7dfb      	ldrb	r3, [r7, #23]
 800709c:	3301      	adds	r3, #1
 800709e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d9d6      	bls.n	8007054 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80070a6:	23ff      	movs	r3, #255	; 0xff
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	371c      	adds	r7, #28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f002 f8ed 	bl	800929c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80070c2:	2101      	movs	r1, #1
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f002 fa04 	bl	80094d2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b088      	sub	sp, #32
 80070d8:	af04      	add	r7, sp, #16
 80070da:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80070dc:	2302      	movs	r3, #2
 80070de:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 faec 	bl	80076c2 <USBH_IsPortEnabled>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10c      	bne.n	800710a <USBH_Process+0x36>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d007      	beq.n	800710a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b03      	cmp	r3, #3
 8007102:	d002      	beq.n	800710a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2203      	movs	r2, #3
 8007108:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b0b      	cmp	r3, #11
 8007112:	f200 814c 	bhi.w	80073ae <USBH_Process+0x2da>
 8007116:	a201      	add	r2, pc, #4	; (adr r2, 800711c <USBH_Process+0x48>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	0800714d 	.word	0x0800714d
 8007120:	0800716f 	.word	0x0800716f
 8007124:	08007183 	.word	0x08007183
 8007128:	08007389 	.word	0x08007389
 800712c:	080073af 	.word	0x080073af
 8007130:	08007211 	.word	0x08007211
 8007134:	0800733f 	.word	0x0800733f
 8007138:	08007241 	.word	0x08007241
 800713c:	08007261 	.word	0x08007261
 8007140:	08007281 	.word	0x08007281
 8007144:	080072af 	.word	0x080072af
 8007148:	08007371 	.word	0x08007371
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 812c 	beq.w	80073b2 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8007160:	20c8      	movs	r0, #200	; 0xc8
 8007162:	f002 fa00 	bl	8009566 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f002 f8f3 	bl	8009352 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800716c:	e121      	b.n	80073b2 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007174:	2b01      	cmp	r3, #1
 8007176:	f040 811e 	bne.w	80073b6 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2202      	movs	r2, #2
 800717e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007180:	e119      	b.n	80073b6 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8007182:	2064      	movs	r0, #100	; 0x64
 8007184:	f002 f9ef 	bl	8009566 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f002 f8bd 	bl	8009308 <USBH_LL_GetSpeed>
 800718e:	4603      	mov	r3, r0
 8007190:	461a      	mov	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2205      	movs	r2, #5
 800719c:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800719e:	2100      	movs	r1, #0
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 f868 	bl	8008276 <USBH_AllocPipe>
 80071a6:	4603      	mov	r3, r0
 80071a8:	461a      	mov	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80071ae:	2180      	movs	r1, #128	; 0x80
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 f860 	bl	8008276 <USBH_AllocPipe>
 80071b6:	4603      	mov	r3, r0
 80071b8:	461a      	mov	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	7919      	ldrb	r1, [r3, #4]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80071d2:	b292      	uxth	r2, r2
 80071d4:	9202      	str	r2, [sp, #8]
 80071d6:	2200      	movs	r2, #0
 80071d8:	9201      	str	r2, [sp, #4]
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	4603      	mov	r3, r0
 80071de:	2280      	movs	r2, #128	; 0x80
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f001 f819 	bl	8008218 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	7959      	ldrb	r1, [r3, #5]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80071fa:	b292      	uxth	r2, r2
 80071fc:	9202      	str	r2, [sp, #8]
 80071fe:	2200      	movs	r2, #0
 8007200:	9201      	str	r2, [sp, #4]
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	4603      	mov	r3, r0
 8007206:	2200      	movs	r2, #0
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 f805 	bl	8008218 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800720e:	e0e3      	b.n	80073d8 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f8e7 	bl	80073e4 <USBH_HandleEnum>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	f040 80ce 	bne.w	80073ba <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800722c:	2b01      	cmp	r3, #1
 800722e:	d103      	bne.n	8007238 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2208      	movs	r2, #8
 8007234:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8007236:	e0c0      	b.n	80073ba <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2207      	movs	r2, #7
 800723c:	701a      	strb	r2, [r3, #0]
    break;
 800723e:	e0bc      	b.n	80073ba <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 80b9 	beq.w	80073be <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007252:	2101      	movs	r1, #1
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2208      	movs	r2, #8
 800725c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800725e:	e0ae      	b.n	80073be <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8007266:	b29b      	uxth	r3, r3
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fb59 	bl	8007922 <USBH_SetCfg>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	f040 80a5 	bne.w	80073c2 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2209      	movs	r2, #9
 800727c:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800727e:	e0a0      	b.n	80073c2 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8007286:	f003 0320 	and.w	r3, r3, #32
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00b      	beq.n	80072a6 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800728e:	2101      	movs	r1, #1
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fb69 	bl	8007968 <USBH_SetFeature>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	f040 8094 	bne.w	80073c6 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	220a      	movs	r2, #10
 80072a2:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80072a4:	e08f      	b.n	80073c6 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	220a      	movs	r2, #10
 80072aa:	701a      	strb	r2, [r3, #0]
    break;
 80072ac:	e08b      	b.n	80073c6 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 8088 	beq.w	80073ca <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80072c2:	2300      	movs	r3, #0
 80072c4:	73fb      	strb	r3, [r7, #15]
 80072c6:	e017      	b.n	80072f8 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	33dc      	adds	r3, #220	; 0xdc
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	791a      	ldrb	r2, [r3, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80072dc:	429a      	cmp	r2, r3
 80072de:	d108      	bne.n	80072f2 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	33dc      	adds	r3, #220	; 0xdc
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
 80072f4:	3301      	adds	r3, #1
 80072f6:	73fb      	strb	r3, [r7, #15]
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0e4      	beq.n	80072c8 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007304:	2b00      	cmp	r3, #0
 8007306:	d016      	beq.n	8007336 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	4798      	blx	r3
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d109      	bne.n	800732e <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2206      	movs	r2, #6
 800731e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007326:	2103      	movs	r1, #3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800732c:	e04d      	b.n	80073ca <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	220d      	movs	r2, #13
 8007332:	701a      	strb	r2, [r3, #0]
    break;
 8007334:	e049      	b.n	80073ca <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	220d      	movs	r2, #13
 800733a:	701a      	strb	r2, [r3, #0]
    break;
 800733c:	e045      	b.n	80073ca <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00f      	beq.n	8007368 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	4798      	blx	r3
 8007354:	4603      	mov	r3, r0
 8007356:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8007358:	7bbb      	ldrb	r3, [r7, #14]
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d136      	bne.n	80073ce <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	220b      	movs	r2, #11
 8007364:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8007366:	e032      	b.n	80073ce <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	220d      	movs	r2, #13
 800736c:	701a      	strb	r2, [r3, #0]
    break;
 800736e:	e02e      	b.n	80073ce <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007376:	2b00      	cmp	r3, #0
 8007378:	d02b      	beq.n	80073d2 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	4798      	blx	r3
    }
    break;
 8007386:	e024      	b.n	80073d2 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7ff fdbd 	bl	8006f08 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007394:	2b00      	cmp	r3, #0
 8007396:	d01e      	beq.n	80073d6 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80073ac:	e013      	b.n	80073d6 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 80073ae:	bf00      	nop
 80073b0:	e012      	b.n	80073d8 <USBH_Process+0x304>
    break;
 80073b2:	bf00      	nop
 80073b4:	e010      	b.n	80073d8 <USBH_Process+0x304>
    break;
 80073b6:	bf00      	nop
 80073b8:	e00e      	b.n	80073d8 <USBH_Process+0x304>
    break;
 80073ba:	bf00      	nop
 80073bc:	e00c      	b.n	80073d8 <USBH_Process+0x304>
    break;
 80073be:	bf00      	nop
 80073c0:	e00a      	b.n	80073d8 <USBH_Process+0x304>
    break;
 80073c2:	bf00      	nop
 80073c4:	e008      	b.n	80073d8 <USBH_Process+0x304>
    break;
 80073c6:	bf00      	nop
 80073c8:	e006      	b.n	80073d8 <USBH_Process+0x304>
    break;
 80073ca:	bf00      	nop
 80073cc:	e004      	b.n	80073d8 <USBH_Process+0x304>
    break;
 80073ce:	bf00      	nop
 80073d0:	e002      	b.n	80073d8 <USBH_Process+0x304>
    break;
 80073d2:	bf00      	nop
 80073d4:	e000      	b.n	80073d8 <USBH_Process+0x304>
    break;
 80073d6:	bf00      	nop
  }
 return USBH_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop

080073e4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af04      	add	r7, sp, #16
 80073ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80073ec:	2301      	movs	r3, #1
 80073ee:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	785b      	ldrb	r3, [r3, #1]
 80073f4:	2b07      	cmp	r3, #7
 80073f6:	f200 80f8 	bhi.w	80075ea <USBH_HandleEnum+0x206>
 80073fa:	a201      	add	r2, pc, #4	; (adr r2, 8007400 <USBH_HandleEnum+0x1c>)
 80073fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007400:	08007421 	.word	0x08007421
 8007404:	08007493 	.word	0x08007493
 8007408:	080074ab 	.word	0x080074ab
 800740c:	08007521 	.word	0x08007521
 8007410:	08007537 	.word	0x08007537
 8007414:	08007553 	.word	0x08007553
 8007418:	08007587 	.word	0x08007587
 800741c:	080075bb 	.word	0x080075bb
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8007420:	2108      	movs	r1, #8
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f9ad 	bl	8007782 <USBH_Get_DevDesc>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	f040 80df 	bne.w	80075ee <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	7919      	ldrb	r1, [r3, #4]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007454:	b292      	uxth	r2, r2
 8007456:	9202      	str	r2, [sp, #8]
 8007458:	2200      	movs	r2, #0
 800745a:	9201      	str	r2, [sp, #4]
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	4603      	mov	r3, r0
 8007460:	2280      	movs	r2, #128	; 0x80
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fed8 	bl	8008218 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	7959      	ldrb	r1, [r3, #5]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800747c:	b292      	uxth	r2, r2
 800747e:	9202      	str	r2, [sp, #8]
 8007480:	2200      	movs	r2, #0
 8007482:	9201      	str	r2, [sp, #4]
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	4603      	mov	r3, r0
 8007488:	2200      	movs	r2, #0
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fec4 	bl	8008218 <USBH_OpenPipe>

    }
    break;
 8007490:	e0ad      	b.n	80075ee <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8007492:	2112      	movs	r1, #18
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f974 	bl	8007782 <USBH_Get_DevDesc>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	f040 80a8 	bne.w	80075f2 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2202      	movs	r2, #2
 80074a6:	705a      	strb	r2, [r3, #1]

    }
    break;
 80074a8:	e0a3      	b.n	80075f2 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80074aa:	2101      	movs	r1, #1
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fa14 	bl	80078da <USBH_SetAddress>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f040 809e 	bne.w	80075f6 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 80074ba:	2002      	movs	r0, #2
 80074bc:	f002 f853 	bl	8009566 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2203      	movs	r2, #3
 80074cc:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	7919      	ldrb	r1, [r3, #4]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80074e2:	b292      	uxth	r2, r2
 80074e4:	9202      	str	r2, [sp, #8]
 80074e6:	2200      	movs	r2, #0
 80074e8:	9201      	str	r2, [sp, #4]
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	4603      	mov	r3, r0
 80074ee:	2280      	movs	r2, #128	; 0x80
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fe91 	bl	8008218 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	7959      	ldrb	r1, [r3, #5]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800750a:	b292      	uxth	r2, r2
 800750c:	9202      	str	r2, [sp, #8]
 800750e:	2200      	movs	r2, #0
 8007510:	9201      	str	r2, [sp, #4]
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	4603      	mov	r3, r0
 8007516:	2200      	movs	r2, #0
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fe7d 	bl	8008218 <USBH_OpenPipe>
    }
    break;
 800751e:	e06a      	b.n	80075f6 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8007520:	2109      	movs	r1, #9
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f955 	bl	80077d2 <USBH_Get_CfgDesc>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d165      	bne.n	80075fa <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2204      	movs	r2, #4
 8007532:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007534:	e061      	b.n	80075fa <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800753c:	4619      	mov	r1, r3
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f947 	bl	80077d2 <USBH_Get_CfgDesc>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d159      	bne.n	80075fe <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2205      	movs	r2, #5
 800754e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007550:	e055      	b.n	80075fe <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007558:	2b00      	cmp	r3, #0
 800755a:	d010      	beq.n	800757e <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007568:	23ff      	movs	r3, #255	; 0xff
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f955 	bl	800781a <USBH_Get_StringDesc>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d145      	bne.n	8007602 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2206      	movs	r2, #6
 800757a:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800757c:	e041      	b.n	8007602 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2206      	movs	r2, #6
 8007582:	705a      	strb	r2, [r3, #1]
    break;
 8007584:	e03d      	b.n	8007602 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800758c:	2b00      	cmp	r3, #0
 800758e:	d010      	beq.n	80075b2 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800759c:	23ff      	movs	r3, #255	; 0xff
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f93b 	bl	800781a <USBH_Get_StringDesc>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d12d      	bne.n	8007606 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2207      	movs	r2, #7
 80075ae:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80075b0:	e029      	b.n	8007606 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2207      	movs	r2, #7
 80075b6:	705a      	strb	r2, [r3, #1]
    break;
 80075b8:	e025      	b.n	8007606 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00f      	beq.n	80075e4 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80075d0:	23ff      	movs	r3, #255	; 0xff
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f921 	bl	800781a <USBH_Get_StringDesc>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d115      	bne.n	800760a <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80075e2:	e012      	b.n	800760a <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	73fb      	strb	r3, [r7, #15]
    break;
 80075e8:	e00f      	b.n	800760a <USBH_HandleEnum+0x226>

  default:
    break;
 80075ea:	bf00      	nop
 80075ec:	e00e      	b.n	800760c <USBH_HandleEnum+0x228>
    break;
 80075ee:	bf00      	nop
 80075f0:	e00c      	b.n	800760c <USBH_HandleEnum+0x228>
    break;
 80075f2:	bf00      	nop
 80075f4:	e00a      	b.n	800760c <USBH_HandleEnum+0x228>
    break;
 80075f6:	bf00      	nop
 80075f8:	e008      	b.n	800760c <USBH_HandleEnum+0x228>
    break;
 80075fa:	bf00      	nop
 80075fc:	e006      	b.n	800760c <USBH_HandleEnum+0x228>
    break;
 80075fe:	bf00      	nop
 8007600:	e004      	b.n	800760c <USBH_HandleEnum+0x228>
    break;
 8007602:	bf00      	nop
 8007604:	e002      	b.n	800760c <USBH_HandleEnum+0x228>
    break;
 8007606:	bf00      	nop
 8007608:	e000      	b.n	800760c <USBH_HandleEnum+0x228>
    break;
 800760a:	bf00      	nop
  }
  return Status;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop

08007618 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800762a:	bf00      	nop
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f804 	bl	800765a <USBH_HandleSof>
}
 8007652:	bf00      	nop
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b082      	sub	sp, #8
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b0b      	cmp	r3, #11
 800766a:	d10a      	bne.n	8007682 <USBH_HandleSof+0x28>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007672:	2b00      	cmp	r3, #0
 8007674:	d005      	beq.n	8007682 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	4798      	blx	r3
  }
}
 8007682:	bf00      	nop
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800769a:	bf00      	nop
}
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b083      	sub	sp, #12
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80076b6:	bf00      	nop
}
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10f      	bne.n	800770e <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00e      	beq.n	800771e <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007706:	2104      	movs	r1, #4
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	4798      	blx	r3
 800770c:	e007      	b.n	800771e <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007714:	2b01      	cmp	r3, #1
 8007716:	d102      	bne.n	800771e <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 fdce 	bl	80092d2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	791b      	ldrb	r3, [r3, #4]
 800773a:	4619      	mov	r1, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fdb8 	bl	80082b2 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	795b      	ldrb	r3, [r3, #5]
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fdb2 	bl	80082b2 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800775c:	2b00      	cmp	r3, #0
 800775e:	d005      	beq.n	800776c <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007766:	2105      	movs	r1, #5
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f001 fd95 	bl	800929c <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2203      	movs	r2, #3
 8007776:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b086      	sub	sp, #24
 8007786:	af02      	add	r7, sp, #8
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	460b      	mov	r3, r1
 800778c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007794:	78fb      	ldrb	r3, [r7, #3]
 8007796:	b29b      	uxth	r3, r3
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	4613      	mov	r3, r2
 800779c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077a0:	2100      	movs	r1, #0
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f864 	bl	8007870 <USBH_GetDescriptor>
 80077a8:	4603      	mov	r3, r0
 80077aa:	73fb      	strb	r3, [r7, #15]
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10a      	bne.n	80077c8 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f203 3022 	addw	r0, r3, #802	; 0x322
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80077be:	78fa      	ldrb	r2, [r7, #3]
 80077c0:	b292      	uxth	r2, r2
 80077c2:	4619      	mov	r1, r3
 80077c4:	f000 f918 	bl	80079f8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b086      	sub	sp, #24
 80077d6:	af02      	add	r7, sp, #8
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	460b      	mov	r3, r1
 80077dc:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	331c      	adds	r3, #28
 80077e2:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80077e4:	887b      	ldrh	r3, [r7, #2]
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ee:	2100      	movs	r1, #0
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f83d 	bl	8007870 <USBH_GetDescriptor>
 80077f6:	4603      	mov	r3, r0
 80077f8:	72fb      	strb	r3, [r7, #11]
 80077fa:	7afb      	ldrb	r3, [r7, #11]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d107      	bne.n	8007810 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007806:	887a      	ldrh	r2, [r7, #2]
 8007808:	68f9      	ldr	r1, [r7, #12]
 800780a:	4618      	mov	r0, r3
 800780c:	f000 f964 	bl	8007ad8 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8007810:	7afb      	ldrb	r3, [r7, #11]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b088      	sub	sp, #32
 800781e:	af02      	add	r7, sp, #8
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	461a      	mov	r2, r3
 8007826:	460b      	mov	r3, r1
 8007828:	72fb      	strb	r3, [r7, #11]
 800782a:	4613      	mov	r3, r2
 800782c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800782e:	7afb      	ldrb	r3, [r7, #11]
 8007830:	b29b      	uxth	r3, r3
 8007832:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007836:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800783e:	893b      	ldrh	r3, [r7, #8]
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	460b      	mov	r3, r1
 8007844:	2100      	movs	r1, #0
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 f812 	bl	8007870 <USBH_GetDescriptor>
 800784c:	4603      	mov	r3, r0
 800784e:	75fb      	strb	r3, [r7, #23]
 8007850:	7dfb      	ldrb	r3, [r7, #23]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d107      	bne.n	8007866 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800785c:	893a      	ldrh	r2, [r7, #8]
 800785e:	6879      	ldr	r1, [r7, #4]
 8007860:	4618      	mov	r0, r3
 8007862:	f000 fa37 	bl	8007cd4 <USBH_ParseStringDesc>
  }
  return status;
 8007866:	7dfb      	ldrb	r3, [r7, #23]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3718      	adds	r7, #24
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	607b      	str	r3, [r7, #4]
 800787a:	460b      	mov	r3, r1
 800787c:	72fb      	strb	r3, [r7, #11]
 800787e:	4613      	mov	r3, r2
 8007880:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	789b      	ldrb	r3, [r3, #2]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d11c      	bne.n	80078c4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800788a:	7afb      	ldrb	r3, [r7, #11]
 800788c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007890:	b2da      	uxtb	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2206      	movs	r2, #6
 800789a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	893a      	ldrh	r2, [r7, #8]
 80078a0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80078a2:	893b      	ldrh	r3, [r7, #8]
 80078a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80078a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078ac:	d104      	bne.n	80078b8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f240 4209 	movw	r2, #1033	; 0x409
 80078b4:	829a      	strh	r2, [r3, #20]
 80078b6:	e002      	b.n	80078be <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	8b3a      	ldrh	r2, [r7, #24]
 80078c2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 80078c4:	8b3b      	ldrh	r3, [r7, #24]
 80078c6:	461a      	mov	r2, r3
 80078c8:	6879      	ldr	r1, [r7, #4]
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f000 fa50 	bl	8007d70 <USBH_CtlReq>
 80078d0:	4603      	mov	r3, r0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b082      	sub	sp, #8
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	460b      	mov	r3, r1
 80078e4:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	789b      	ldrb	r3, [r3, #2]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d10f      	bne.n	800790e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2205      	movs	r2, #5
 80078f8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800790e:	2200      	movs	r2, #0
 8007910:	2100      	movs	r1, #0
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fa2c 	bl	8007d70 <USBH_CtlReq>
 8007918:	4603      	mov	r3, r0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b082      	sub	sp, #8
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	460b      	mov	r3, r1
 800792c:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	789b      	ldrb	r3, [r3, #2]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d10e      	bne.n	8007954 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2209      	movs	r2, #9
 8007940:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	887a      	ldrh	r2, [r7, #2]
 8007946:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8007954:	2200      	movs	r2, #0
 8007956:	2100      	movs	r1, #0
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fa09 	bl	8007d70 <USBH_CtlReq>
 800795e:	4603      	mov	r3, r0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	460b      	mov	r3, r1
 8007972:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	789b      	ldrb	r3, [r3, #2]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d10f      	bne.n	800799c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2203      	movs	r2, #3
 8007986:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	b29a      	uxth	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800799c:	2200      	movs	r2, #0
 800799e:	2100      	movs	r1, #0
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f9e5 	bl	8007d70 <USBH_CtlReq>
 80079a6:	4603      	mov	r3, r0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	460b      	mov	r3, r1
 80079ba:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	789b      	ldrb	r3, [r3, #2]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d10f      	bne.n	80079e4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2202      	movs	r2, #2
 80079c8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80079d6:	78fb      	ldrb	r3, [r7, #3]
 80079d8:	b29a      	uxth	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 80079e4:	2200      	movs	r2, #0
 80079e6:	2100      	movs	r1, #0
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f9c1 	bl	8007d70 <USBH_CtlReq>
 80079ee:	4603      	mov	r3, r0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	4613      	mov	r3, r2
 8007a04:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	781a      	ldrb	r2, [r3, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	785a      	ldrb	r2, [r3, #1]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	3302      	adds	r3, #2
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	3303      	adds	r3, #3
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	021b      	lsls	r3, r3, #8
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	791a      	ldrb	r2, [r3, #4]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	795a      	ldrb	r2, [r3, #5]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	799a      	ldrb	r2, [r3, #6]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	79da      	ldrb	r2, [r3, #7]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007a52:	88fb      	ldrh	r3, [r7, #6]
 8007a54:	2b08      	cmp	r3, #8
 8007a56:	d939      	bls.n	8007acc <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	3309      	adds	r3, #9
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	021b      	lsls	r3, r3, #8
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	330a      	adds	r3, #10
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	330b      	adds	r3, #11
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	021b      	lsls	r3, r3, #8
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	330c      	adds	r3, #12
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	330d      	adds	r3, #13
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	021b      	lsls	r3, r3, #8
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	7b9a      	ldrb	r2, [r3, #14]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	7bda      	ldrb	r2, [r3, #15]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	7c1a      	ldrb	r2, [r3, #16]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	7c5a      	ldrb	r2, [r3, #17]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	745a      	strb	r2, [r3, #17]
  }
}
 8007acc:	bf00      	nop
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08a      	sub	sp, #40	; 0x28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	781a      	ldrb	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	785a      	ldrb	r2, [r3, #1]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	3302      	adds	r3, #2
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	3303      	adds	r3, #3
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	021b      	lsls	r3, r3, #8
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	791a      	ldrb	r2, [r3, #4]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	795a      	ldrb	r2, [r3, #5]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	799a      	ldrb	r2, [r3, #6]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	79da      	ldrb	r2, [r3, #7]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	7a1a      	ldrb	r2, [r3, #8]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007b4e:	88fb      	ldrh	r3, [r7, #6]
 8007b50:	2b09      	cmp	r3, #9
 8007b52:	d95f      	bls.n	8007c14 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007b54:	2309      	movs	r3, #9
 8007b56:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007b5c:	e051      	b.n	8007c02 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007b5e:	f107 0316 	add.w	r3, r7, #22
 8007b62:	4619      	mov	r1, r3
 8007b64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b66:	f000 f8e8 	bl	8007d3a <USBH_GetNextDesc>
 8007b6a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6e:	785b      	ldrb	r3, [r3, #1]
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	d146      	bne.n	8007c02 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007b74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b78:	221a      	movs	r2, #26
 8007b7a:	fb02 f303 	mul.w	r3, r2, r3
 8007b7e:	3308      	adds	r3, #8
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	4413      	add	r3, r2
 8007b84:	3302      	adds	r3, #2
 8007b86:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8007b88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b8a:	69f8      	ldr	r0, [r7, #28]
 8007b8c:	f000 f846 	bl	8007c1c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007b9a:	e022      	b.n	8007be2 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8007b9c:	f107 0316 	add.w	r3, r7, #22
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ba4:	f000 f8c9 	bl	8007d3a <USBH_GetNextDesc>
 8007ba8:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	785b      	ldrb	r3, [r3, #1]
 8007bae:	2b05      	cmp	r3, #5
 8007bb0:	d117      	bne.n	8007be2 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007bb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bb6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007bba:	3201      	adds	r2, #1
 8007bbc:	00d2      	lsls	r2, r2, #3
 8007bbe:	211a      	movs	r1, #26
 8007bc0:	fb01 f303 	mul.w	r3, r1, r3
 8007bc4:	4413      	add	r3, r2
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	4413      	add	r3, r2
 8007bcc:	3304      	adds	r3, #4
 8007bce:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8007bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bd2:	69b8      	ldr	r0, [r7, #24]
 8007bd4:	f000 f851 	bl	8007c7a <USBH_ParseEPDesc>
            ep_ix++;
 8007bd8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007bdc:	3301      	adds	r3, #1
 8007bde:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	791b      	ldrb	r3, [r3, #4]
 8007be6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d204      	bcs.n	8007bf8 <USBH_ParseCfgDesc+0x120>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	885a      	ldrh	r2, [r3, #2]
 8007bf2:	8afb      	ldrh	r3, [r7, #22]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d8d1      	bhi.n	8007b9c <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007bf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d804      	bhi.n	8007c14 <USBH_ParseCfgDesc+0x13c>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	885a      	ldrh	r2, [r3, #2]
 8007c0e:	8afb      	ldrh	r3, [r7, #22]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d8a4      	bhi.n	8007b5e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007c14:	bf00      	nop
 8007c16:	3728      	adds	r7, #40	; 0x28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	781a      	ldrb	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	785a      	ldrb	r2, [r3, #1]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	789a      	ldrb	r2, [r3, #2]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	78da      	ldrb	r2, [r3, #3]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	791a      	ldrb	r2, [r3, #4]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	795a      	ldrb	r2, [r3, #5]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	799a      	ldrb	r2, [r3, #6]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	79da      	ldrb	r2, [r3, #7]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	7a1a      	ldrb	r2, [r3, #8]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	721a      	strb	r2, [r3, #8]
}
 8007c6e:	bf00      	nop
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b083      	sub	sp, #12
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	781a      	ldrb	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	785a      	ldrb	r2, [r3, #1]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	789a      	ldrb	r2, [r3, #2]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	78da      	ldrb	r2, [r3, #3]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	3305      	adds	r3, #5
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	021b      	lsls	r3, r3, #8
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	799a      	ldrb	r2, [r3, #6]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	719a      	strb	r2, [r3, #6]
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b03      	cmp	r3, #3
 8007cea:	d120      	bne.n	8007d2e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	1e9a      	subs	r2, r3, #2
 8007cf2:	88fb      	ldrh	r3, [r7, #6]
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	bf28      	it	cs
 8007cf8:	4613      	movcs	r3, r2
 8007cfa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	3302      	adds	r3, #2
 8007d00:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007d02:	2300      	movs	r3, #0
 8007d04:	82fb      	strh	r3, [r7, #22]
 8007d06:	e00b      	b.n	8007d20 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007d08:	8afb      	ldrh	r3, [r7, #22]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	781a      	ldrb	r2, [r3, #0]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	3301      	adds	r3, #1
 8007d18:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007d1a:	8afb      	ldrh	r3, [r7, #22]
 8007d1c:	3302      	adds	r3, #2
 8007d1e:	82fb      	strh	r3, [r7, #22]
 8007d20:	8afa      	ldrh	r2, [r7, #22]
 8007d22:	8abb      	ldrh	r3, [r7, #20]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d3ef      	bcc.n	8007d08 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	701a      	strb	r2, [r3, #0]
  }
}
 8007d2e:	bf00      	nop
 8007d30:	371c      	adds	r7, #28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b085      	sub	sp, #20
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	881a      	ldrh	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	4413      	add	r3, r2
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4413      	add	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8007d62:	68fb      	ldr	r3, [r7, #12]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	789b      	ldrb	r3, [r3, #2]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d002      	beq.n	8007d90 <USBH_CtlReq+0x20>
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d00f      	beq.n	8007dae <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8007d8e:	e034      	b.n	8007dfa <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	88fa      	ldrh	r2, [r7, #6]
 8007d9a:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2202      	movs	r2, #2
 8007da6:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8007da8:	2301      	movs	r3, #1
 8007daa:	75fb      	strb	r3, [r7, #23]
    break;
 8007dac:	e025      	b.n	8007dfa <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f000 f828 	bl	8007e04 <USBH_HandleControl>
 8007db4:	4603      	mov	r3, r0
 8007db6:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d108      	bne.n	8007dd0 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	75fb      	strb	r3, [r7, #23]
    break;
 8007dce:	e013      	b.n	8007df8 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8007dd0:	7dfb      	ldrb	r3, [r7, #23]
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d108      	bne.n	8007de8 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007de2:	2303      	movs	r3, #3
 8007de4:	75fb      	strb	r3, [r7, #23]
    break;
 8007de6:	e007      	b.n	8007df8 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d104      	bne.n	8007df8 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2201      	movs	r2, #1
 8007df2:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007df4:	2302      	movs	r3, #2
 8007df6:	75fb      	strb	r3, [r7, #23]
    break;
 8007df8:	bf00      	nop
  }
  return status;
 8007dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3718      	adds	r7, #24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af02      	add	r7, sp, #8
 8007e0a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e10:	2300      	movs	r3, #0
 8007e12:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	7e1b      	ldrb	r3, [r3, #24]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	2b0a      	cmp	r3, #10
 8007e1c:	f200 814c 	bhi.w	80080b8 <USBH_HandleControl+0x2b4>
 8007e20:	a201      	add	r2, pc, #4	; (adr r2, 8007e28 <USBH_HandleControl+0x24>)
 8007e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e26:	bf00      	nop
 8007e28:	08007e55 	.word	0x08007e55
 8007e2c:	08007e6f 	.word	0x08007e6f
 8007e30:	08007ed9 	.word	0x08007ed9
 8007e34:	08007eff 	.word	0x08007eff
 8007e38:	08007f37 	.word	0x08007f37
 8007e3c:	08007f63 	.word	0x08007f63
 8007e40:	08007fb5 	.word	0x08007fb5
 8007e44:	08007fd7 	.word	0x08007fd7
 8007e48:	08008013 	.word	0x08008013
 8007e4c:	0800803b 	.word	0x0800803b
 8007e50:	08008079 	.word	0x08008079
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f103 0110 	add.w	r1, r3, #16
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	795b      	ldrb	r3, [r3, #5]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f939 	bl	80080d8 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2202      	movs	r2, #2
 8007e6a:	761a      	strb	r2, [r3, #24]
    break;
 8007e6c:	e12f      	b.n	80080ce <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	795b      	ldrb	r3, [r3, #5]
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f001 fb19 	bl	80094ac <USBH_LL_GetURBState>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8007e7e:	7bbb      	ldrb	r3, [r7, #14]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d11e      	bne.n	8007ec2 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	7c1b      	ldrb	r3, [r3, #16]
 8007e88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e8c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	8adb      	ldrh	r3, [r3, #22]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00a      	beq.n	8007eac <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8007e96:	7b7b      	ldrb	r3, [r7, #13]
 8007e98:	2b80      	cmp	r3, #128	; 0x80
 8007e9a:	d103      	bne.n	8007ea4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2203      	movs	r2, #3
 8007ea0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007ea2:	e10b      	b.n	80080bc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2205      	movs	r2, #5
 8007ea8:	761a      	strb	r2, [r3, #24]
    break;
 8007eaa:	e107      	b.n	80080bc <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8007eac:	7b7b      	ldrb	r3, [r7, #13]
 8007eae:	2b80      	cmp	r3, #128	; 0x80
 8007eb0:	d103      	bne.n	8007eba <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2209      	movs	r2, #9
 8007eb6:	761a      	strb	r2, [r3, #24]
    break;
 8007eb8:	e100      	b.n	80080bc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2207      	movs	r2, #7
 8007ebe:	761a      	strb	r2, [r3, #24]
    break;
 8007ec0:	e0fc      	b.n	80080bc <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	2b04      	cmp	r3, #4
 8007ec6:	d003      	beq.n	8007ed0 <USBH_HandleControl+0xcc>
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	f040 80f6 	bne.w	80080bc <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	220b      	movs	r2, #11
 8007ed4:	761a      	strb	r2, [r3, #24]
    break;
 8007ed6:	e0f1      	b.n	80080bc <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6899      	ldr	r1, [r3, #8]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	899a      	ldrh	r2, [r3, #12]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	791b      	ldrb	r3, [r3, #4]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f930 	bl	8008156 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2204      	movs	r2, #4
 8007efa:	761a      	strb	r2, [r3, #24]
    break;
 8007efc:	e0e7      	b.n	80080ce <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	791b      	ldrb	r3, [r3, #4]
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f001 fad1 	bl	80094ac <USBH_LL_GetURBState>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d102      	bne.n	8007f1a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2209      	movs	r2, #9
 8007f18:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
 8007f1c:	2b05      	cmp	r3, #5
 8007f1e:	d102      	bne.n	8007f26 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007f20:	2303      	movs	r3, #3
 8007f22:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007f24:	e0cc      	b.n	80080c0 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
 8007f28:	2b04      	cmp	r3, #4
 8007f2a:	f040 80c9 	bne.w	80080c0 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	220b      	movs	r2, #11
 8007f32:	761a      	strb	r2, [r3, #24]
    break;
 8007f34:	e0c4      	b.n	80080c0 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6899      	ldr	r1, [r3, #8]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	899a      	ldrh	r2, [r3, #12]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	7958      	ldrb	r0, [r3, #5]
 8007f42:	2301      	movs	r3, #1
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	4603      	mov	r3, r0
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f8df 	bl	800810c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2206      	movs	r2, #6
 8007f5e:	761a      	strb	r2, [r3, #24]
    break;
 8007f60:	e0b5      	b.n	80080ce <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	795b      	ldrb	r3, [r3, #5]
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f001 fa9f 	bl	80094ac <USBH_LL_GetURBState>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007f72:	7bbb      	ldrb	r3, [r7, #14]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d103      	bne.n	8007f80 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2207      	movs	r2, #7
 8007f7c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007f7e:	e0a1      	b.n	80080c4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	2b05      	cmp	r3, #5
 8007f84:	d105      	bne.n	8007f92 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	220c      	movs	r2, #12
 8007f8a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f90:	e098      	b.n	80080c4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007f92:	7bbb      	ldrb	r3, [r7, #14]
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d103      	bne.n	8007fa0 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2205      	movs	r2, #5
 8007f9c:	761a      	strb	r2, [r3, #24]
    break;
 8007f9e:	e091      	b.n	80080c4 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8007fa0:	7bbb      	ldrb	r3, [r7, #14]
 8007fa2:	2b04      	cmp	r3, #4
 8007fa4:	f040 808e 	bne.w	80080c4 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	220b      	movs	r2, #11
 8007fac:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8007fae:	2302      	movs	r3, #2
 8007fb0:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb2:	e087      	b.n	80080c4 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	791b      	ldrb	r3, [r3, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	2100      	movs	r1, #0
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f8ca 	bl	8008156 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2208      	movs	r2, #8
 8007fd2:	761a      	strb	r2, [r3, #24]

    break;
 8007fd4:	e07b      	b.n	80080ce <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	791b      	ldrb	r3, [r3, #4]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f001 fa65 	bl	80094ac <USBH_LL_GetURBState>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d105      	bne.n	8007ff8 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	220d      	movs	r2, #13
 8007ff0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007ff6:	e067      	b.n	80080c8 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007ff8:	7bbb      	ldrb	r3, [r7, #14]
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	d103      	bne.n	8008006 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	220b      	movs	r2, #11
 8008002:	761a      	strb	r2, [r3, #24]
    break;
 8008004:	e060      	b.n	80080c8 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8008006:	7bbb      	ldrb	r3, [r7, #14]
 8008008:	2b05      	cmp	r3, #5
 800800a:	d15d      	bne.n	80080c8 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 800800c:	2303      	movs	r3, #3
 800800e:	73fb      	strb	r3, [r7, #15]
    break;
 8008010:	e05a      	b.n	80080c8 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	795a      	ldrb	r2, [r3, #5]
 8008016:	2301      	movs	r3, #1
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	4613      	mov	r3, r2
 800801c:	2200      	movs	r2, #0
 800801e:	2100      	movs	r1, #0
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f873 	bl	800810c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800802c:	b29a      	uxth	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	220a      	movs	r2, #10
 8008036:	761a      	strb	r2, [r3, #24]
    break;
 8008038:	e049      	b.n	80080ce <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	795b      	ldrb	r3, [r3, #5]
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 fa33 	bl	80094ac <USBH_LL_GetURBState>
 8008046:	4603      	mov	r3, r0
 8008048:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d105      	bne.n	800805c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	220d      	movs	r2, #13
 8008058:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800805a:	e037      	b.n	80080cc <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	2b02      	cmp	r3, #2
 8008060:	d103      	bne.n	800806a <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2209      	movs	r2, #9
 8008066:	761a      	strb	r2, [r3, #24]
    break;
 8008068:	e030      	b.n	80080cc <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800806a:	7bbb      	ldrb	r3, [r7, #14]
 800806c:	2b04      	cmp	r3, #4
 800806e:	d12d      	bne.n	80080cc <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	220b      	movs	r2, #11
 8008074:	761a      	strb	r2, [r3, #24]
    break;
 8008076:	e029      	b.n	80080cc <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	7e5b      	ldrb	r3, [r3, #25]
 800807c:	3301      	adds	r3, #1
 800807e:	b2da      	uxtb	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	765a      	strb	r2, [r3, #25]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	7e5b      	ldrb	r3, [r3, #25]
 8008088:	2b02      	cmp	r3, #2
 800808a:	d809      	bhi.n	80080a0 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f001 f920 	bl	80092d2 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800809e:	e016      	b.n	80080ce <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80080a6:	2106      	movs	r1, #6
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80080b2:	2302      	movs	r3, #2
 80080b4:	73fb      	strb	r3, [r7, #15]
    break;
 80080b6:	e00a      	b.n	80080ce <USBH_HandleControl+0x2ca>

  default:
    break;
 80080b8:	bf00      	nop
 80080ba:	e008      	b.n	80080ce <USBH_HandleControl+0x2ca>
    break;
 80080bc:	bf00      	nop
 80080be:	e006      	b.n	80080ce <USBH_HandleControl+0x2ca>
    break;
 80080c0:	bf00      	nop
 80080c2:	e004      	b.n	80080ce <USBH_HandleControl+0x2ca>
    break;
 80080c4:	bf00      	nop
 80080c6:	e002      	b.n	80080ce <USBH_HandleControl+0x2ca>
    break;
 80080c8:	bf00      	nop
 80080ca:	e000      	b.n	80080ce <USBH_HandleControl+0x2ca>
    break;
 80080cc:	bf00      	nop
  }
  return status;
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b088      	sub	sp, #32
 80080dc:	af04      	add	r7, sp, #16
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	4613      	mov	r3, r2
 80080e4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80080e6:	79f9      	ldrb	r1, [r7, #7]
 80080e8:	2300      	movs	r3, #0
 80080ea:	9303      	str	r3, [sp, #12]
 80080ec:	2308      	movs	r3, #8
 80080ee:	9302      	str	r3, [sp, #8]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	9301      	str	r3, [sp, #4]
 80080f4:	2300      	movs	r3, #0
 80080f6:	9300      	str	r3, [sp, #0]
 80080f8:	2300      	movs	r3, #0
 80080fa:	2200      	movs	r2, #0
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f001 f9a4 	bl	800944a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b088      	sub	sp, #32
 8008110:	af04      	add	r7, sp, #16
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	4611      	mov	r1, r2
 8008118:	461a      	mov	r2, r3
 800811a:	460b      	mov	r3, r1
 800811c:	80fb      	strh	r3, [r7, #6]
 800811e:	4613      	mov	r3, r2
 8008120:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800812c:	2300      	movs	r3, #0
 800812e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008130:	7979      	ldrb	r1, [r7, #5]
 8008132:	7e3b      	ldrb	r3, [r7, #24]
 8008134:	9303      	str	r3, [sp, #12]
 8008136:	88fb      	ldrh	r3, [r7, #6]
 8008138:	9302      	str	r3, [sp, #8]
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	2301      	movs	r3, #1
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	2300      	movs	r3, #0
 8008144:	2200      	movs	r2, #0
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f001 f97f 	bl	800944a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b088      	sub	sp, #32
 800815a:	af04      	add	r7, sp, #16
 800815c:	60f8      	str	r0, [r7, #12]
 800815e:	60b9      	str	r1, [r7, #8]
 8008160:	4611      	mov	r1, r2
 8008162:	461a      	mov	r2, r3
 8008164:	460b      	mov	r3, r1
 8008166:	80fb      	strh	r3, [r7, #6]
 8008168:	4613      	mov	r3, r2
 800816a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800816c:	7979      	ldrb	r1, [r7, #5]
 800816e:	2300      	movs	r3, #0
 8008170:	9303      	str	r3, [sp, #12]
 8008172:	88fb      	ldrh	r3, [r7, #6]
 8008174:	9302      	str	r3, [sp, #8]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	9301      	str	r3, [sp, #4]
 800817a:	2301      	movs	r3, #1
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	2300      	movs	r3, #0
 8008180:	2201      	movs	r2, #1
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f001 f961 	bl	800944a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008188:	2300      	movs	r3, #0

}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b088      	sub	sp, #32
 8008196:	af04      	add	r7, sp, #16
 8008198:	60f8      	str	r0, [r7, #12]
 800819a:	60b9      	str	r1, [r7, #8]
 800819c:	4611      	mov	r1, r2
 800819e:	461a      	mov	r2, r3
 80081a0:	460b      	mov	r3, r1
 80081a2:	80fb      	strh	r3, [r7, #6]
 80081a4:	4613      	mov	r3, r2
 80081a6:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80081b6:	7979      	ldrb	r1, [r7, #5]
 80081b8:	7e3b      	ldrb	r3, [r7, #24]
 80081ba:	9303      	str	r3, [sp, #12]
 80081bc:	88fb      	ldrh	r3, [r7, #6]
 80081be:	9302      	str	r3, [sp, #8]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	9301      	str	r3, [sp, #4]
 80081c4:	2301      	movs	r3, #1
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	2302      	movs	r3, #2
 80081ca:	2200      	movs	r2, #0
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f001 f93c 	bl	800944a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b088      	sub	sp, #32
 80081e0:	af04      	add	r7, sp, #16
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	4611      	mov	r1, r2
 80081e8:	461a      	mov	r2, r3
 80081ea:	460b      	mov	r3, r1
 80081ec:	80fb      	strh	r3, [r7, #6]
 80081ee:	4613      	mov	r3, r2
 80081f0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80081f2:	7979      	ldrb	r1, [r7, #5]
 80081f4:	2300      	movs	r3, #0
 80081f6:	9303      	str	r3, [sp, #12]
 80081f8:	88fb      	ldrh	r3, [r7, #6]
 80081fa:	9302      	str	r3, [sp, #8]
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	9301      	str	r3, [sp, #4]
 8008200:	2301      	movs	r3, #1
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	2302      	movs	r3, #2
 8008206:	2201      	movs	r2, #1
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f001 f91e 	bl	800944a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af04      	add	r7, sp, #16
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	4608      	mov	r0, r1
 8008222:	4611      	mov	r1, r2
 8008224:	461a      	mov	r2, r3
 8008226:	4603      	mov	r3, r0
 8008228:	70fb      	strb	r3, [r7, #3]
 800822a:	460b      	mov	r3, r1
 800822c:	70bb      	strb	r3, [r7, #2]
 800822e:	4613      	mov	r3, r2
 8008230:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8008232:	7878      	ldrb	r0, [r7, #1]
 8008234:	78ba      	ldrb	r2, [r7, #2]
 8008236:	78f9      	ldrb	r1, [r7, #3]
 8008238:	8b3b      	ldrh	r3, [r7, #24]
 800823a:	9302      	str	r3, [sp, #8]
 800823c:	7d3b      	ldrb	r3, [r7, #20]
 800823e:	9301      	str	r3, [sp, #4]
 8008240:	7c3b      	ldrb	r3, [r7, #16]
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	4603      	mov	r3, r0
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f001 f8b1 	bl	80093ae <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800824c:	2300      	movs	r3, #0

}
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b082      	sub	sp, #8
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	460b      	mov	r3, r1
 8008260:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8008262:	78fb      	ldrb	r3, [r7, #3]
 8008264:	4619      	mov	r1, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f001 f8d0 	bl	800940c <USBH_LL_ClosePipe>

  return USBH_OK;
 800826c:	2300      	movs	r3, #0

}
 800826e:	4618      	mov	r0, r3
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f831 	bl	80082ea <USBH_GetFreePipe>
 8008288:	4603      	mov	r3, r0
 800828a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800828c:	89fb      	ldrh	r3, [r7, #14]
 800828e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008292:	4293      	cmp	r3, r2
 8008294:	d007      	beq.n	80082a6 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8008296:	78fb      	ldrb	r3, [r7, #3]
 8008298:	89fa      	ldrh	r2, [r7, #14]
 800829a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	32e0      	adds	r2, #224	; 0xe0
 80082a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 80082a6:	89fb      	ldrh	r3, [r7, #14]
 80082a8:	b2db      	uxtb	r3, r3
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b083      	sub	sp, #12
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	460b      	mov	r3, r1
 80082bc:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80082be:	78fb      	ldrb	r3, [r7, #3]
 80082c0:	2b0a      	cmp	r3, #10
 80082c2:	d80b      	bhi.n	80082dc <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80082c4:	78fa      	ldrb	r2, [r7, #3]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	32e0      	adds	r2, #224	; 0xe0
 80082ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ce:	78fa      	ldrb	r2, [r7, #3]
 80082d0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	32e0      	adds	r2, #224	; 0xe0
 80082d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b085      	sub	sp, #20
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80082f6:	2300      	movs	r3, #0
 80082f8:	73fb      	strb	r3, [r7, #15]
 80082fa:	e00e      	b.n	800831a <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80082fc:	7bfa      	ldrb	r2, [r7, #15]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	32e0      	adds	r2, #224	; 0xe0
 8008302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d102      	bne.n	8008314 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	b29b      	uxth	r3, r3
 8008312:	e007      	b.n	8008324 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	3301      	adds	r3, #1
 8008318:	73fb      	strb	r3, [r7, #15]
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	2b0a      	cmp	r3, #10
 800831e:	d9ed      	bls.n	80082fc <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8008320:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008324:	4618      	mov	r0, r3
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008332:	b097      	sub	sp, #92	; 0x5c
 8008334:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008336:	f7f8 f923 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800833a:	f000 f8c5 	bl	80084c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800833e:	f000 fac9 	bl	80088d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8008342:	f000 f993 	bl	800866c <MX_I2C1_Init>
  MX_I2S3_Init();
 8008346:	f000 f9bf 	bl	80086c8 <MX_I2S3_Init>
  MX_SPI1_Init();
 800834a:	f000 f9ed 	bl	8008728 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800834e:	f000 fe55 	bl	8008ffc <MX_USB_HOST_Init>
  MX_TIM4_Init();
 8008352:	f000 fa1f 	bl	8008794 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8008356:	f000 fa93 	bl	8008880 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800835a:	f000 f935 	bl	80085c8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800835e:	210c      	movs	r1, #12
 8008360:	4850      	ldr	r0, [pc, #320]	; (80084a4 <main+0x174>)
 8008362:	f7fc f8db 	bl	800451c <HAL_TIM_PWM_Start>
  char buffer[20];
  char buf[20];
  int i;
  int isLock = 0;
 8008366:	2300      	movs	r3, #0
 8008368:	657b      	str	r3, [r7, #84]	; 0x54
  long long slam[]={-5000,-5000,-5000};
 800836a:	4b4f      	ldr	r3, [pc, #316]	; (80084a8 <main+0x178>)
 800836c:	463c      	mov	r4, r7
 800836e:	461d      	mov	r5, r3
 8008370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008374:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008378:	e884 0003 	stmia.w	r4, {r0, r1}
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800837c:	f000 fe64 	bl	8009048 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_Delay(10);
 8008380:	200a      	movs	r0, #10
 8008382:	f7f8 f96f 	bl	8000664 <HAL_Delay>
    i = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8008386:	2102      	movs	r1, #2
 8008388:	4848      	ldr	r0, [pc, #288]	; (80084ac <main+0x17c>)
 800838a:	f7f8 fff3 	bl	8001374 <HAL_GPIO_ReadPin>
 800838e:	4603      	mov	r3, r0
 8008390:	653b      	str	r3, [r7, #80]	; 0x50
    sprintf(buffer, "%d \r\n", i);
 8008392:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008396:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008398:	4945      	ldr	r1, [pc, #276]	; (80084b0 <main+0x180>)
 800839a:	4618      	mov	r0, r3
 800839c:	f001 fa5a 	bl	8009854 <siprintf>
    HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 80083a0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80083a4:	f04f 33ff 	mov.w	r3, #4294967295
 80083a8:	2214      	movs	r2, #20
 80083aa:	4842      	ldr	r0, [pc, #264]	; (80084b4 <main+0x184>)
 80083ac:	f7fc fe4b 	bl	8005046 <HAL_UART_Transmit>

    if (i==0 && isLock == 0) {
 80083b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d107      	bne.n	80083c6 <main+0x96>
 80083b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d104      	bne.n	80083c6 <main+0x96>
    	TIM4->CCR4 = 12; // Lock
 80083bc:	4b3e      	ldr	r3, [pc, #248]	; (80084b8 <main+0x188>)
 80083be:	220c      	movs	r2, #12
 80083c0:	641a      	str	r2, [r3, #64]	; 0x40
    	isLock = 1;
 80083c2:	2301      	movs	r3, #1
 80083c4:	657b      	str	r3, [r7, #84]	; 0x54
    }

    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) && isLock==1) {
 80083c6:	2101      	movs	r1, #1
 80083c8:	4838      	ldr	r0, [pc, #224]	; (80084ac <main+0x17c>)
 80083ca:	f7f8 ffd3 	bl	8001374 <HAL_GPIO_ReadPin>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00b      	beq.n	80083ec <main+0xbc>
 80083d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d108      	bne.n	80083ec <main+0xbc>
    	TIM4->CCR4 = 22; // Unlock
 80083da:	4b37      	ldr	r3, [pc, #220]	; (80084b8 <main+0x188>)
 80083dc:	2216      	movs	r2, #22
 80083de:	641a      	str	r2, [r3, #64]	; 0x40
    	isLock = 0;
 80083e0:	2300      	movs	r3, #0
 80083e2:	657b      	str	r3, [r7, #84]	; 0x54
    	HAL_Delay(2000);
 80083e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80083e8:	f7f8 f93c 	bl	8000664 <HAL_Delay>
    }


    HAL_ADC_Start(&hadc1);
 80083ec:	4833      	ldr	r0, [pc, #204]	; (80084bc <main+0x18c>)
 80083ee:	f7f8 f99f 	bl	8000730 <HAL_ADC_Start>
       while(HAL_ADC_PollForConversion(&hadc1,0) != HAL_OK);
 80083f2:	bf00      	nop
 80083f4:	2100      	movs	r1, #0
 80083f6:	4831      	ldr	r0, [pc, #196]	; (80084bc <main+0x18c>)
 80083f8:	f7f8 fa60 	bl	80008bc <HAL_ADC_PollForConversion>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1f8      	bne.n	80083f4 <main+0xc4>
       int x=HAL_ADC_GetValue(&hadc1);
 8008402:	482e      	ldr	r0, [pc, #184]	; (80084bc <main+0x18c>)
 8008404:	f7f8 fade 	bl	80009c4 <HAL_ADC_GetValue>
 8008408:	4603      	mov	r3, r0
 800840a:	64fb      	str	r3, [r7, #76]	; 0x4c
       long long nowTime=HAL_GetTick();
 800840c:	f7f8 f91e 	bl	800064c <HAL_GetTick>
 8008410:	4603      	mov	r3, r0
 8008412:	f04f 0400 	mov.w	r4, #0
 8008416:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
       if(x>100) {
 800841a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800841c:	2b64      	cmp	r3, #100	; 0x64
 800841e:	ddad      	ble.n	800837c <main+0x4c>
        slam[0]=slam[1];
 8008420:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008424:	e9c7 3400 	strd	r3, r4, [r7]
        slam[1]=slam[2];
 8008428:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800842c:	e9c7 3402 	strd	r3, r4, [r7, #8]
        slam[2]=nowTime;
 8008430:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8008434:	e9c7 3404 	strd	r3, r4, [r7, #16]
        if(slam[2]-slam[0]<=3000) {
 8008438:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800843c:	e9d7 5600 	ldrd	r5, r6, [r7]
 8008440:	460b      	mov	r3, r1
 8008442:	4614      	mov	r4, r2
 8008444:	1b5b      	subs	r3, r3, r5
 8008446:	eb64 0406 	sbc.w	r4, r4, r6
 800844a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800844e:	f04f 0200 	mov.w	r2, #0
 8008452:	4299      	cmp	r1, r3
 8008454:	eb72 0304 	sbcs.w	r3, r2, r4
 8008458:	db90      	blt.n	800837c <main+0x4c>
         slam[0]=-5000;
 800845a:	4b19      	ldr	r3, [pc, #100]	; (80084c0 <main+0x190>)
 800845c:	f04f 34ff 	mov.w	r4, #4294967295
 8008460:	e9c7 3400 	strd	r3, r4, [r7]
         slam[1]=-5000;
 8008464:	4b16      	ldr	r3, [pc, #88]	; (80084c0 <main+0x190>)
 8008466:	f04f 34ff 	mov.w	r4, #4294967295
 800846a:	e9c7 3402 	strd	r3, r4, [r7, #8]
         slam[2]=-5000;
 800846e:	4b14      	ldr	r3, [pc, #80]	; (80084c0 <main+0x190>)
 8008470:	f04f 34ff 	mov.w	r4, #4294967295
 8008474:	e9c7 3404 	strd	r3, r4, [r7, #16]
         sprintf(buf, "--- > %d < ---", x);
 8008478:	f107 0318 	add.w	r3, r7, #24
 800847c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800847e:	4911      	ldr	r1, [pc, #68]	; (80084c4 <main+0x194>)
 8008480:	4618      	mov	r0, r3
 8008482:	f001 f9e7 	bl	8009854 <siprintf>
         HAL_UART_Transmit(&huart2, buf, strlen(buf), 1000);
 8008486:	f107 0318 	add.w	r3, r7, #24
 800848a:	4618      	mov	r0, r3
 800848c:	f7f7 fea0 	bl	80001d0 <strlen>
 8008490:	4603      	mov	r3, r0
 8008492:	b29a      	uxth	r2, r3
 8008494:	f107 0118 	add.w	r1, r7, #24
 8008498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800849c:	4805      	ldr	r0, [pc, #20]	; (80084b4 <main+0x184>)
 800849e:	f7fc fdd2 	bl	8005046 <HAL_UART_Transmit>
  {
 80084a2:	e76b      	b.n	800837c <main+0x4c>
 80084a4:	200000c4 	.word	0x200000c4
 80084a8:	08009f28 	.word	0x08009f28
 80084ac:	40020000 	.word	0x40020000
 80084b0:	08009f10 	.word	0x08009f10
 80084b4:	200001f8 	.word	0x200001f8
 80084b8:	40000800 	.word	0x40000800
 80084bc:	20000158 	.word	0x20000158
 80084c0:	ffffec78 	.word	0xffffec78
 80084c4:	08009f18 	.word	0x08009f18

080084c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b098      	sub	sp, #96	; 0x60
 80084cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80084ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084d2:	2230      	movs	r2, #48	; 0x30
 80084d4:	2100      	movs	r1, #0
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 f8fc 	bl	80096d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80084dc:	f107 031c 	add.w	r3, r7, #28
 80084e0:	2200      	movs	r2, #0
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	605a      	str	r2, [r3, #4]
 80084e6:	609a      	str	r2, [r3, #8]
 80084e8:	60da      	str	r2, [r3, #12]
 80084ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80084ec:	f107 030c 	add.w	r3, r7, #12
 80084f0:	2200      	movs	r2, #0
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	605a      	str	r2, [r3, #4]
 80084f6:	609a      	str	r2, [r3, #8]
 80084f8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80084fa:	2300      	movs	r3, #0
 80084fc:	60bb      	str	r3, [r7, #8]
 80084fe:	4b30      	ldr	r3, [pc, #192]	; (80085c0 <SystemClock_Config+0xf8>)
 8008500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008502:	4a2f      	ldr	r2, [pc, #188]	; (80085c0 <SystemClock_Config+0xf8>)
 8008504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008508:	6413      	str	r3, [r2, #64]	; 0x40
 800850a:	4b2d      	ldr	r3, [pc, #180]	; (80085c0 <SystemClock_Config+0xf8>)
 800850c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008512:	60bb      	str	r3, [r7, #8]
 8008514:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008516:	2300      	movs	r3, #0
 8008518:	607b      	str	r3, [r7, #4]
 800851a:	4b2a      	ldr	r3, [pc, #168]	; (80085c4 <SystemClock_Config+0xfc>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a29      	ldr	r2, [pc, #164]	; (80085c4 <SystemClock_Config+0xfc>)
 8008520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008524:	6013      	str	r3, [r2, #0]
 8008526:	4b27      	ldr	r3, [pc, #156]	; (80085c4 <SystemClock_Config+0xfc>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800852e:	607b      	str	r3, [r7, #4]
 8008530:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008532:	2301      	movs	r3, #1
 8008534:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800853a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800853c:	2302      	movs	r3, #2
 800853e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008540:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008544:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008546:	2304      	movs	r3, #4
 8008548:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 800854a:	2360      	movs	r3, #96	; 0x60
 800854c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800854e:	2306      	movs	r3, #6
 8008550:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008552:	2304      	movs	r3, #4
 8008554:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008556:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800855a:	4618      	mov	r0, r3
 800855c:	f7fb f97a 	bl	8003854 <HAL_RCC_OscConfig>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8008566:	f000 fabf 	bl	8008ae8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800856a:	230f      	movs	r3, #15
 800856c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800856e:	2302      	movs	r3, #2
 8008570:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008572:	2300      	movs	r3, #0
 8008574:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008576:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800857a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800857c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008580:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008582:	f107 031c 	add.w	r3, r7, #28
 8008586:	2101      	movs	r1, #1
 8008588:	4618      	mov	r0, r3
 800858a:	f7fb fbd3 	bl	8003d34 <HAL_RCC_ClockConfig>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8008594:	f000 faa8 	bl	8008ae8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8008598:	2301      	movs	r3, #1
 800859a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800859c:	2332      	movs	r3, #50	; 0x32
 800859e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80085a0:	2302      	movs	r3, #2
 80085a2:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80085a4:	f107 030c 	add.w	r3, r7, #12
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7fb fdb5 	bl	8004118 <HAL_RCCEx_PeriphCLKConfig>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80085b4:	f000 fa98 	bl	8008ae8 <Error_Handler>
  }
}
 80085b8:	bf00      	nop
 80085ba:	3760      	adds	r7, #96	; 0x60
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	40023800 	.word	0x40023800
 80085c4:	40007000 	.word	0x40007000

080085c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80085ce:	463b      	mov	r3, r7
 80085d0:	2200      	movs	r2, #0
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	605a      	str	r2, [r3, #4]
 80085d6:	609a      	str	r2, [r3, #8]
 80085d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80085da:	4b21      	ldr	r3, [pc, #132]	; (8008660 <MX_ADC1_Init+0x98>)
 80085dc:	4a21      	ldr	r2, [pc, #132]	; (8008664 <MX_ADC1_Init+0x9c>)
 80085de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80085e0:	4b1f      	ldr	r3, [pc, #124]	; (8008660 <MX_ADC1_Init+0x98>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80085e6:	4b1e      	ldr	r3, [pc, #120]	; (8008660 <MX_ADC1_Init+0x98>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80085ec:	4b1c      	ldr	r3, [pc, #112]	; (8008660 <MX_ADC1_Init+0x98>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80085f2:	4b1b      	ldr	r3, [pc, #108]	; (8008660 <MX_ADC1_Init+0x98>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80085f8:	4b19      	ldr	r3, [pc, #100]	; (8008660 <MX_ADC1_Init+0x98>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008600:	4b17      	ldr	r3, [pc, #92]	; (8008660 <MX_ADC1_Init+0x98>)
 8008602:	2200      	movs	r2, #0
 8008604:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008606:	4b16      	ldr	r3, [pc, #88]	; (8008660 <MX_ADC1_Init+0x98>)
 8008608:	4a17      	ldr	r2, [pc, #92]	; (8008668 <MX_ADC1_Init+0xa0>)
 800860a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800860c:	4b14      	ldr	r3, [pc, #80]	; (8008660 <MX_ADC1_Init+0x98>)
 800860e:	2200      	movs	r2, #0
 8008610:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8008612:	4b13      	ldr	r3, [pc, #76]	; (8008660 <MX_ADC1_Init+0x98>)
 8008614:	2201      	movs	r2, #1
 8008616:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8008618:	4b11      	ldr	r3, [pc, #68]	; (8008660 <MX_ADC1_Init+0x98>)
 800861a:	2200      	movs	r2, #0
 800861c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008620:	4b0f      	ldr	r3, [pc, #60]	; (8008660 <MX_ADC1_Init+0x98>)
 8008622:	2201      	movs	r2, #1
 8008624:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008626:	480e      	ldr	r0, [pc, #56]	; (8008660 <MX_ADC1_Init+0x98>)
 8008628:	f7f8 f83e 	bl	80006a8 <HAL_ADC_Init>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8008632:	f000 fa59 	bl	8008ae8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8008636:	2308      	movs	r3, #8
 8008638:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800863a:	2301      	movs	r3, #1
 800863c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800863e:	2300      	movs	r3, #0
 8008640:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008642:	463b      	mov	r3, r7
 8008644:	4619      	mov	r1, r3
 8008646:	4806      	ldr	r0, [pc, #24]	; (8008660 <MX_ADC1_Init+0x98>)
 8008648:	f7f8 f9ca 	bl	80009e0 <HAL_ADC_ConfigChannel>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8008652:	f000 fa49 	bl	8008ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008656:	bf00      	nop
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	20000158 	.word	0x20000158
 8008664:	40012000 	.word	0x40012000
 8008668:	0f000001 	.word	0x0f000001

0800866c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008670:	4b12      	ldr	r3, [pc, #72]	; (80086bc <MX_I2C1_Init+0x50>)
 8008672:	4a13      	ldr	r2, [pc, #76]	; (80086c0 <MX_I2C1_Init+0x54>)
 8008674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8008676:	4b11      	ldr	r3, [pc, #68]	; (80086bc <MX_I2C1_Init+0x50>)
 8008678:	4a12      	ldr	r2, [pc, #72]	; (80086c4 <MX_I2C1_Init+0x58>)
 800867a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800867c:	4b0f      	ldr	r3, [pc, #60]	; (80086bc <MX_I2C1_Init+0x50>)
 800867e:	2200      	movs	r2, #0
 8008680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008682:	4b0e      	ldr	r3, [pc, #56]	; (80086bc <MX_I2C1_Init+0x50>)
 8008684:	2200      	movs	r2, #0
 8008686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008688:	4b0c      	ldr	r3, [pc, #48]	; (80086bc <MX_I2C1_Init+0x50>)
 800868a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800868e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008690:	4b0a      	ldr	r3, [pc, #40]	; (80086bc <MX_I2C1_Init+0x50>)
 8008692:	2200      	movs	r2, #0
 8008694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008696:	4b09      	ldr	r3, [pc, #36]	; (80086bc <MX_I2C1_Init+0x50>)
 8008698:	2200      	movs	r2, #0
 800869a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800869c:	4b07      	ldr	r3, [pc, #28]	; (80086bc <MX_I2C1_Init+0x50>)
 800869e:	2200      	movs	r2, #0
 80086a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80086a2:	4b06      	ldr	r3, [pc, #24]	; (80086bc <MX_I2C1_Init+0x50>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80086a8:	4804      	ldr	r0, [pc, #16]	; (80086bc <MX_I2C1_Init+0x50>)
 80086aa:	f7fa fafb 	bl	8002ca4 <HAL_I2C_Init>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80086b4:	f000 fa18 	bl	8008ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80086b8:	bf00      	nop
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	20000104 	.word	0x20000104
 80086c0:	40005400 	.word	0x40005400
 80086c4:	000186a0 	.word	0x000186a0

080086c8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80086cc:	4b13      	ldr	r3, [pc, #76]	; (800871c <MX_I2S3_Init+0x54>)
 80086ce:	4a14      	ldr	r2, [pc, #80]	; (8008720 <MX_I2S3_Init+0x58>)
 80086d0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80086d2:	4b12      	ldr	r3, [pc, #72]	; (800871c <MX_I2S3_Init+0x54>)
 80086d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086d8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80086da:	4b10      	ldr	r3, [pc, #64]	; (800871c <MX_I2S3_Init+0x54>)
 80086dc:	2200      	movs	r2, #0
 80086de:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80086e0:	4b0e      	ldr	r3, [pc, #56]	; (800871c <MX_I2S3_Init+0x54>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80086e6:	4b0d      	ldr	r3, [pc, #52]	; (800871c <MX_I2S3_Init+0x54>)
 80086e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086ec:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80086ee:	4b0b      	ldr	r3, [pc, #44]	; (800871c <MX_I2S3_Init+0x54>)
 80086f0:	4a0c      	ldr	r2, [pc, #48]	; (8008724 <MX_I2S3_Init+0x5c>)
 80086f2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80086f4:	4b09      	ldr	r3, [pc, #36]	; (800871c <MX_I2S3_Init+0x54>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80086fa:	4b08      	ldr	r3, [pc, #32]	; (800871c <MX_I2S3_Init+0x54>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8008700:	4b06      	ldr	r3, [pc, #24]	; (800871c <MX_I2S3_Init+0x54>)
 8008702:	2200      	movs	r2, #0
 8008704:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8008706:	4805      	ldr	r0, [pc, #20]	; (800871c <MX_I2S3_Init+0x54>)
 8008708:	f7fa fc04 	bl	8002f14 <HAL_I2S_Init>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8008712:	f000 f9e9 	bl	8008ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8008716:	bf00      	nop
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	20000238 	.word	0x20000238
 8008720:	40003c00 	.word	0x40003c00
 8008724:	00017700 	.word	0x00017700

08008728 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800872c:	4b17      	ldr	r3, [pc, #92]	; (800878c <MX_SPI1_Init+0x64>)
 800872e:	4a18      	ldr	r2, [pc, #96]	; (8008790 <MX_SPI1_Init+0x68>)
 8008730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008732:	4b16      	ldr	r3, [pc, #88]	; (800878c <MX_SPI1_Init+0x64>)
 8008734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800873a:	4b14      	ldr	r3, [pc, #80]	; (800878c <MX_SPI1_Init+0x64>)
 800873c:	2200      	movs	r2, #0
 800873e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008740:	4b12      	ldr	r3, [pc, #72]	; (800878c <MX_SPI1_Init+0x64>)
 8008742:	2200      	movs	r2, #0
 8008744:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008746:	4b11      	ldr	r3, [pc, #68]	; (800878c <MX_SPI1_Init+0x64>)
 8008748:	2200      	movs	r2, #0
 800874a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800874c:	4b0f      	ldr	r3, [pc, #60]	; (800878c <MX_SPI1_Init+0x64>)
 800874e:	2200      	movs	r2, #0
 8008750:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008752:	4b0e      	ldr	r3, [pc, #56]	; (800878c <MX_SPI1_Init+0x64>)
 8008754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008758:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800875a:	4b0c      	ldr	r3, [pc, #48]	; (800878c <MX_SPI1_Init+0x64>)
 800875c:	2200      	movs	r2, #0
 800875e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008760:	4b0a      	ldr	r3, [pc, #40]	; (800878c <MX_SPI1_Init+0x64>)
 8008762:	2200      	movs	r2, #0
 8008764:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008766:	4b09      	ldr	r3, [pc, #36]	; (800878c <MX_SPI1_Init+0x64>)
 8008768:	2200      	movs	r2, #0
 800876a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800876c:	4b07      	ldr	r3, [pc, #28]	; (800878c <MX_SPI1_Init+0x64>)
 800876e:	2200      	movs	r2, #0
 8008770:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008772:	4b06      	ldr	r3, [pc, #24]	; (800878c <MX_SPI1_Init+0x64>)
 8008774:	220a      	movs	r2, #10
 8008776:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008778:	4804      	ldr	r0, [pc, #16]	; (800878c <MX_SPI1_Init+0x64>)
 800877a:	f7fb fe0b 	bl	8004394 <HAL_SPI_Init>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008784:	f000 f9b0 	bl	8008ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008788:	bf00      	nop
 800878a:	bd80      	pop	{r7, pc}
 800878c:	200001a0 	.word	0x200001a0
 8008790:	40013000 	.word	0x40013000

08008794 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b08e      	sub	sp, #56	; 0x38
 8008798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800879a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800879e:	2200      	movs	r2, #0
 80087a0:	601a      	str	r2, [r3, #0]
 80087a2:	605a      	str	r2, [r3, #4]
 80087a4:	609a      	str	r2, [r3, #8]
 80087a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80087a8:	f107 0320 	add.w	r3, r7, #32
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]
 80087b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80087b2:	1d3b      	adds	r3, r7, #4
 80087b4:	2200      	movs	r2, #0
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	605a      	str	r2, [r3, #4]
 80087ba:	609a      	str	r2, [r3, #8]
 80087bc:	60da      	str	r2, [r3, #12]
 80087be:	611a      	str	r2, [r3, #16]
 80087c0:	615a      	str	r2, [r3, #20]
 80087c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80087c4:	4b2c      	ldr	r3, [pc, #176]	; (8008878 <MX_TIM4_Init+0xe4>)
 80087c6:	4a2d      	ldr	r2, [pc, #180]	; (800887c <MX_TIM4_Init+0xe8>)
 80087c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1599;
 80087ca:	4b2b      	ldr	r3, [pc, #172]	; (8008878 <MX_TIM4_Init+0xe4>)
 80087cc:	f240 623f 	movw	r2, #1599	; 0x63f
 80087d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80087d2:	4b29      	ldr	r3, [pc, #164]	; (8008878 <MX_TIM4_Init+0xe4>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 80087d8:	4b27      	ldr	r3, [pc, #156]	; (8008878 <MX_TIM4_Init+0xe4>)
 80087da:	22c7      	movs	r2, #199	; 0xc7
 80087dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80087de:	4b26      	ldr	r3, [pc, #152]	; (8008878 <MX_TIM4_Init+0xe4>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80087e4:	4b24      	ldr	r3, [pc, #144]	; (8008878 <MX_TIM4_Init+0xe4>)
 80087e6:	2280      	movs	r2, #128	; 0x80
 80087e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80087ea:	4823      	ldr	r0, [pc, #140]	; (8008878 <MX_TIM4_Init+0xe4>)
 80087ec:	f7fb fe36 	bl	800445c <HAL_TIM_Base_Init>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d001      	beq.n	80087fa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80087f6:	f000 f977 	bl	8008ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80087fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008800:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008804:	4619      	mov	r1, r3
 8008806:	481c      	ldr	r0, [pc, #112]	; (8008878 <MX_TIM4_Init+0xe4>)
 8008808:	f7fb ff8c 	bl	8004724 <HAL_TIM_ConfigClockSource>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8008812:	f000 f969 	bl	8008ae8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8008816:	4818      	ldr	r0, [pc, #96]	; (8008878 <MX_TIM4_Init+0xe4>)
 8008818:	f7fb fe4b 	bl	80044b2 <HAL_TIM_PWM_Init>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8008822:	f000 f961 	bl	8008ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008826:	2300      	movs	r3, #0
 8008828:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800882a:	2300      	movs	r3, #0
 800882c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800882e:	f107 0320 	add.w	r3, r7, #32
 8008832:	4619      	mov	r1, r3
 8008834:	4810      	ldr	r0, [pc, #64]	; (8008878 <MX_TIM4_Init+0xe4>)
 8008836:	f7fc fb3d 	bl	8004eb4 <HAL_TIMEx_MasterConfigSynchronization>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d001      	beq.n	8008844 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8008840:	f000 f952 	bl	8008ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008844:	2360      	movs	r3, #96	; 0x60
 8008846:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 15;
 8008848:	230f      	movs	r3, #15
 800884a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800884c:	2300      	movs	r3, #0
 800884e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008850:	2300      	movs	r3, #0
 8008852:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008854:	1d3b      	adds	r3, r7, #4
 8008856:	220c      	movs	r2, #12
 8008858:	4619      	mov	r1, r3
 800885a:	4807      	ldr	r0, [pc, #28]	; (8008878 <MX_TIM4_Init+0xe4>)
 800885c:	f7fb fe9c 	bl	8004598 <HAL_TIM_PWM_ConfigChannel>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d001      	beq.n	800886a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8008866:	f000 f93f 	bl	8008ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800886a:	4803      	ldr	r0, [pc, #12]	; (8008878 <MX_TIM4_Init+0xe4>)
 800886c:	f000 faca 	bl	8008e04 <HAL_TIM_MspPostInit>

}
 8008870:	bf00      	nop
 8008872:	3738      	adds	r7, #56	; 0x38
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	200000c4 	.word	0x200000c4
 800887c:	40000800 	.word	0x40000800

08008880 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008884:	4b11      	ldr	r3, [pc, #68]	; (80088cc <MX_USART2_UART_Init+0x4c>)
 8008886:	4a12      	ldr	r2, [pc, #72]	; (80088d0 <MX_USART2_UART_Init+0x50>)
 8008888:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800888a:	4b10      	ldr	r3, [pc, #64]	; (80088cc <MX_USART2_UART_Init+0x4c>)
 800888c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008890:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008892:	4b0e      	ldr	r3, [pc, #56]	; (80088cc <MX_USART2_UART_Init+0x4c>)
 8008894:	2200      	movs	r2, #0
 8008896:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008898:	4b0c      	ldr	r3, [pc, #48]	; (80088cc <MX_USART2_UART_Init+0x4c>)
 800889a:	2200      	movs	r2, #0
 800889c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800889e:	4b0b      	ldr	r3, [pc, #44]	; (80088cc <MX_USART2_UART_Init+0x4c>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80088a4:	4b09      	ldr	r3, [pc, #36]	; (80088cc <MX_USART2_UART_Init+0x4c>)
 80088a6:	220c      	movs	r2, #12
 80088a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80088aa:	4b08      	ldr	r3, [pc, #32]	; (80088cc <MX_USART2_UART_Init+0x4c>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80088b0:	4b06      	ldr	r3, [pc, #24]	; (80088cc <MX_USART2_UART_Init+0x4c>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80088b6:	4805      	ldr	r0, [pc, #20]	; (80088cc <MX_USART2_UART_Init+0x4c>)
 80088b8:	f7fc fb78 	bl	8004fac <HAL_UART_Init>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80088c2:	f000 f911 	bl	8008ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80088c6:	bf00      	nop
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	200001f8 	.word	0x200001f8
 80088d0:	40004400 	.word	0x40004400

080088d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08c      	sub	sp, #48	; 0x30
 80088d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088da:	f107 031c 	add.w	r3, r7, #28
 80088de:	2200      	movs	r2, #0
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	605a      	str	r2, [r3, #4]
 80088e4:	609a      	str	r2, [r3, #8]
 80088e6:	60da      	str	r2, [r3, #12]
 80088e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80088ea:	2300      	movs	r3, #0
 80088ec:	61bb      	str	r3, [r7, #24]
 80088ee:	4b77      	ldr	r3, [pc, #476]	; (8008acc <MX_GPIO_Init+0x1f8>)
 80088f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f2:	4a76      	ldr	r2, [pc, #472]	; (8008acc <MX_GPIO_Init+0x1f8>)
 80088f4:	f043 0310 	orr.w	r3, r3, #16
 80088f8:	6313      	str	r3, [r2, #48]	; 0x30
 80088fa:	4b74      	ldr	r3, [pc, #464]	; (8008acc <MX_GPIO_Init+0x1f8>)
 80088fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fe:	f003 0310 	and.w	r3, r3, #16
 8008902:	61bb      	str	r3, [r7, #24]
 8008904:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008906:	2300      	movs	r3, #0
 8008908:	617b      	str	r3, [r7, #20]
 800890a:	4b70      	ldr	r3, [pc, #448]	; (8008acc <MX_GPIO_Init+0x1f8>)
 800890c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890e:	4a6f      	ldr	r2, [pc, #444]	; (8008acc <MX_GPIO_Init+0x1f8>)
 8008910:	f043 0304 	orr.w	r3, r3, #4
 8008914:	6313      	str	r3, [r2, #48]	; 0x30
 8008916:	4b6d      	ldr	r3, [pc, #436]	; (8008acc <MX_GPIO_Init+0x1f8>)
 8008918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891a:	f003 0304 	and.w	r3, r3, #4
 800891e:	617b      	str	r3, [r7, #20]
 8008920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008922:	2300      	movs	r3, #0
 8008924:	613b      	str	r3, [r7, #16]
 8008926:	4b69      	ldr	r3, [pc, #420]	; (8008acc <MX_GPIO_Init+0x1f8>)
 8008928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892a:	4a68      	ldr	r2, [pc, #416]	; (8008acc <MX_GPIO_Init+0x1f8>)
 800892c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008930:	6313      	str	r3, [r2, #48]	; 0x30
 8008932:	4b66      	ldr	r3, [pc, #408]	; (8008acc <MX_GPIO_Init+0x1f8>)
 8008934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800893a:	613b      	str	r3, [r7, #16]
 800893c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800893e:	2300      	movs	r3, #0
 8008940:	60fb      	str	r3, [r7, #12]
 8008942:	4b62      	ldr	r3, [pc, #392]	; (8008acc <MX_GPIO_Init+0x1f8>)
 8008944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008946:	4a61      	ldr	r2, [pc, #388]	; (8008acc <MX_GPIO_Init+0x1f8>)
 8008948:	f043 0301 	orr.w	r3, r3, #1
 800894c:	6313      	str	r3, [r2, #48]	; 0x30
 800894e:	4b5f      	ldr	r3, [pc, #380]	; (8008acc <MX_GPIO_Init+0x1f8>)
 8008950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008952:	f003 0301 	and.w	r3, r3, #1
 8008956:	60fb      	str	r3, [r7, #12]
 8008958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800895a:	2300      	movs	r3, #0
 800895c:	60bb      	str	r3, [r7, #8]
 800895e:	4b5b      	ldr	r3, [pc, #364]	; (8008acc <MX_GPIO_Init+0x1f8>)
 8008960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008962:	4a5a      	ldr	r2, [pc, #360]	; (8008acc <MX_GPIO_Init+0x1f8>)
 8008964:	f043 0302 	orr.w	r3, r3, #2
 8008968:	6313      	str	r3, [r2, #48]	; 0x30
 800896a:	4b58      	ldr	r3, [pc, #352]	; (8008acc <MX_GPIO_Init+0x1f8>)
 800896c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896e:	f003 0302 	and.w	r3, r3, #2
 8008972:	60bb      	str	r3, [r7, #8]
 8008974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008976:	2300      	movs	r3, #0
 8008978:	607b      	str	r3, [r7, #4]
 800897a:	4b54      	ldr	r3, [pc, #336]	; (8008acc <MX_GPIO_Init+0x1f8>)
 800897c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897e:	4a53      	ldr	r2, [pc, #332]	; (8008acc <MX_GPIO_Init+0x1f8>)
 8008980:	f043 0308 	orr.w	r3, r3, #8
 8008984:	6313      	str	r3, [r2, #48]	; 0x30
 8008986:	4b51      	ldr	r3, [pc, #324]	; (8008acc <MX_GPIO_Init+0x1f8>)
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898a:	f003 0308 	and.w	r3, r3, #8
 800898e:	607b      	str	r3, [r7, #4]
 8008990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8008992:	2200      	movs	r2, #0
 8008994:	2108      	movs	r1, #8
 8008996:	484e      	ldr	r0, [pc, #312]	; (8008ad0 <MX_GPIO_Init+0x1fc>)
 8008998:	f7f8 fd04 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800899c:	2201      	movs	r2, #1
 800899e:	2101      	movs	r1, #1
 80089a0:	484c      	ldr	r0, [pc, #304]	; (8008ad4 <MX_GPIO_Init+0x200>)
 80089a2:	f7f8 fcff 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 80089a6:	2200      	movs	r2, #0
 80089a8:	f247 0110 	movw	r1, #28688	; 0x7010
 80089ac:	484a      	ldr	r0, [pc, #296]	; (8008ad8 <MX_GPIO_Init+0x204>)
 80089ae:	f7f8 fcf9 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80089b2:	2308      	movs	r3, #8
 80089b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089b6:	2301      	movs	r3, #1
 80089b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ba:	2300      	movs	r3, #0
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089be:	2300      	movs	r3, #0
 80089c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80089c2:	f107 031c 	add.w	r3, r7, #28
 80089c6:	4619      	mov	r1, r3
 80089c8:	4841      	ldr	r0, [pc, #260]	; (8008ad0 <MX_GPIO_Init+0x1fc>)
 80089ca:	f7f8 fb39 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80089ce:	2301      	movs	r3, #1
 80089d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089d2:	2301      	movs	r3, #1
 80089d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089d6:	2300      	movs	r3, #0
 80089d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089da:	2300      	movs	r3, #0
 80089dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80089de:	f107 031c 	add.w	r3, r7, #28
 80089e2:	4619      	mov	r1, r3
 80089e4:	483b      	ldr	r0, [pc, #236]	; (8008ad4 <MX_GPIO_Init+0x200>)
 80089e6:	f7f8 fb2b 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80089ea:	2308      	movs	r3, #8
 80089ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089ee:	2302      	movs	r3, #2
 80089f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089f2:	2300      	movs	r3, #0
 80089f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089f6:	2300      	movs	r3, #0
 80089f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80089fa:	2305      	movs	r3, #5
 80089fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80089fe:	f107 031c 	add.w	r3, r7, #28
 8008a02:	4619      	mov	r1, r3
 8008a04:	4833      	ldr	r0, [pc, #204]	; (8008ad4 <MX_GPIO_Init+0x200>)
 8008a06:	f7f8 fb1b 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008a0e:	4b33      	ldr	r3, [pc, #204]	; (8008adc <MX_GPIO_Init+0x208>)
 8008a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a12:	2300      	movs	r3, #0
 8008a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008a16:	f107 031c 	add.w	r3, r7, #28
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	4830      	ldr	r0, [pc, #192]	; (8008ae0 <MX_GPIO_Init+0x20c>)
 8008a1e:	f7f8 fb0f 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008a22:	2302      	movs	r3, #2
 8008a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a26:	2300      	movs	r3, #0
 8008a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a2e:	f107 031c 	add.w	r3, r7, #28
 8008a32:	4619      	mov	r1, r3
 8008a34:	482a      	ldr	r0, [pc, #168]	; (8008ae0 <MX_GPIO_Init+0x20c>)
 8008a36:	f7f8 fb03 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8008a3a:	2304      	movs	r3, #4
 8008a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8008a46:	f107 031c 	add.w	r3, r7, #28
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	4825      	ldr	r0, [pc, #148]	; (8008ae4 <MX_GPIO_Init+0x210>)
 8008a4e:	f7f8 faf7 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8008a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a58:	2302      	movs	r3, #2
 8008a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a60:	2300      	movs	r3, #0
 8008a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008a64:	2305      	movs	r3, #5
 8008a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8008a68:	f107 031c 	add.w	r3, r7, #28
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	481d      	ldr	r0, [pc, #116]	; (8008ae4 <MX_GPIO_Init+0x210>)
 8008a70:	f7f8 fae6 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin;
 8008a74:	f247 0310 	movw	r3, #28688	; 0x7010
 8008a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a82:	2300      	movs	r3, #0
 8008a84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008a86:	f107 031c 	add.w	r3, r7, #28
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4812      	ldr	r0, [pc, #72]	; (8008ad8 <MX_GPIO_Init+0x204>)
 8008a8e:	f7f8 fad7 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8008a92:	2320      	movs	r3, #32
 8008a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a96:	2300      	movs	r3, #0
 8008a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008a9e:	f107 031c 	add.w	r3, r7, #28
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	480c      	ldr	r0, [pc, #48]	; (8008ad8 <MX_GPIO_Init+0x204>)
 8008aa6:	f7f8 facb 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8008aaa:	2302      	movs	r3, #2
 8008aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008aae:	4b0b      	ldr	r3, [pc, #44]	; (8008adc <MX_GPIO_Init+0x208>)
 8008ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8008ab6:	f107 031c 	add.w	r3, r7, #28
 8008aba:	4619      	mov	r1, r3
 8008abc:	4804      	ldr	r0, [pc, #16]	; (8008ad0 <MX_GPIO_Init+0x1fc>)
 8008abe:	f7f8 fabf 	bl	8001040 <HAL_GPIO_Init>

}
 8008ac2:	bf00      	nop
 8008ac4:	3730      	adds	r7, #48	; 0x30
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	40023800 	.word	0x40023800
 8008ad0:	40021000 	.word	0x40021000
 8008ad4:	40020800 	.word	0x40020800
 8008ad8:	40020c00 	.word	0x40020c00
 8008adc:	10120000 	.word	0x10120000
 8008ae0:	40020000 	.word	0x40020000
 8008ae4:	40020400 	.word	0x40020400

08008ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008aec:	bf00      	nop
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
	...

08008af8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008afe:	2300      	movs	r3, #0
 8008b00:	607b      	str	r3, [r7, #4]
 8008b02:	4b10      	ldr	r3, [pc, #64]	; (8008b44 <HAL_MspInit+0x4c>)
 8008b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b06:	4a0f      	ldr	r2, [pc, #60]	; (8008b44 <HAL_MspInit+0x4c>)
 8008b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8008b0e:	4b0d      	ldr	r3, [pc, #52]	; (8008b44 <HAL_MspInit+0x4c>)
 8008b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b16:	607b      	str	r3, [r7, #4]
 8008b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	603b      	str	r3, [r7, #0]
 8008b1e:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <HAL_MspInit+0x4c>)
 8008b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b22:	4a08      	ldr	r2, [pc, #32]	; (8008b44 <HAL_MspInit+0x4c>)
 8008b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b28:	6413      	str	r3, [r2, #64]	; 0x40
 8008b2a:	4b06      	ldr	r3, [pc, #24]	; (8008b44 <HAL_MspInit+0x4c>)
 8008b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b32:	603b      	str	r3, [r7, #0]
 8008b34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8008b36:	2007      	movs	r0, #7
 8008b38:	f7f8 fa40 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008b3c:	bf00      	nop
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	40023800 	.word	0x40023800

08008b48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b08a      	sub	sp, #40	; 0x28
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b50:	f107 0314 	add.w	r3, r7, #20
 8008b54:	2200      	movs	r2, #0
 8008b56:	601a      	str	r2, [r3, #0]
 8008b58:	605a      	str	r2, [r3, #4]
 8008b5a:	609a      	str	r2, [r3, #8]
 8008b5c:	60da      	str	r2, [r3, #12]
 8008b5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a17      	ldr	r2, [pc, #92]	; (8008bc4 <HAL_ADC_MspInit+0x7c>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d127      	bne.n	8008bba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	613b      	str	r3, [r7, #16]
 8008b6e:	4b16      	ldr	r3, [pc, #88]	; (8008bc8 <HAL_ADC_MspInit+0x80>)
 8008b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b72:	4a15      	ldr	r2, [pc, #84]	; (8008bc8 <HAL_ADC_MspInit+0x80>)
 8008b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b78:	6453      	str	r3, [r2, #68]	; 0x44
 8008b7a:	4b13      	ldr	r3, [pc, #76]	; (8008bc8 <HAL_ADC_MspInit+0x80>)
 8008b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b82:	613b      	str	r3, [r7, #16]
 8008b84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b86:	2300      	movs	r3, #0
 8008b88:	60fb      	str	r3, [r7, #12]
 8008b8a:	4b0f      	ldr	r3, [pc, #60]	; (8008bc8 <HAL_ADC_MspInit+0x80>)
 8008b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8e:	4a0e      	ldr	r2, [pc, #56]	; (8008bc8 <HAL_ADC_MspInit+0x80>)
 8008b90:	f043 0302 	orr.w	r3, r3, #2
 8008b94:	6313      	str	r3, [r2, #48]	; 0x30
 8008b96:	4b0c      	ldr	r3, [pc, #48]	; (8008bc8 <HAL_ADC_MspInit+0x80>)
 8008b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9a:	f003 0302 	and.w	r3, r3, #2
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008baa:	2300      	movs	r3, #0
 8008bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008bae:	f107 0314 	add.w	r3, r7, #20
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	4805      	ldr	r0, [pc, #20]	; (8008bcc <HAL_ADC_MspInit+0x84>)
 8008bb6:	f7f8 fa43 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008bba:	bf00      	nop
 8008bbc:	3728      	adds	r7, #40	; 0x28
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	40012000 	.word	0x40012000
 8008bc8:	40023800 	.word	0x40023800
 8008bcc:	40020400 	.word	0x40020400

08008bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b08a      	sub	sp, #40	; 0x28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bd8:	f107 0314 	add.w	r3, r7, #20
 8008bdc:	2200      	movs	r2, #0
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	605a      	str	r2, [r3, #4]
 8008be2:	609a      	str	r2, [r3, #8]
 8008be4:	60da      	str	r2, [r3, #12]
 8008be6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a19      	ldr	r2, [pc, #100]	; (8008c54 <HAL_I2C_MspInit+0x84>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d12c      	bne.n	8008c4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	613b      	str	r3, [r7, #16]
 8008bf6:	4b18      	ldr	r3, [pc, #96]	; (8008c58 <HAL_I2C_MspInit+0x88>)
 8008bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfa:	4a17      	ldr	r2, [pc, #92]	; (8008c58 <HAL_I2C_MspInit+0x88>)
 8008bfc:	f043 0302 	orr.w	r3, r3, #2
 8008c00:	6313      	str	r3, [r2, #48]	; 0x30
 8008c02:	4b15      	ldr	r3, [pc, #84]	; (8008c58 <HAL_I2C_MspInit+0x88>)
 8008c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c06:	f003 0302 	and.w	r3, r3, #2
 8008c0a:	613b      	str	r3, [r7, #16]
 8008c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8008c0e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8008c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008c14:	2312      	movs	r3, #18
 8008c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008c20:	2304      	movs	r3, #4
 8008c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c24:	f107 0314 	add.w	r3, r7, #20
 8008c28:	4619      	mov	r1, r3
 8008c2a:	480c      	ldr	r0, [pc, #48]	; (8008c5c <HAL_I2C_MspInit+0x8c>)
 8008c2c:	f7f8 fa08 	bl	8001040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008c30:	2300      	movs	r3, #0
 8008c32:	60fb      	str	r3, [r7, #12]
 8008c34:	4b08      	ldr	r3, [pc, #32]	; (8008c58 <HAL_I2C_MspInit+0x88>)
 8008c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c38:	4a07      	ldr	r2, [pc, #28]	; (8008c58 <HAL_I2C_MspInit+0x88>)
 8008c3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8008c40:	4b05      	ldr	r3, [pc, #20]	; (8008c58 <HAL_I2C_MspInit+0x88>)
 8008c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c48:	60fb      	str	r3, [r7, #12]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008c4c:	bf00      	nop
 8008c4e:	3728      	adds	r7, #40	; 0x28
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	40005400 	.word	0x40005400
 8008c58:	40023800 	.word	0x40023800
 8008c5c:	40020400 	.word	0x40020400

08008c60 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b08a      	sub	sp, #40	; 0x28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c68:	f107 0314 	add.w	r3, r7, #20
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	605a      	str	r2, [r3, #4]
 8008c72:	609a      	str	r2, [r3, #8]
 8008c74:	60da      	str	r2, [r3, #12]
 8008c76:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a28      	ldr	r2, [pc, #160]	; (8008d20 <HAL_I2S_MspInit+0xc0>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d14a      	bne.n	8008d18 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008c82:	2300      	movs	r3, #0
 8008c84:	613b      	str	r3, [r7, #16]
 8008c86:	4b27      	ldr	r3, [pc, #156]	; (8008d24 <HAL_I2S_MspInit+0xc4>)
 8008c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8a:	4a26      	ldr	r2, [pc, #152]	; (8008d24 <HAL_I2S_MspInit+0xc4>)
 8008c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c90:	6413      	str	r3, [r2, #64]	; 0x40
 8008c92:	4b24      	ldr	r3, [pc, #144]	; (8008d24 <HAL_I2S_MspInit+0xc4>)
 8008c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c9a:	613b      	str	r3, [r7, #16]
 8008c9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	60fb      	str	r3, [r7, #12]
 8008ca2:	4b20      	ldr	r3, [pc, #128]	; (8008d24 <HAL_I2S_MspInit+0xc4>)
 8008ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca6:	4a1f      	ldr	r2, [pc, #124]	; (8008d24 <HAL_I2S_MspInit+0xc4>)
 8008ca8:	f043 0301 	orr.w	r3, r3, #1
 8008cac:	6313      	str	r3, [r2, #48]	; 0x30
 8008cae:	4b1d      	ldr	r3, [pc, #116]	; (8008d24 <HAL_I2S_MspInit+0xc4>)
 8008cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60bb      	str	r3, [r7, #8]
 8008cbe:	4b19      	ldr	r3, [pc, #100]	; (8008d24 <HAL_I2S_MspInit+0xc4>)
 8008cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc2:	4a18      	ldr	r2, [pc, #96]	; (8008d24 <HAL_I2S_MspInit+0xc4>)
 8008cc4:	f043 0304 	orr.w	r3, r3, #4
 8008cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8008cca:	4b16      	ldr	r3, [pc, #88]	; (8008d24 <HAL_I2S_MspInit+0xc4>)
 8008ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cce:	f003 0304 	and.w	r3, r3, #4
 8008cd2:	60bb      	str	r3, [r7, #8]
 8008cd4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8008cd6:	2310      	movs	r3, #16
 8008cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cda:	2302      	movs	r3, #2
 8008cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008ce6:	2306      	movs	r3, #6
 8008ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8008cea:	f107 0314 	add.w	r3, r7, #20
 8008cee:	4619      	mov	r1, r3
 8008cf0:	480d      	ldr	r0, [pc, #52]	; (8008d28 <HAL_I2S_MspInit+0xc8>)
 8008cf2:	f7f8 f9a5 	bl	8001040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8008cf6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8008cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d00:	2300      	movs	r3, #0
 8008d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d04:	2300      	movs	r3, #0
 8008d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008d08:	2306      	movs	r3, #6
 8008d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d0c:	f107 0314 	add.w	r3, r7, #20
 8008d10:	4619      	mov	r1, r3
 8008d12:	4806      	ldr	r0, [pc, #24]	; (8008d2c <HAL_I2S_MspInit+0xcc>)
 8008d14:	f7f8 f994 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8008d18:	bf00      	nop
 8008d1a:	3728      	adds	r7, #40	; 0x28
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	40003c00 	.word	0x40003c00
 8008d24:	40023800 	.word	0x40023800
 8008d28:	40020000 	.word	0x40020000
 8008d2c:	40020800 	.word	0x40020800

08008d30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08a      	sub	sp, #40	; 0x28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d38:	f107 0314 	add.w	r3, r7, #20
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	605a      	str	r2, [r3, #4]
 8008d42:	609a      	str	r2, [r3, #8]
 8008d44:	60da      	str	r2, [r3, #12]
 8008d46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a19      	ldr	r2, [pc, #100]	; (8008db4 <HAL_SPI_MspInit+0x84>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d12b      	bne.n	8008daa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008d52:	2300      	movs	r3, #0
 8008d54:	613b      	str	r3, [r7, #16]
 8008d56:	4b18      	ldr	r3, [pc, #96]	; (8008db8 <HAL_SPI_MspInit+0x88>)
 8008d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d5a:	4a17      	ldr	r2, [pc, #92]	; (8008db8 <HAL_SPI_MspInit+0x88>)
 8008d5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d60:	6453      	str	r3, [r2, #68]	; 0x44
 8008d62:	4b15      	ldr	r3, [pc, #84]	; (8008db8 <HAL_SPI_MspInit+0x88>)
 8008d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d6a:	613b      	str	r3, [r7, #16]
 8008d6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60fb      	str	r3, [r7, #12]
 8008d72:	4b11      	ldr	r3, [pc, #68]	; (8008db8 <HAL_SPI_MspInit+0x88>)
 8008d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d76:	4a10      	ldr	r2, [pc, #64]	; (8008db8 <HAL_SPI_MspInit+0x88>)
 8008d78:	f043 0301 	orr.w	r3, r3, #1
 8008d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d7e:	4b0e      	ldr	r3, [pc, #56]	; (8008db8 <HAL_SPI_MspInit+0x88>)
 8008d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8008d8a:	23e0      	movs	r3, #224	; 0xe0
 8008d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d8e:	2302      	movs	r3, #2
 8008d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d92:	2300      	movs	r3, #0
 8008d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d96:	2300      	movs	r3, #0
 8008d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008d9a:	2305      	movs	r3, #5
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d9e:	f107 0314 	add.w	r3, r7, #20
 8008da2:	4619      	mov	r1, r3
 8008da4:	4805      	ldr	r0, [pc, #20]	; (8008dbc <HAL_SPI_MspInit+0x8c>)
 8008da6:	f7f8 f94b 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008daa:	bf00      	nop
 8008dac:	3728      	adds	r7, #40	; 0x28
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	40013000 	.word	0x40013000
 8008db8:	40023800 	.word	0x40023800
 8008dbc:	40020000 	.word	0x40020000

08008dc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a0b      	ldr	r2, [pc, #44]	; (8008dfc <HAL_TIM_Base_MspInit+0x3c>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d10d      	bne.n	8008dee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60fb      	str	r3, [r7, #12]
 8008dd6:	4b0a      	ldr	r3, [pc, #40]	; (8008e00 <HAL_TIM_Base_MspInit+0x40>)
 8008dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dda:	4a09      	ldr	r2, [pc, #36]	; (8008e00 <HAL_TIM_Base_MspInit+0x40>)
 8008ddc:	f043 0304 	orr.w	r3, r3, #4
 8008de0:	6413      	str	r3, [r2, #64]	; 0x40
 8008de2:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <HAL_TIM_Base_MspInit+0x40>)
 8008de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de6:	f003 0304 	and.w	r3, r3, #4
 8008dea:	60fb      	str	r3, [r7, #12]
 8008dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8008dee:	bf00      	nop
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	40000800 	.word	0x40000800
 8008e00:	40023800 	.word	0x40023800

08008e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b088      	sub	sp, #32
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e0c:	f107 030c 	add.w	r3, r7, #12
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	605a      	str	r2, [r3, #4]
 8008e16:	609a      	str	r2, [r3, #8]
 8008e18:	60da      	str	r2, [r3, #12]
 8008e1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a12      	ldr	r2, [pc, #72]	; (8008e6c <HAL_TIM_MspPostInit+0x68>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d11e      	bne.n	8008e64 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e26:	2300      	movs	r3, #0
 8008e28:	60bb      	str	r3, [r7, #8]
 8008e2a:	4b11      	ldr	r3, [pc, #68]	; (8008e70 <HAL_TIM_MspPostInit+0x6c>)
 8008e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2e:	4a10      	ldr	r2, [pc, #64]	; (8008e70 <HAL_TIM_MspPostInit+0x6c>)
 8008e30:	f043 0308 	orr.w	r3, r3, #8
 8008e34:	6313      	str	r3, [r2, #48]	; 0x30
 8008e36:	4b0e      	ldr	r3, [pc, #56]	; (8008e70 <HAL_TIM_MspPostInit+0x6c>)
 8008e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3a:	f003 0308 	and.w	r3, r3, #8
 8008e3e:	60bb      	str	r3, [r7, #8]
 8008e40:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8008e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e48:	2302      	movs	r3, #2
 8008e4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e50:	2300      	movs	r3, #0
 8008e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008e54:	2302      	movs	r3, #2
 8008e56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008e58:	f107 030c 	add.w	r3, r7, #12
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	4805      	ldr	r0, [pc, #20]	; (8008e74 <HAL_TIM_MspPostInit+0x70>)
 8008e60:	f7f8 f8ee 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8008e64:	bf00      	nop
 8008e66:	3720      	adds	r7, #32
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	40000800 	.word	0x40000800
 8008e70:	40023800 	.word	0x40023800
 8008e74:	40020c00 	.word	0x40020c00

08008e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08a      	sub	sp, #40	; 0x28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e80:	f107 0314 	add.w	r3, r7, #20
 8008e84:	2200      	movs	r2, #0
 8008e86:	601a      	str	r2, [r3, #0]
 8008e88:	605a      	str	r2, [r3, #4]
 8008e8a:	609a      	str	r2, [r3, #8]
 8008e8c:	60da      	str	r2, [r3, #12]
 8008e8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a19      	ldr	r2, [pc, #100]	; (8008efc <HAL_UART_MspInit+0x84>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d12b      	bne.n	8008ef2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	613b      	str	r3, [r7, #16]
 8008e9e:	4b18      	ldr	r3, [pc, #96]	; (8008f00 <HAL_UART_MspInit+0x88>)
 8008ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea2:	4a17      	ldr	r2, [pc, #92]	; (8008f00 <HAL_UART_MspInit+0x88>)
 8008ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8008eaa:	4b15      	ldr	r3, [pc, #84]	; (8008f00 <HAL_UART_MspInit+0x88>)
 8008eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eb2:	613b      	str	r3, [r7, #16]
 8008eb4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	60fb      	str	r3, [r7, #12]
 8008eba:	4b11      	ldr	r3, [pc, #68]	; (8008f00 <HAL_UART_MspInit+0x88>)
 8008ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebe:	4a10      	ldr	r2, [pc, #64]	; (8008f00 <HAL_UART_MspInit+0x88>)
 8008ec0:	f043 0301 	orr.w	r3, r3, #1
 8008ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8008ec6:	4b0e      	ldr	r3, [pc, #56]	; (8008f00 <HAL_UART_MspInit+0x88>)
 8008ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	60fb      	str	r3, [r7, #12]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008ed2:	230c      	movs	r3, #12
 8008ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008eda:	2301      	movs	r3, #1
 8008edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008ee2:	2307      	movs	r3, #7
 8008ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ee6:	f107 0314 	add.w	r3, r7, #20
 8008eea:	4619      	mov	r1, r3
 8008eec:	4805      	ldr	r0, [pc, #20]	; (8008f04 <HAL_UART_MspInit+0x8c>)
 8008eee:	f7f8 f8a7 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008ef2:	bf00      	nop
 8008ef4:	3728      	adds	r7, #40	; 0x28
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	40004400 	.word	0x40004400
 8008f00:	40023800 	.word	0x40023800
 8008f04:	40020000 	.word	0x40020000

08008f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008f0c:	bf00      	nop
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008f16:	b480      	push	{r7}
 8008f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008f1a:	e7fe      	b.n	8008f1a <HardFault_Handler+0x4>

08008f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008f20:	e7fe      	b.n	8008f20 <MemManage_Handler+0x4>

08008f22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008f22:	b480      	push	{r7}
 8008f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008f26:	e7fe      	b.n	8008f26 <BusFault_Handler+0x4>

08008f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008f2c:	e7fe      	b.n	8008f2c <UsageFault_Handler+0x4>

08008f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008f32:	bf00      	nop
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008f40:	bf00      	nop
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008f4e:	bf00      	nop
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008f5c:	f7f7 fb62 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008f60:	bf00      	nop
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8008f68:	4802      	ldr	r0, [pc, #8]	; (8008f74 <OTG_FS_IRQHandler+0x10>)
 8008f6a:	f7f8 fcb9 	bl	80018e0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008f6e:	bf00      	nop
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	2000064c 	.word	0x2000064c

08008f78 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008f80:	4b11      	ldr	r3, [pc, #68]	; (8008fc8 <_sbrk+0x50>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d102      	bne.n	8008f8e <_sbrk+0x16>
		heap_end = &end;
 8008f88:	4b0f      	ldr	r3, [pc, #60]	; (8008fc8 <_sbrk+0x50>)
 8008f8a:	4a10      	ldr	r2, [pc, #64]	; (8008fcc <_sbrk+0x54>)
 8008f8c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008f8e:	4b0e      	ldr	r3, [pc, #56]	; (8008fc8 <_sbrk+0x50>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008f94:	4b0c      	ldr	r3, [pc, #48]	; (8008fc8 <_sbrk+0x50>)
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	466a      	mov	r2, sp
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d907      	bls.n	8008fb2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008fa2:	f000 fb5d 	bl	8009660 <__errno>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	230c      	movs	r3, #12
 8008faa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008fac:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb0:	e006      	b.n	8008fc0 <_sbrk+0x48>
	}

	heap_end += incr;
 8008fb2:	4b05      	ldr	r3, [pc, #20]	; (8008fc8 <_sbrk+0x50>)
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4413      	add	r3, r2
 8008fba:	4a03      	ldr	r2, [pc, #12]	; (8008fc8 <_sbrk+0x50>)
 8008fbc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	200000b0 	.word	0x200000b0
 8008fcc:	20000918 	.word	0x20000918

08008fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008fd4:	4b08      	ldr	r3, [pc, #32]	; (8008ff8 <SystemInit+0x28>)
 8008fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fda:	4a07      	ldr	r2, [pc, #28]	; (8008ff8 <SystemInit+0x28>)
 8008fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008fe4:	4b04      	ldr	r3, [pc, #16]	; (8008ff8 <SystemInit+0x28>)
 8008fe6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008fea:	609a      	str	r2, [r3, #8]
#endif
}
 8008fec:	bf00      	nop
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	e000ed00 	.word	0xe000ed00

08008ffc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009000:	2201      	movs	r2, #1
 8009002:	490e      	ldr	r1, [pc, #56]	; (800903c <MX_USB_HOST_Init+0x40>)
 8009004:	480e      	ldr	r0, [pc, #56]	; (8009040 <MX_USB_HOST_Init+0x44>)
 8009006:	f7fd ff55 	bl	8006eb4 <USBH_Init>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d001      	beq.n	8009014 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009010:	f7ff fd6a 	bl	8008ae8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009014:	490b      	ldr	r1, [pc, #44]	; (8009044 <MX_USB_HOST_Init+0x48>)
 8009016:	480a      	ldr	r0, [pc, #40]	; (8009040 <MX_USB_HOST_Init+0x44>)
 8009018:	f7fd ffbf 	bl	8006f9a <USBH_RegisterClass>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d001      	beq.n	8009026 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009022:	f7ff fd61 	bl	8008ae8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009026:	4806      	ldr	r0, [pc, #24]	; (8009040 <MX_USB_HOST_Init+0x44>)
 8009028:	f7fe f844 	bl	80070b4 <USBH_Start>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009032:	f7ff fd59 	bl	8008ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009036:	bf00      	nop
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	0800905d 	.word	0x0800905d
 8009040:	20000280 	.word	0x20000280
 8009044:	20000008 	.word	0x20000008

08009048 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800904c:	4802      	ldr	r0, [pc, #8]	; (8009058 <MX_USB_HOST_Process+0x10>)
 800904e:	f7fe f841 	bl	80070d4 <USBH_Process>
}
 8009052:	bf00      	nop
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	20000280 	.word	0x20000280

0800905c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	460b      	mov	r3, r1
 8009066:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009068:	78fb      	ldrb	r3, [r7, #3]
 800906a:	3b01      	subs	r3, #1
 800906c:	2b04      	cmp	r3, #4
 800906e:	d819      	bhi.n	80090a4 <USBH_UserProcess+0x48>
 8009070:	a201      	add	r2, pc, #4	; (adr r2, 8009078 <USBH_UserProcess+0x1c>)
 8009072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009076:	bf00      	nop
 8009078:	080090a5 	.word	0x080090a5
 800907c:	08009095 	.word	0x08009095
 8009080:	080090a5 	.word	0x080090a5
 8009084:	0800909d 	.word	0x0800909d
 8009088:	0800908d 	.word	0x0800908d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800908c:	4b09      	ldr	r3, [pc, #36]	; (80090b4 <USBH_UserProcess+0x58>)
 800908e:	2203      	movs	r2, #3
 8009090:	701a      	strb	r2, [r3, #0]
  break;
 8009092:	e008      	b.n	80090a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009094:	4b07      	ldr	r3, [pc, #28]	; (80090b4 <USBH_UserProcess+0x58>)
 8009096:	2202      	movs	r2, #2
 8009098:	701a      	strb	r2, [r3, #0]
  break;
 800909a:	e004      	b.n	80090a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800909c:	4b05      	ldr	r3, [pc, #20]	; (80090b4 <USBH_UserProcess+0x58>)
 800909e:	2201      	movs	r2, #1
 80090a0:	701a      	strb	r2, [r3, #0]
  break;
 80090a2:	e000      	b.n	80090a6 <USBH_UserProcess+0x4a>

  default:
  break;
 80090a4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80090a6:	bf00      	nop
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	200000b4 	.word	0x200000b4

080090b8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08a      	sub	sp, #40	; 0x28
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090c0:	f107 0314 	add.w	r3, r7, #20
 80090c4:	2200      	movs	r2, #0
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	605a      	str	r2, [r3, #4]
 80090ca:	609a      	str	r2, [r3, #8]
 80090cc:	60da      	str	r2, [r3, #12]
 80090ce:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090d8:	d147      	bne.n	800916a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090da:	2300      	movs	r3, #0
 80090dc:	613b      	str	r3, [r7, #16]
 80090de:	4b25      	ldr	r3, [pc, #148]	; (8009174 <HAL_HCD_MspInit+0xbc>)
 80090e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e2:	4a24      	ldr	r2, [pc, #144]	; (8009174 <HAL_HCD_MspInit+0xbc>)
 80090e4:	f043 0301 	orr.w	r3, r3, #1
 80090e8:	6313      	str	r3, [r2, #48]	; 0x30
 80090ea:	4b22      	ldr	r3, [pc, #136]	; (8009174 <HAL_HCD_MspInit+0xbc>)
 80090ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	613b      	str	r3, [r7, #16]
 80090f4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80090f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80090fc:	2300      	movs	r3, #0
 80090fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009100:	2300      	movs	r3, #0
 8009102:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009104:	f107 0314 	add.w	r3, r7, #20
 8009108:	4619      	mov	r1, r3
 800910a:	481b      	ldr	r0, [pc, #108]	; (8009178 <HAL_HCD_MspInit+0xc0>)
 800910c:	f7f7 ff98 	bl	8001040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009110:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009116:	2302      	movs	r3, #2
 8009118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800911a:	2300      	movs	r3, #0
 800911c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800911e:	2300      	movs	r3, #0
 8009120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009122:	230a      	movs	r3, #10
 8009124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009126:	f107 0314 	add.w	r3, r7, #20
 800912a:	4619      	mov	r1, r3
 800912c:	4812      	ldr	r0, [pc, #72]	; (8009178 <HAL_HCD_MspInit+0xc0>)
 800912e:	f7f7 ff87 	bl	8001040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009132:	4b10      	ldr	r3, [pc, #64]	; (8009174 <HAL_HCD_MspInit+0xbc>)
 8009134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009136:	4a0f      	ldr	r2, [pc, #60]	; (8009174 <HAL_HCD_MspInit+0xbc>)
 8009138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800913c:	6353      	str	r3, [r2, #52]	; 0x34
 800913e:	2300      	movs	r3, #0
 8009140:	60fb      	str	r3, [r7, #12]
 8009142:	4b0c      	ldr	r3, [pc, #48]	; (8009174 <HAL_HCD_MspInit+0xbc>)
 8009144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009146:	4a0b      	ldr	r2, [pc, #44]	; (8009174 <HAL_HCD_MspInit+0xbc>)
 8009148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800914c:	6453      	str	r3, [r2, #68]	; 0x44
 800914e:	4b09      	ldr	r3, [pc, #36]	; (8009174 <HAL_HCD_MspInit+0xbc>)
 8009150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800915a:	2200      	movs	r2, #0
 800915c:	2100      	movs	r1, #0
 800915e:	2043      	movs	r0, #67	; 0x43
 8009160:	f7f7 ff37 	bl	8000fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009164:	2043      	movs	r0, #67	; 0x43
 8009166:	f7f7 ff50 	bl	800100a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800916a:	bf00      	nop
 800916c:	3728      	adds	r7, #40	; 0x28
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	40023800 	.word	0x40023800
 8009178:	40020000 	.word	0x40020000

0800917c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800918a:	4618      	mov	r0, r3
 800918c:	f7fe fa53 	bl	8007636 <USBH_LL_IncTimer>
}
 8009190:	bf00      	nop
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fe fa98 	bl	80076dc <USBH_LL_Connect>
}
 80091ac:	bf00      	nop
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fe fab0 	bl	8007728 <USBH_LL_Disconnect>
}
 80091c8:	bf00      	nop
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	70fb      	strb	r3, [r7, #3]
 80091dc:	4613      	mov	r3, r2
 80091de:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fe fa45 	bl	800768a <USBH_LL_PortEnabled>
} 
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009216:	4618      	mov	r0, r3
 8009218:	f7fe fa45 	bl	80076a6 <USBH_LL_PortDisabled>
} 
 800921c:	bf00      	nop
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8009232:	2b01      	cmp	r3, #1
 8009234:	d12a      	bne.n	800928c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009236:	4a18      	ldr	r2, [pc, #96]	; (8009298 <USBH_LL_Init+0x74>)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a15      	ldr	r2, [pc, #84]	; (8009298 <USBH_LL_Init+0x74>)
 8009242:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009246:	4b14      	ldr	r3, [pc, #80]	; (8009298 <USBH_LL_Init+0x74>)
 8009248:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800924c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800924e:	4b12      	ldr	r3, [pc, #72]	; (8009298 <USBH_LL_Init+0x74>)
 8009250:	2208      	movs	r2, #8
 8009252:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009254:	4b10      	ldr	r3, [pc, #64]	; (8009298 <USBH_LL_Init+0x74>)
 8009256:	2201      	movs	r2, #1
 8009258:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800925a:	4b0f      	ldr	r3, [pc, #60]	; (8009298 <USBH_LL_Init+0x74>)
 800925c:	2200      	movs	r2, #0
 800925e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009260:	4b0d      	ldr	r3, [pc, #52]	; (8009298 <USBH_LL_Init+0x74>)
 8009262:	2202      	movs	r2, #2
 8009264:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009266:	4b0c      	ldr	r3, [pc, #48]	; (8009298 <USBH_LL_Init+0x74>)
 8009268:	2200      	movs	r2, #0
 800926a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800926c:	480a      	ldr	r0, [pc, #40]	; (8009298 <USBH_LL_Init+0x74>)
 800926e:	f7f8 f8b2 	bl	80013d6 <HAL_HCD_Init>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009278:	f7ff fc36 	bl	8008ae8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800927c:	4806      	ldr	r0, [pc, #24]	; (8009298 <USBH_LL_Init+0x74>)
 800927e:	f7f8 fcad 	bl	8001bdc <HAL_HCD_GetCurrentFrame>
 8009282:	4603      	mov	r3, r0
 8009284:	4619      	mov	r1, r3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7fe f9c6 	bl	8007618 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	2000064c 	.word	0x2000064c

0800929c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7f8 fc1a 	bl	8001aec <HAL_HCD_Start>
 80092b8:	4603      	mov	r3, r0
 80092ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 f95c 	bl	800957c <USBH_Get_USB_Status>
 80092c4:	4603      	mov	r3, r0
 80092c6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80092c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b084      	sub	sp, #16
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7f8 fc22 	bl	8001b32 <HAL_HCD_Stop>
 80092ee:	4603      	mov	r3, r0
 80092f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80092f2:	7bfb      	ldrb	r3, [r7, #15]
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 f941 	bl	800957c <USBH_Get_USB_Status>
 80092fa:	4603      	mov	r3, r0
 80092fc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009310:	2301      	movs	r3, #1
 8009312:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800931a:	4618      	mov	r0, r3
 800931c:	f7f8 fc6c 	bl	8001bf8 <HAL_HCD_GetCurrentSpeed>
 8009320:	4603      	mov	r3, r0
 8009322:	2b01      	cmp	r3, #1
 8009324:	d007      	beq.n	8009336 <USBH_LL_GetSpeed+0x2e>
 8009326:	2b01      	cmp	r3, #1
 8009328:	d302      	bcc.n	8009330 <USBH_LL_GetSpeed+0x28>
 800932a:	2b02      	cmp	r3, #2
 800932c:	d006      	beq.n	800933c <USBH_LL_GetSpeed+0x34>
 800932e:	e008      	b.n	8009342 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009330:	2300      	movs	r3, #0
 8009332:	73fb      	strb	r3, [r7, #15]
    break;
 8009334:	e008      	b.n	8009348 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009336:	2301      	movs	r3, #1
 8009338:	73fb      	strb	r3, [r7, #15]
    break;
 800933a:	e005      	b.n	8009348 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800933c:	2302      	movs	r3, #2
 800933e:	73fb      	strb	r3, [r7, #15]
    break;
 8009340:	e002      	b.n	8009348 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8009342:	2301      	movs	r3, #1
 8009344:	73fb      	strb	r3, [r7, #15]
    break;
 8009346:	bf00      	nop
  }
  return  speed;
 8009348:	7bfb      	ldrb	r3, [r7, #15]
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b084      	sub	sp, #16
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009368:	4618      	mov	r0, r3
 800936a:	f7f8 fbff 	bl	8001b6c <HAL_HCD_ResetPort>
 800936e:	4603      	mov	r3, r0
 8009370:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8009372:	7bfb      	ldrb	r3, [r7, #15]
 8009374:	4618      	mov	r0, r3
 8009376:	f000 f901 	bl	800957c <USBH_Get_USB_Status>
 800937a:	4603      	mov	r3, r0
 800937c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800937e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	460b      	mov	r3, r1
 8009392:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800939a:	78fa      	ldrb	r2, [r7, #3]
 800939c:	4611      	mov	r1, r2
 800939e:	4618      	mov	r0, r3
 80093a0:	f7f8 fc07 	bl	8001bb2 <HAL_HCD_HC_GetXferCount>
 80093a4:	4603      	mov	r3, r0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80093ae:	b590      	push	{r4, r7, lr}
 80093b0:	b089      	sub	sp, #36	; 0x24
 80093b2:	af04      	add	r7, sp, #16
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	4608      	mov	r0, r1
 80093b8:	4611      	mov	r1, r2
 80093ba:	461a      	mov	r2, r3
 80093bc:	4603      	mov	r3, r0
 80093be:	70fb      	strb	r3, [r7, #3]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70bb      	strb	r3, [r7, #2]
 80093c4:	4613      	mov	r3, r2
 80093c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80093d6:	787c      	ldrb	r4, [r7, #1]
 80093d8:	78ba      	ldrb	r2, [r7, #2]
 80093da:	78f9      	ldrb	r1, [r7, #3]
 80093dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80093de:	9302      	str	r3, [sp, #8]
 80093e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80093e4:	9301      	str	r3, [sp, #4]
 80093e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	4623      	mov	r3, r4
 80093ee:	f7f8 f854 	bl	800149a <HAL_HCD_HC_Init>
 80093f2:	4603      	mov	r3, r0
 80093f4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f000 f8bf 	bl	800957c <USBH_Get_USB_Status>
 80093fe:	4603      	mov	r3, r0
 8009400:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009402:	7bbb      	ldrb	r3, [r7, #14]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	bd90      	pop	{r4, r7, pc}

0800940c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009426:	78fa      	ldrb	r2, [r7, #3]
 8009428:	4611      	mov	r1, r2
 800942a:	4618      	mov	r0, r3
 800942c:	f7f8 f8cd 	bl	80015ca <HAL_HCD_HC_Halt>
 8009430:	4603      	mov	r3, r0
 8009432:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009434:	7bfb      	ldrb	r3, [r7, #15]
 8009436:	4618      	mov	r0, r3
 8009438:	f000 f8a0 	bl	800957c <USBH_Get_USB_Status>
 800943c:	4603      	mov	r3, r0
 800943e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009440:	7bbb      	ldrb	r3, [r7, #14]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800944a:	b590      	push	{r4, r7, lr}
 800944c:	b089      	sub	sp, #36	; 0x24
 800944e:	af04      	add	r7, sp, #16
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	4608      	mov	r0, r1
 8009454:	4611      	mov	r1, r2
 8009456:	461a      	mov	r2, r3
 8009458:	4603      	mov	r3, r0
 800945a:	70fb      	strb	r3, [r7, #3]
 800945c:	460b      	mov	r3, r1
 800945e:	70bb      	strb	r3, [r7, #2]
 8009460:	4613      	mov	r3, r2
 8009462:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009468:	2300      	movs	r3, #0
 800946a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8009472:	787c      	ldrb	r4, [r7, #1]
 8009474:	78ba      	ldrb	r2, [r7, #2]
 8009476:	78f9      	ldrb	r1, [r7, #3]
 8009478:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800947c:	9303      	str	r3, [sp, #12]
 800947e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009480:	9302      	str	r3, [sp, #8]
 8009482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009484:	9301      	str	r3, [sp, #4]
 8009486:	f897 3020 	ldrb.w	r3, [r7, #32]
 800948a:	9300      	str	r3, [sp, #0]
 800948c:	4623      	mov	r3, r4
 800948e:	f7f8 f8bf 	bl	8001610 <HAL_HCD_HC_SubmitRequest>
 8009492:	4603      	mov	r3, r0
 8009494:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009496:	7bfb      	ldrb	r3, [r7, #15]
 8009498:	4618      	mov	r0, r3
 800949a:	f000 f86f 	bl	800957c <USBH_Get_USB_Status>
 800949e:	4603      	mov	r3, r0
 80094a0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80094a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd90      	pop	{r4, r7, pc}

080094ac <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	460b      	mov	r3, r1
 80094b6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80094be:	78fa      	ldrb	r2, [r7, #3]
 80094c0:	4611      	mov	r1, r2
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7f8 fb60 	bl	8001b88 <HAL_HCD_HC_GetURBState>
 80094c8:	4603      	mov	r3, r0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b082      	sub	sp, #8
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	460b      	mov	r3, r1
 80094dc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d103      	bne.n	80094f0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80094e8:	78fb      	ldrb	r3, [r7, #3]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 f872 	bl	80095d4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80094f0:	20c8      	movs	r0, #200	; 0xc8
 80094f2:	f7f7 f8b7 	bl	8000664 <HAL_Delay>
  return USBH_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	70fb      	strb	r3, [r7, #3]
 800950c:	4613      	mov	r3, r2
 800950e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009516:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009518:	78fa      	ldrb	r2, [r7, #3]
 800951a:	68f9      	ldr	r1, [r7, #12]
 800951c:	4613      	mov	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	00db      	lsls	r3, r3, #3
 8009524:	440b      	add	r3, r1
 8009526:	333b      	adds	r3, #59	; 0x3b
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00a      	beq.n	8009544 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800952e:	78fa      	ldrb	r2, [r7, #3]
 8009530:	68f9      	ldr	r1, [r7, #12]
 8009532:	4613      	mov	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	00db      	lsls	r3, r3, #3
 800953a:	440b      	add	r3, r1
 800953c:	3350      	adds	r3, #80	; 0x50
 800953e:	78ba      	ldrb	r2, [r7, #2]
 8009540:	701a      	strb	r2, [r3, #0]
 8009542:	e009      	b.n	8009558 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009544:	78fa      	ldrb	r2, [r7, #3]
 8009546:	68f9      	ldr	r1, [r7, #12]
 8009548:	4613      	mov	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	00db      	lsls	r3, r3, #3
 8009550:	440b      	add	r3, r1
 8009552:	3351      	adds	r3, #81	; 0x51
 8009554:	78ba      	ldrb	r2, [r7, #2]
 8009556:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b082      	sub	sp, #8
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7f7 f878 	bl	8000664 <HAL_Delay>
}
 8009574:	bf00      	nop
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	4603      	mov	r3, r0
 8009584:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009586:	2300      	movs	r3, #0
 8009588:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800958a:	79fb      	ldrb	r3, [r7, #7]
 800958c:	2b03      	cmp	r3, #3
 800958e:	d817      	bhi.n	80095c0 <USBH_Get_USB_Status+0x44>
 8009590:	a201      	add	r2, pc, #4	; (adr r2, 8009598 <USBH_Get_USB_Status+0x1c>)
 8009592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009596:	bf00      	nop
 8009598:	080095a9 	.word	0x080095a9
 800959c:	080095af 	.word	0x080095af
 80095a0:	080095b5 	.word	0x080095b5
 80095a4:	080095bb 	.word	0x080095bb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	73fb      	strb	r3, [r7, #15]
    break;
 80095ac:	e00b      	b.n	80095c6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80095ae:	2302      	movs	r3, #2
 80095b0:	73fb      	strb	r3, [r7, #15]
    break;
 80095b2:	e008      	b.n	80095c6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80095b4:	2301      	movs	r3, #1
 80095b6:	73fb      	strb	r3, [r7, #15]
    break;
 80095b8:	e005      	b.n	80095c6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80095ba:	2302      	movs	r3, #2
 80095bc:	73fb      	strb	r3, [r7, #15]
    break;
 80095be:	e002      	b.n	80095c6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80095c0:	2302      	movs	r3, #2
 80095c2:	73fb      	strb	r3, [r7, #15]
    break;
 80095c4:	bf00      	nop
  }
  return usb_status;
 80095c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	4603      	mov	r3, r0
 80095dc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80095de:	79fb      	ldrb	r3, [r7, #7]
 80095e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80095e2:	79fb      	ldrb	r3, [r7, #7]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d102      	bne.n	80095ee <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80095e8:	2301      	movs	r3, #1
 80095ea:	73fb      	strb	r3, [r7, #15]
 80095ec:	e001      	b.n	80095f2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80095ee:	2300      	movs	r3, #0
 80095f0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
 80095f4:	461a      	mov	r2, r3
 80095f6:	2101      	movs	r1, #1
 80095f8:	4803      	ldr	r0, [pc, #12]	; (8009608 <MX_DriverVbusFS+0x34>)
 80095fa:	f7f7 fed3 	bl	80013a4 <HAL_GPIO_WritePin>
}
 80095fe:	bf00      	nop
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	40020800 	.word	0x40020800

0800960c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800960c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009644 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009610:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009612:	e003      	b.n	800961c <LoopCopyDataInit>

08009614 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009614:	4b0c      	ldr	r3, [pc, #48]	; (8009648 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009616:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009618:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800961a:	3104      	adds	r1, #4

0800961c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800961c:	480b      	ldr	r0, [pc, #44]	; (800964c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800961e:	4b0c      	ldr	r3, [pc, #48]	; (8009650 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009620:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009622:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009624:	d3f6      	bcc.n	8009614 <CopyDataInit>
  ldr  r2, =_sbss
 8009626:	4a0b      	ldr	r2, [pc, #44]	; (8009654 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009628:	e002      	b.n	8009630 <LoopFillZerobss>

0800962a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800962a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800962c:	f842 3b04 	str.w	r3, [r2], #4

08009630 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009630:	4b09      	ldr	r3, [pc, #36]	; (8009658 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009632:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009634:	d3f9      	bcc.n	800962a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009636:	f7ff fccb 	bl	8008fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800963a:	f000 f817 	bl	800966c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800963e:	f7fe fe77 	bl	8008330 <main>
  bx  lr    
 8009642:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009644:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009648:	08009f9c 	.word	0x08009f9c
  ldr  r0, =_sdata
 800964c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009650:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8009654:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8009658:	20000914 	.word	0x20000914

0800965c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800965c:	e7fe      	b.n	800965c <ADC_IRQHandler>
	...

08009660 <__errno>:
 8009660:	4b01      	ldr	r3, [pc, #4]	; (8009668 <__errno+0x8>)
 8009662:	6818      	ldr	r0, [r3, #0]
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	2000002c 	.word	0x2000002c

0800966c <__libc_init_array>:
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	4e0d      	ldr	r6, [pc, #52]	; (80096a4 <__libc_init_array+0x38>)
 8009670:	4c0d      	ldr	r4, [pc, #52]	; (80096a8 <__libc_init_array+0x3c>)
 8009672:	1ba4      	subs	r4, r4, r6
 8009674:	10a4      	asrs	r4, r4, #2
 8009676:	2500      	movs	r5, #0
 8009678:	42a5      	cmp	r5, r4
 800967a:	d109      	bne.n	8009690 <__libc_init_array+0x24>
 800967c:	4e0b      	ldr	r6, [pc, #44]	; (80096ac <__libc_init_array+0x40>)
 800967e:	4c0c      	ldr	r4, [pc, #48]	; (80096b0 <__libc_init_array+0x44>)
 8009680:	f000 fc36 	bl	8009ef0 <_init>
 8009684:	1ba4      	subs	r4, r4, r6
 8009686:	10a4      	asrs	r4, r4, #2
 8009688:	2500      	movs	r5, #0
 800968a:	42a5      	cmp	r5, r4
 800968c:	d105      	bne.n	800969a <__libc_init_array+0x2e>
 800968e:	bd70      	pop	{r4, r5, r6, pc}
 8009690:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009694:	4798      	blx	r3
 8009696:	3501      	adds	r5, #1
 8009698:	e7ee      	b.n	8009678 <__libc_init_array+0xc>
 800969a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800969e:	4798      	blx	r3
 80096a0:	3501      	adds	r5, #1
 80096a2:	e7f2      	b.n	800968a <__libc_init_array+0x1e>
 80096a4:	08009f94 	.word	0x08009f94
 80096a8:	08009f94 	.word	0x08009f94
 80096ac:	08009f94 	.word	0x08009f94
 80096b0:	08009f98 	.word	0x08009f98

080096b4 <malloc>:
 80096b4:	4b02      	ldr	r3, [pc, #8]	; (80096c0 <malloc+0xc>)
 80096b6:	4601      	mov	r1, r0
 80096b8:	6818      	ldr	r0, [r3, #0]
 80096ba:	f000 b861 	b.w	8009780 <_malloc_r>
 80096be:	bf00      	nop
 80096c0:	2000002c 	.word	0x2000002c

080096c4 <free>:
 80096c4:	4b02      	ldr	r3, [pc, #8]	; (80096d0 <free+0xc>)
 80096c6:	4601      	mov	r1, r0
 80096c8:	6818      	ldr	r0, [r3, #0]
 80096ca:	f000 b80b 	b.w	80096e4 <_free_r>
 80096ce:	bf00      	nop
 80096d0:	2000002c 	.word	0x2000002c

080096d4 <memset>:
 80096d4:	4402      	add	r2, r0
 80096d6:	4603      	mov	r3, r0
 80096d8:	4293      	cmp	r3, r2
 80096da:	d100      	bne.n	80096de <memset+0xa>
 80096dc:	4770      	bx	lr
 80096de:	f803 1b01 	strb.w	r1, [r3], #1
 80096e2:	e7f9      	b.n	80096d8 <memset+0x4>

080096e4 <_free_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4605      	mov	r5, r0
 80096e8:	2900      	cmp	r1, #0
 80096ea:	d045      	beq.n	8009778 <_free_r+0x94>
 80096ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096f0:	1f0c      	subs	r4, r1, #4
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	bfb8      	it	lt
 80096f6:	18e4      	addlt	r4, r4, r3
 80096f8:	f000 f8cc 	bl	8009894 <__malloc_lock>
 80096fc:	4a1f      	ldr	r2, [pc, #124]	; (800977c <_free_r+0x98>)
 80096fe:	6813      	ldr	r3, [r2, #0]
 8009700:	4610      	mov	r0, r2
 8009702:	b933      	cbnz	r3, 8009712 <_free_r+0x2e>
 8009704:	6063      	str	r3, [r4, #4]
 8009706:	6014      	str	r4, [r2, #0]
 8009708:	4628      	mov	r0, r5
 800970a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800970e:	f000 b8c2 	b.w	8009896 <__malloc_unlock>
 8009712:	42a3      	cmp	r3, r4
 8009714:	d90c      	bls.n	8009730 <_free_r+0x4c>
 8009716:	6821      	ldr	r1, [r4, #0]
 8009718:	1862      	adds	r2, r4, r1
 800971a:	4293      	cmp	r3, r2
 800971c:	bf04      	itt	eq
 800971e:	681a      	ldreq	r2, [r3, #0]
 8009720:	685b      	ldreq	r3, [r3, #4]
 8009722:	6063      	str	r3, [r4, #4]
 8009724:	bf04      	itt	eq
 8009726:	1852      	addeq	r2, r2, r1
 8009728:	6022      	streq	r2, [r4, #0]
 800972a:	6004      	str	r4, [r0, #0]
 800972c:	e7ec      	b.n	8009708 <_free_r+0x24>
 800972e:	4613      	mov	r3, r2
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	b10a      	cbz	r2, 8009738 <_free_r+0x54>
 8009734:	42a2      	cmp	r2, r4
 8009736:	d9fa      	bls.n	800972e <_free_r+0x4a>
 8009738:	6819      	ldr	r1, [r3, #0]
 800973a:	1858      	adds	r0, r3, r1
 800973c:	42a0      	cmp	r0, r4
 800973e:	d10b      	bne.n	8009758 <_free_r+0x74>
 8009740:	6820      	ldr	r0, [r4, #0]
 8009742:	4401      	add	r1, r0
 8009744:	1858      	adds	r0, r3, r1
 8009746:	4282      	cmp	r2, r0
 8009748:	6019      	str	r1, [r3, #0]
 800974a:	d1dd      	bne.n	8009708 <_free_r+0x24>
 800974c:	6810      	ldr	r0, [r2, #0]
 800974e:	6852      	ldr	r2, [r2, #4]
 8009750:	605a      	str	r2, [r3, #4]
 8009752:	4401      	add	r1, r0
 8009754:	6019      	str	r1, [r3, #0]
 8009756:	e7d7      	b.n	8009708 <_free_r+0x24>
 8009758:	d902      	bls.n	8009760 <_free_r+0x7c>
 800975a:	230c      	movs	r3, #12
 800975c:	602b      	str	r3, [r5, #0]
 800975e:	e7d3      	b.n	8009708 <_free_r+0x24>
 8009760:	6820      	ldr	r0, [r4, #0]
 8009762:	1821      	adds	r1, r4, r0
 8009764:	428a      	cmp	r2, r1
 8009766:	bf04      	itt	eq
 8009768:	6811      	ldreq	r1, [r2, #0]
 800976a:	6852      	ldreq	r2, [r2, #4]
 800976c:	6062      	str	r2, [r4, #4]
 800976e:	bf04      	itt	eq
 8009770:	1809      	addeq	r1, r1, r0
 8009772:	6021      	streq	r1, [r4, #0]
 8009774:	605c      	str	r4, [r3, #4]
 8009776:	e7c7      	b.n	8009708 <_free_r+0x24>
 8009778:	bd38      	pop	{r3, r4, r5, pc}
 800977a:	bf00      	nop
 800977c:	200000b8 	.word	0x200000b8

08009780 <_malloc_r>:
 8009780:	b570      	push	{r4, r5, r6, lr}
 8009782:	1ccd      	adds	r5, r1, #3
 8009784:	f025 0503 	bic.w	r5, r5, #3
 8009788:	3508      	adds	r5, #8
 800978a:	2d0c      	cmp	r5, #12
 800978c:	bf38      	it	cc
 800978e:	250c      	movcc	r5, #12
 8009790:	2d00      	cmp	r5, #0
 8009792:	4606      	mov	r6, r0
 8009794:	db01      	blt.n	800979a <_malloc_r+0x1a>
 8009796:	42a9      	cmp	r1, r5
 8009798:	d903      	bls.n	80097a2 <_malloc_r+0x22>
 800979a:	230c      	movs	r3, #12
 800979c:	6033      	str	r3, [r6, #0]
 800979e:	2000      	movs	r0, #0
 80097a0:	bd70      	pop	{r4, r5, r6, pc}
 80097a2:	f000 f877 	bl	8009894 <__malloc_lock>
 80097a6:	4a21      	ldr	r2, [pc, #132]	; (800982c <_malloc_r+0xac>)
 80097a8:	6814      	ldr	r4, [r2, #0]
 80097aa:	4621      	mov	r1, r4
 80097ac:	b991      	cbnz	r1, 80097d4 <_malloc_r+0x54>
 80097ae:	4c20      	ldr	r4, [pc, #128]	; (8009830 <_malloc_r+0xb0>)
 80097b0:	6823      	ldr	r3, [r4, #0]
 80097b2:	b91b      	cbnz	r3, 80097bc <_malloc_r+0x3c>
 80097b4:	4630      	mov	r0, r6
 80097b6:	f000 f83d 	bl	8009834 <_sbrk_r>
 80097ba:	6020      	str	r0, [r4, #0]
 80097bc:	4629      	mov	r1, r5
 80097be:	4630      	mov	r0, r6
 80097c0:	f000 f838 	bl	8009834 <_sbrk_r>
 80097c4:	1c43      	adds	r3, r0, #1
 80097c6:	d124      	bne.n	8009812 <_malloc_r+0x92>
 80097c8:	230c      	movs	r3, #12
 80097ca:	6033      	str	r3, [r6, #0]
 80097cc:	4630      	mov	r0, r6
 80097ce:	f000 f862 	bl	8009896 <__malloc_unlock>
 80097d2:	e7e4      	b.n	800979e <_malloc_r+0x1e>
 80097d4:	680b      	ldr	r3, [r1, #0]
 80097d6:	1b5b      	subs	r3, r3, r5
 80097d8:	d418      	bmi.n	800980c <_malloc_r+0x8c>
 80097da:	2b0b      	cmp	r3, #11
 80097dc:	d90f      	bls.n	80097fe <_malloc_r+0x7e>
 80097de:	600b      	str	r3, [r1, #0]
 80097e0:	50cd      	str	r5, [r1, r3]
 80097e2:	18cc      	adds	r4, r1, r3
 80097e4:	4630      	mov	r0, r6
 80097e6:	f000 f856 	bl	8009896 <__malloc_unlock>
 80097ea:	f104 000b 	add.w	r0, r4, #11
 80097ee:	1d23      	adds	r3, r4, #4
 80097f0:	f020 0007 	bic.w	r0, r0, #7
 80097f4:	1ac3      	subs	r3, r0, r3
 80097f6:	d0d3      	beq.n	80097a0 <_malloc_r+0x20>
 80097f8:	425a      	negs	r2, r3
 80097fa:	50e2      	str	r2, [r4, r3]
 80097fc:	e7d0      	b.n	80097a0 <_malloc_r+0x20>
 80097fe:	428c      	cmp	r4, r1
 8009800:	684b      	ldr	r3, [r1, #4]
 8009802:	bf16      	itet	ne
 8009804:	6063      	strne	r3, [r4, #4]
 8009806:	6013      	streq	r3, [r2, #0]
 8009808:	460c      	movne	r4, r1
 800980a:	e7eb      	b.n	80097e4 <_malloc_r+0x64>
 800980c:	460c      	mov	r4, r1
 800980e:	6849      	ldr	r1, [r1, #4]
 8009810:	e7cc      	b.n	80097ac <_malloc_r+0x2c>
 8009812:	1cc4      	adds	r4, r0, #3
 8009814:	f024 0403 	bic.w	r4, r4, #3
 8009818:	42a0      	cmp	r0, r4
 800981a:	d005      	beq.n	8009828 <_malloc_r+0xa8>
 800981c:	1a21      	subs	r1, r4, r0
 800981e:	4630      	mov	r0, r6
 8009820:	f000 f808 	bl	8009834 <_sbrk_r>
 8009824:	3001      	adds	r0, #1
 8009826:	d0cf      	beq.n	80097c8 <_malloc_r+0x48>
 8009828:	6025      	str	r5, [r4, #0]
 800982a:	e7db      	b.n	80097e4 <_malloc_r+0x64>
 800982c:	200000b8 	.word	0x200000b8
 8009830:	200000bc 	.word	0x200000bc

08009834 <_sbrk_r>:
 8009834:	b538      	push	{r3, r4, r5, lr}
 8009836:	4c06      	ldr	r4, [pc, #24]	; (8009850 <_sbrk_r+0x1c>)
 8009838:	2300      	movs	r3, #0
 800983a:	4605      	mov	r5, r0
 800983c:	4608      	mov	r0, r1
 800983e:	6023      	str	r3, [r4, #0]
 8009840:	f7ff fb9a 	bl	8008f78 <_sbrk>
 8009844:	1c43      	adds	r3, r0, #1
 8009846:	d102      	bne.n	800984e <_sbrk_r+0x1a>
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	b103      	cbz	r3, 800984e <_sbrk_r+0x1a>
 800984c:	602b      	str	r3, [r5, #0]
 800984e:	bd38      	pop	{r3, r4, r5, pc}
 8009850:	20000910 	.word	0x20000910

08009854 <siprintf>:
 8009854:	b40e      	push	{r1, r2, r3}
 8009856:	b500      	push	{lr}
 8009858:	b09c      	sub	sp, #112	; 0x70
 800985a:	ab1d      	add	r3, sp, #116	; 0x74
 800985c:	9002      	str	r0, [sp, #8]
 800985e:	9006      	str	r0, [sp, #24]
 8009860:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009864:	4809      	ldr	r0, [pc, #36]	; (800988c <siprintf+0x38>)
 8009866:	9107      	str	r1, [sp, #28]
 8009868:	9104      	str	r1, [sp, #16]
 800986a:	4909      	ldr	r1, [pc, #36]	; (8009890 <siprintf+0x3c>)
 800986c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009870:	9105      	str	r1, [sp, #20]
 8009872:	6800      	ldr	r0, [r0, #0]
 8009874:	9301      	str	r3, [sp, #4]
 8009876:	a902      	add	r1, sp, #8
 8009878:	f000 f868 	bl	800994c <_svfiprintf_r>
 800987c:	9b02      	ldr	r3, [sp, #8]
 800987e:	2200      	movs	r2, #0
 8009880:	701a      	strb	r2, [r3, #0]
 8009882:	b01c      	add	sp, #112	; 0x70
 8009884:	f85d eb04 	ldr.w	lr, [sp], #4
 8009888:	b003      	add	sp, #12
 800988a:	4770      	bx	lr
 800988c:	2000002c 	.word	0x2000002c
 8009890:	ffff0208 	.word	0xffff0208

08009894 <__malloc_lock>:
 8009894:	4770      	bx	lr

08009896 <__malloc_unlock>:
 8009896:	4770      	bx	lr

08009898 <__ssputs_r>:
 8009898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800989c:	688e      	ldr	r6, [r1, #8]
 800989e:	429e      	cmp	r6, r3
 80098a0:	4682      	mov	sl, r0
 80098a2:	460c      	mov	r4, r1
 80098a4:	4690      	mov	r8, r2
 80098a6:	4699      	mov	r9, r3
 80098a8:	d837      	bhi.n	800991a <__ssputs_r+0x82>
 80098aa:	898a      	ldrh	r2, [r1, #12]
 80098ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098b0:	d031      	beq.n	8009916 <__ssputs_r+0x7e>
 80098b2:	6825      	ldr	r5, [r4, #0]
 80098b4:	6909      	ldr	r1, [r1, #16]
 80098b6:	1a6f      	subs	r7, r5, r1
 80098b8:	6965      	ldr	r5, [r4, #20]
 80098ba:	2302      	movs	r3, #2
 80098bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80098c4:	f109 0301 	add.w	r3, r9, #1
 80098c8:	443b      	add	r3, r7
 80098ca:	429d      	cmp	r5, r3
 80098cc:	bf38      	it	cc
 80098ce:	461d      	movcc	r5, r3
 80098d0:	0553      	lsls	r3, r2, #21
 80098d2:	d530      	bpl.n	8009936 <__ssputs_r+0x9e>
 80098d4:	4629      	mov	r1, r5
 80098d6:	f7ff ff53 	bl	8009780 <_malloc_r>
 80098da:	4606      	mov	r6, r0
 80098dc:	b950      	cbnz	r0, 80098f4 <__ssputs_r+0x5c>
 80098de:	230c      	movs	r3, #12
 80098e0:	f8ca 3000 	str.w	r3, [sl]
 80098e4:	89a3      	ldrh	r3, [r4, #12]
 80098e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ea:	81a3      	strh	r3, [r4, #12]
 80098ec:	f04f 30ff 	mov.w	r0, #4294967295
 80098f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f4:	463a      	mov	r2, r7
 80098f6:	6921      	ldr	r1, [r4, #16]
 80098f8:	f000 faa8 	bl	8009e4c <memcpy>
 80098fc:	89a3      	ldrh	r3, [r4, #12]
 80098fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009906:	81a3      	strh	r3, [r4, #12]
 8009908:	6126      	str	r6, [r4, #16]
 800990a:	6165      	str	r5, [r4, #20]
 800990c:	443e      	add	r6, r7
 800990e:	1bed      	subs	r5, r5, r7
 8009910:	6026      	str	r6, [r4, #0]
 8009912:	60a5      	str	r5, [r4, #8]
 8009914:	464e      	mov	r6, r9
 8009916:	454e      	cmp	r6, r9
 8009918:	d900      	bls.n	800991c <__ssputs_r+0x84>
 800991a:	464e      	mov	r6, r9
 800991c:	4632      	mov	r2, r6
 800991e:	4641      	mov	r1, r8
 8009920:	6820      	ldr	r0, [r4, #0]
 8009922:	f000 fa9e 	bl	8009e62 <memmove>
 8009926:	68a3      	ldr	r3, [r4, #8]
 8009928:	1b9b      	subs	r3, r3, r6
 800992a:	60a3      	str	r3, [r4, #8]
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	441e      	add	r6, r3
 8009930:	6026      	str	r6, [r4, #0]
 8009932:	2000      	movs	r0, #0
 8009934:	e7dc      	b.n	80098f0 <__ssputs_r+0x58>
 8009936:	462a      	mov	r2, r5
 8009938:	f000 faac 	bl	8009e94 <_realloc_r>
 800993c:	4606      	mov	r6, r0
 800993e:	2800      	cmp	r0, #0
 8009940:	d1e2      	bne.n	8009908 <__ssputs_r+0x70>
 8009942:	6921      	ldr	r1, [r4, #16]
 8009944:	4650      	mov	r0, sl
 8009946:	f7ff fecd 	bl	80096e4 <_free_r>
 800994a:	e7c8      	b.n	80098de <__ssputs_r+0x46>

0800994c <_svfiprintf_r>:
 800994c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009950:	461d      	mov	r5, r3
 8009952:	898b      	ldrh	r3, [r1, #12]
 8009954:	061f      	lsls	r7, r3, #24
 8009956:	b09d      	sub	sp, #116	; 0x74
 8009958:	4680      	mov	r8, r0
 800995a:	460c      	mov	r4, r1
 800995c:	4616      	mov	r6, r2
 800995e:	d50f      	bpl.n	8009980 <_svfiprintf_r+0x34>
 8009960:	690b      	ldr	r3, [r1, #16]
 8009962:	b96b      	cbnz	r3, 8009980 <_svfiprintf_r+0x34>
 8009964:	2140      	movs	r1, #64	; 0x40
 8009966:	f7ff ff0b 	bl	8009780 <_malloc_r>
 800996a:	6020      	str	r0, [r4, #0]
 800996c:	6120      	str	r0, [r4, #16]
 800996e:	b928      	cbnz	r0, 800997c <_svfiprintf_r+0x30>
 8009970:	230c      	movs	r3, #12
 8009972:	f8c8 3000 	str.w	r3, [r8]
 8009976:	f04f 30ff 	mov.w	r0, #4294967295
 800997a:	e0c8      	b.n	8009b0e <_svfiprintf_r+0x1c2>
 800997c:	2340      	movs	r3, #64	; 0x40
 800997e:	6163      	str	r3, [r4, #20]
 8009980:	2300      	movs	r3, #0
 8009982:	9309      	str	r3, [sp, #36]	; 0x24
 8009984:	2320      	movs	r3, #32
 8009986:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800998a:	2330      	movs	r3, #48	; 0x30
 800998c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009990:	9503      	str	r5, [sp, #12]
 8009992:	f04f 0b01 	mov.w	fp, #1
 8009996:	4637      	mov	r7, r6
 8009998:	463d      	mov	r5, r7
 800999a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800999e:	b10b      	cbz	r3, 80099a4 <_svfiprintf_r+0x58>
 80099a0:	2b25      	cmp	r3, #37	; 0x25
 80099a2:	d13e      	bne.n	8009a22 <_svfiprintf_r+0xd6>
 80099a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80099a8:	d00b      	beq.n	80099c2 <_svfiprintf_r+0x76>
 80099aa:	4653      	mov	r3, sl
 80099ac:	4632      	mov	r2, r6
 80099ae:	4621      	mov	r1, r4
 80099b0:	4640      	mov	r0, r8
 80099b2:	f7ff ff71 	bl	8009898 <__ssputs_r>
 80099b6:	3001      	adds	r0, #1
 80099b8:	f000 80a4 	beq.w	8009b04 <_svfiprintf_r+0x1b8>
 80099bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099be:	4453      	add	r3, sl
 80099c0:	9309      	str	r3, [sp, #36]	; 0x24
 80099c2:	783b      	ldrb	r3, [r7, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f000 809d 	beq.w	8009b04 <_svfiprintf_r+0x1b8>
 80099ca:	2300      	movs	r3, #0
 80099cc:	f04f 32ff 	mov.w	r2, #4294967295
 80099d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099d4:	9304      	str	r3, [sp, #16]
 80099d6:	9307      	str	r3, [sp, #28]
 80099d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099dc:	931a      	str	r3, [sp, #104]	; 0x68
 80099de:	462f      	mov	r7, r5
 80099e0:	2205      	movs	r2, #5
 80099e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80099e6:	4850      	ldr	r0, [pc, #320]	; (8009b28 <_svfiprintf_r+0x1dc>)
 80099e8:	f7f6 fbfa 	bl	80001e0 <memchr>
 80099ec:	9b04      	ldr	r3, [sp, #16]
 80099ee:	b9d0      	cbnz	r0, 8009a26 <_svfiprintf_r+0xda>
 80099f0:	06d9      	lsls	r1, r3, #27
 80099f2:	bf44      	itt	mi
 80099f4:	2220      	movmi	r2, #32
 80099f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099fa:	071a      	lsls	r2, r3, #28
 80099fc:	bf44      	itt	mi
 80099fe:	222b      	movmi	r2, #43	; 0x2b
 8009a00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009a04:	782a      	ldrb	r2, [r5, #0]
 8009a06:	2a2a      	cmp	r2, #42	; 0x2a
 8009a08:	d015      	beq.n	8009a36 <_svfiprintf_r+0xea>
 8009a0a:	9a07      	ldr	r2, [sp, #28]
 8009a0c:	462f      	mov	r7, r5
 8009a0e:	2000      	movs	r0, #0
 8009a10:	250a      	movs	r5, #10
 8009a12:	4639      	mov	r1, r7
 8009a14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a18:	3b30      	subs	r3, #48	; 0x30
 8009a1a:	2b09      	cmp	r3, #9
 8009a1c:	d94d      	bls.n	8009aba <_svfiprintf_r+0x16e>
 8009a1e:	b1b8      	cbz	r0, 8009a50 <_svfiprintf_r+0x104>
 8009a20:	e00f      	b.n	8009a42 <_svfiprintf_r+0xf6>
 8009a22:	462f      	mov	r7, r5
 8009a24:	e7b8      	b.n	8009998 <_svfiprintf_r+0x4c>
 8009a26:	4a40      	ldr	r2, [pc, #256]	; (8009b28 <_svfiprintf_r+0x1dc>)
 8009a28:	1a80      	subs	r0, r0, r2
 8009a2a:	fa0b f000 	lsl.w	r0, fp, r0
 8009a2e:	4318      	orrs	r0, r3
 8009a30:	9004      	str	r0, [sp, #16]
 8009a32:	463d      	mov	r5, r7
 8009a34:	e7d3      	b.n	80099de <_svfiprintf_r+0x92>
 8009a36:	9a03      	ldr	r2, [sp, #12]
 8009a38:	1d11      	adds	r1, r2, #4
 8009a3a:	6812      	ldr	r2, [r2, #0]
 8009a3c:	9103      	str	r1, [sp, #12]
 8009a3e:	2a00      	cmp	r2, #0
 8009a40:	db01      	blt.n	8009a46 <_svfiprintf_r+0xfa>
 8009a42:	9207      	str	r2, [sp, #28]
 8009a44:	e004      	b.n	8009a50 <_svfiprintf_r+0x104>
 8009a46:	4252      	negs	r2, r2
 8009a48:	f043 0302 	orr.w	r3, r3, #2
 8009a4c:	9207      	str	r2, [sp, #28]
 8009a4e:	9304      	str	r3, [sp, #16]
 8009a50:	783b      	ldrb	r3, [r7, #0]
 8009a52:	2b2e      	cmp	r3, #46	; 0x2e
 8009a54:	d10c      	bne.n	8009a70 <_svfiprintf_r+0x124>
 8009a56:	787b      	ldrb	r3, [r7, #1]
 8009a58:	2b2a      	cmp	r3, #42	; 0x2a
 8009a5a:	d133      	bne.n	8009ac4 <_svfiprintf_r+0x178>
 8009a5c:	9b03      	ldr	r3, [sp, #12]
 8009a5e:	1d1a      	adds	r2, r3, #4
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	9203      	str	r2, [sp, #12]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	bfb8      	it	lt
 8009a68:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a6c:	3702      	adds	r7, #2
 8009a6e:	9305      	str	r3, [sp, #20]
 8009a70:	4d2e      	ldr	r5, [pc, #184]	; (8009b2c <_svfiprintf_r+0x1e0>)
 8009a72:	7839      	ldrb	r1, [r7, #0]
 8009a74:	2203      	movs	r2, #3
 8009a76:	4628      	mov	r0, r5
 8009a78:	f7f6 fbb2 	bl	80001e0 <memchr>
 8009a7c:	b138      	cbz	r0, 8009a8e <_svfiprintf_r+0x142>
 8009a7e:	2340      	movs	r3, #64	; 0x40
 8009a80:	1b40      	subs	r0, r0, r5
 8009a82:	fa03 f000 	lsl.w	r0, r3, r0
 8009a86:	9b04      	ldr	r3, [sp, #16]
 8009a88:	4303      	orrs	r3, r0
 8009a8a:	3701      	adds	r7, #1
 8009a8c:	9304      	str	r3, [sp, #16]
 8009a8e:	7839      	ldrb	r1, [r7, #0]
 8009a90:	4827      	ldr	r0, [pc, #156]	; (8009b30 <_svfiprintf_r+0x1e4>)
 8009a92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a96:	2206      	movs	r2, #6
 8009a98:	1c7e      	adds	r6, r7, #1
 8009a9a:	f7f6 fba1 	bl	80001e0 <memchr>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d038      	beq.n	8009b14 <_svfiprintf_r+0x1c8>
 8009aa2:	4b24      	ldr	r3, [pc, #144]	; (8009b34 <_svfiprintf_r+0x1e8>)
 8009aa4:	bb13      	cbnz	r3, 8009aec <_svfiprintf_r+0x1a0>
 8009aa6:	9b03      	ldr	r3, [sp, #12]
 8009aa8:	3307      	adds	r3, #7
 8009aaa:	f023 0307 	bic.w	r3, r3, #7
 8009aae:	3308      	adds	r3, #8
 8009ab0:	9303      	str	r3, [sp, #12]
 8009ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ab4:	444b      	add	r3, r9
 8009ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab8:	e76d      	b.n	8009996 <_svfiprintf_r+0x4a>
 8009aba:	fb05 3202 	mla	r2, r5, r2, r3
 8009abe:	2001      	movs	r0, #1
 8009ac0:	460f      	mov	r7, r1
 8009ac2:	e7a6      	b.n	8009a12 <_svfiprintf_r+0xc6>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	3701      	adds	r7, #1
 8009ac8:	9305      	str	r3, [sp, #20]
 8009aca:	4619      	mov	r1, r3
 8009acc:	250a      	movs	r5, #10
 8009ace:	4638      	mov	r0, r7
 8009ad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ad4:	3a30      	subs	r2, #48	; 0x30
 8009ad6:	2a09      	cmp	r2, #9
 8009ad8:	d903      	bls.n	8009ae2 <_svfiprintf_r+0x196>
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0c8      	beq.n	8009a70 <_svfiprintf_r+0x124>
 8009ade:	9105      	str	r1, [sp, #20]
 8009ae0:	e7c6      	b.n	8009a70 <_svfiprintf_r+0x124>
 8009ae2:	fb05 2101 	mla	r1, r5, r1, r2
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	4607      	mov	r7, r0
 8009aea:	e7f0      	b.n	8009ace <_svfiprintf_r+0x182>
 8009aec:	ab03      	add	r3, sp, #12
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	4622      	mov	r2, r4
 8009af2:	4b11      	ldr	r3, [pc, #68]	; (8009b38 <_svfiprintf_r+0x1ec>)
 8009af4:	a904      	add	r1, sp, #16
 8009af6:	4640      	mov	r0, r8
 8009af8:	f3af 8000 	nop.w
 8009afc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009b00:	4681      	mov	r9, r0
 8009b02:	d1d6      	bne.n	8009ab2 <_svfiprintf_r+0x166>
 8009b04:	89a3      	ldrh	r3, [r4, #12]
 8009b06:	065b      	lsls	r3, r3, #25
 8009b08:	f53f af35 	bmi.w	8009976 <_svfiprintf_r+0x2a>
 8009b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b0e:	b01d      	add	sp, #116	; 0x74
 8009b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b14:	ab03      	add	r3, sp, #12
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	4622      	mov	r2, r4
 8009b1a:	4b07      	ldr	r3, [pc, #28]	; (8009b38 <_svfiprintf_r+0x1ec>)
 8009b1c:	a904      	add	r1, sp, #16
 8009b1e:	4640      	mov	r0, r8
 8009b20:	f000 f882 	bl	8009c28 <_printf_i>
 8009b24:	e7ea      	b.n	8009afc <_svfiprintf_r+0x1b0>
 8009b26:	bf00      	nop
 8009b28:	08009f58 	.word	0x08009f58
 8009b2c:	08009f5e 	.word	0x08009f5e
 8009b30:	08009f62 	.word	0x08009f62
 8009b34:	00000000 	.word	0x00000000
 8009b38:	08009899 	.word	0x08009899

08009b3c <_printf_common>:
 8009b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b40:	4691      	mov	r9, r2
 8009b42:	461f      	mov	r7, r3
 8009b44:	688a      	ldr	r2, [r1, #8]
 8009b46:	690b      	ldr	r3, [r1, #16]
 8009b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	bfb8      	it	lt
 8009b50:	4613      	movlt	r3, r2
 8009b52:	f8c9 3000 	str.w	r3, [r9]
 8009b56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	b112      	cbz	r2, 8009b66 <_printf_common+0x2a>
 8009b60:	3301      	adds	r3, #1
 8009b62:	f8c9 3000 	str.w	r3, [r9]
 8009b66:	6823      	ldr	r3, [r4, #0]
 8009b68:	0699      	lsls	r1, r3, #26
 8009b6a:	bf42      	ittt	mi
 8009b6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009b70:	3302      	addmi	r3, #2
 8009b72:	f8c9 3000 	strmi.w	r3, [r9]
 8009b76:	6825      	ldr	r5, [r4, #0]
 8009b78:	f015 0506 	ands.w	r5, r5, #6
 8009b7c:	d107      	bne.n	8009b8e <_printf_common+0x52>
 8009b7e:	f104 0a19 	add.w	sl, r4, #25
 8009b82:	68e3      	ldr	r3, [r4, #12]
 8009b84:	f8d9 2000 	ldr.w	r2, [r9]
 8009b88:	1a9b      	subs	r3, r3, r2
 8009b8a:	42ab      	cmp	r3, r5
 8009b8c:	dc28      	bgt.n	8009be0 <_printf_common+0xa4>
 8009b8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009b92:	6822      	ldr	r2, [r4, #0]
 8009b94:	3300      	adds	r3, #0
 8009b96:	bf18      	it	ne
 8009b98:	2301      	movne	r3, #1
 8009b9a:	0692      	lsls	r2, r2, #26
 8009b9c:	d42d      	bmi.n	8009bfa <_printf_common+0xbe>
 8009b9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ba2:	4639      	mov	r1, r7
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	47c0      	blx	r8
 8009ba8:	3001      	adds	r0, #1
 8009baa:	d020      	beq.n	8009bee <_printf_common+0xb2>
 8009bac:	6823      	ldr	r3, [r4, #0]
 8009bae:	68e5      	ldr	r5, [r4, #12]
 8009bb0:	f8d9 2000 	ldr.w	r2, [r9]
 8009bb4:	f003 0306 	and.w	r3, r3, #6
 8009bb8:	2b04      	cmp	r3, #4
 8009bba:	bf08      	it	eq
 8009bbc:	1aad      	subeq	r5, r5, r2
 8009bbe:	68a3      	ldr	r3, [r4, #8]
 8009bc0:	6922      	ldr	r2, [r4, #16]
 8009bc2:	bf0c      	ite	eq
 8009bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bc8:	2500      	movne	r5, #0
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	bfc4      	itt	gt
 8009bce:	1a9b      	subgt	r3, r3, r2
 8009bd0:	18ed      	addgt	r5, r5, r3
 8009bd2:	f04f 0900 	mov.w	r9, #0
 8009bd6:	341a      	adds	r4, #26
 8009bd8:	454d      	cmp	r5, r9
 8009bda:	d11a      	bne.n	8009c12 <_printf_common+0xd6>
 8009bdc:	2000      	movs	r0, #0
 8009bde:	e008      	b.n	8009bf2 <_printf_common+0xb6>
 8009be0:	2301      	movs	r3, #1
 8009be2:	4652      	mov	r2, sl
 8009be4:	4639      	mov	r1, r7
 8009be6:	4630      	mov	r0, r6
 8009be8:	47c0      	blx	r8
 8009bea:	3001      	adds	r0, #1
 8009bec:	d103      	bne.n	8009bf6 <_printf_common+0xba>
 8009bee:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf6:	3501      	adds	r5, #1
 8009bf8:	e7c3      	b.n	8009b82 <_printf_common+0x46>
 8009bfa:	18e1      	adds	r1, r4, r3
 8009bfc:	1c5a      	adds	r2, r3, #1
 8009bfe:	2030      	movs	r0, #48	; 0x30
 8009c00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c04:	4422      	add	r2, r4
 8009c06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c0e:	3302      	adds	r3, #2
 8009c10:	e7c5      	b.n	8009b9e <_printf_common+0x62>
 8009c12:	2301      	movs	r3, #1
 8009c14:	4622      	mov	r2, r4
 8009c16:	4639      	mov	r1, r7
 8009c18:	4630      	mov	r0, r6
 8009c1a:	47c0      	blx	r8
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	d0e6      	beq.n	8009bee <_printf_common+0xb2>
 8009c20:	f109 0901 	add.w	r9, r9, #1
 8009c24:	e7d8      	b.n	8009bd8 <_printf_common+0x9c>
	...

08009c28 <_printf_i>:
 8009c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009c30:	460c      	mov	r4, r1
 8009c32:	7e09      	ldrb	r1, [r1, #24]
 8009c34:	b085      	sub	sp, #20
 8009c36:	296e      	cmp	r1, #110	; 0x6e
 8009c38:	4617      	mov	r7, r2
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	4698      	mov	r8, r3
 8009c3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c40:	f000 80b3 	beq.w	8009daa <_printf_i+0x182>
 8009c44:	d822      	bhi.n	8009c8c <_printf_i+0x64>
 8009c46:	2963      	cmp	r1, #99	; 0x63
 8009c48:	d036      	beq.n	8009cb8 <_printf_i+0x90>
 8009c4a:	d80a      	bhi.n	8009c62 <_printf_i+0x3a>
 8009c4c:	2900      	cmp	r1, #0
 8009c4e:	f000 80b9 	beq.w	8009dc4 <_printf_i+0x19c>
 8009c52:	2958      	cmp	r1, #88	; 0x58
 8009c54:	f000 8083 	beq.w	8009d5e <_printf_i+0x136>
 8009c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009c60:	e032      	b.n	8009cc8 <_printf_i+0xa0>
 8009c62:	2964      	cmp	r1, #100	; 0x64
 8009c64:	d001      	beq.n	8009c6a <_printf_i+0x42>
 8009c66:	2969      	cmp	r1, #105	; 0x69
 8009c68:	d1f6      	bne.n	8009c58 <_printf_i+0x30>
 8009c6a:	6820      	ldr	r0, [r4, #0]
 8009c6c:	6813      	ldr	r3, [r2, #0]
 8009c6e:	0605      	lsls	r5, r0, #24
 8009c70:	f103 0104 	add.w	r1, r3, #4
 8009c74:	d52a      	bpl.n	8009ccc <_printf_i+0xa4>
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6011      	str	r1, [r2, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	da03      	bge.n	8009c86 <_printf_i+0x5e>
 8009c7e:	222d      	movs	r2, #45	; 0x2d
 8009c80:	425b      	negs	r3, r3
 8009c82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009c86:	486f      	ldr	r0, [pc, #444]	; (8009e44 <_printf_i+0x21c>)
 8009c88:	220a      	movs	r2, #10
 8009c8a:	e039      	b.n	8009d00 <_printf_i+0xd8>
 8009c8c:	2973      	cmp	r1, #115	; 0x73
 8009c8e:	f000 809d 	beq.w	8009dcc <_printf_i+0x1a4>
 8009c92:	d808      	bhi.n	8009ca6 <_printf_i+0x7e>
 8009c94:	296f      	cmp	r1, #111	; 0x6f
 8009c96:	d020      	beq.n	8009cda <_printf_i+0xb2>
 8009c98:	2970      	cmp	r1, #112	; 0x70
 8009c9a:	d1dd      	bne.n	8009c58 <_printf_i+0x30>
 8009c9c:	6823      	ldr	r3, [r4, #0]
 8009c9e:	f043 0320 	orr.w	r3, r3, #32
 8009ca2:	6023      	str	r3, [r4, #0]
 8009ca4:	e003      	b.n	8009cae <_printf_i+0x86>
 8009ca6:	2975      	cmp	r1, #117	; 0x75
 8009ca8:	d017      	beq.n	8009cda <_printf_i+0xb2>
 8009caa:	2978      	cmp	r1, #120	; 0x78
 8009cac:	d1d4      	bne.n	8009c58 <_printf_i+0x30>
 8009cae:	2378      	movs	r3, #120	; 0x78
 8009cb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cb4:	4864      	ldr	r0, [pc, #400]	; (8009e48 <_printf_i+0x220>)
 8009cb6:	e055      	b.n	8009d64 <_printf_i+0x13c>
 8009cb8:	6813      	ldr	r3, [r2, #0]
 8009cba:	1d19      	adds	r1, r3, #4
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	6011      	str	r1, [r2, #0]
 8009cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e08c      	b.n	8009de6 <_printf_i+0x1be>
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	6011      	str	r1, [r2, #0]
 8009cd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009cd4:	bf18      	it	ne
 8009cd6:	b21b      	sxthne	r3, r3
 8009cd8:	e7cf      	b.n	8009c7a <_printf_i+0x52>
 8009cda:	6813      	ldr	r3, [r2, #0]
 8009cdc:	6825      	ldr	r5, [r4, #0]
 8009cde:	1d18      	adds	r0, r3, #4
 8009ce0:	6010      	str	r0, [r2, #0]
 8009ce2:	0628      	lsls	r0, r5, #24
 8009ce4:	d501      	bpl.n	8009cea <_printf_i+0xc2>
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	e002      	b.n	8009cf0 <_printf_i+0xc8>
 8009cea:	0668      	lsls	r0, r5, #25
 8009cec:	d5fb      	bpl.n	8009ce6 <_printf_i+0xbe>
 8009cee:	881b      	ldrh	r3, [r3, #0]
 8009cf0:	4854      	ldr	r0, [pc, #336]	; (8009e44 <_printf_i+0x21c>)
 8009cf2:	296f      	cmp	r1, #111	; 0x6f
 8009cf4:	bf14      	ite	ne
 8009cf6:	220a      	movne	r2, #10
 8009cf8:	2208      	moveq	r2, #8
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d00:	6865      	ldr	r5, [r4, #4]
 8009d02:	60a5      	str	r5, [r4, #8]
 8009d04:	2d00      	cmp	r5, #0
 8009d06:	f2c0 8095 	blt.w	8009e34 <_printf_i+0x20c>
 8009d0a:	6821      	ldr	r1, [r4, #0]
 8009d0c:	f021 0104 	bic.w	r1, r1, #4
 8009d10:	6021      	str	r1, [r4, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d13d      	bne.n	8009d92 <_printf_i+0x16a>
 8009d16:	2d00      	cmp	r5, #0
 8009d18:	f040 808e 	bne.w	8009e38 <_printf_i+0x210>
 8009d1c:	4665      	mov	r5, ip
 8009d1e:	2a08      	cmp	r2, #8
 8009d20:	d10b      	bne.n	8009d3a <_printf_i+0x112>
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	07db      	lsls	r3, r3, #31
 8009d26:	d508      	bpl.n	8009d3a <_printf_i+0x112>
 8009d28:	6923      	ldr	r3, [r4, #16]
 8009d2a:	6862      	ldr	r2, [r4, #4]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	bfde      	ittt	le
 8009d30:	2330      	movle	r3, #48	; 0x30
 8009d32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d3a:	ebac 0305 	sub.w	r3, ip, r5
 8009d3e:	6123      	str	r3, [r4, #16]
 8009d40:	f8cd 8000 	str.w	r8, [sp]
 8009d44:	463b      	mov	r3, r7
 8009d46:	aa03      	add	r2, sp, #12
 8009d48:	4621      	mov	r1, r4
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	f7ff fef6 	bl	8009b3c <_printf_common>
 8009d50:	3001      	adds	r0, #1
 8009d52:	d14d      	bne.n	8009df0 <_printf_i+0x1c8>
 8009d54:	f04f 30ff 	mov.w	r0, #4294967295
 8009d58:	b005      	add	sp, #20
 8009d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d5e:	4839      	ldr	r0, [pc, #228]	; (8009e44 <_printf_i+0x21c>)
 8009d60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009d64:	6813      	ldr	r3, [r2, #0]
 8009d66:	6821      	ldr	r1, [r4, #0]
 8009d68:	1d1d      	adds	r5, r3, #4
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6015      	str	r5, [r2, #0]
 8009d6e:	060a      	lsls	r2, r1, #24
 8009d70:	d50b      	bpl.n	8009d8a <_printf_i+0x162>
 8009d72:	07ca      	lsls	r2, r1, #31
 8009d74:	bf44      	itt	mi
 8009d76:	f041 0120 	orrmi.w	r1, r1, #32
 8009d7a:	6021      	strmi	r1, [r4, #0]
 8009d7c:	b91b      	cbnz	r3, 8009d86 <_printf_i+0x15e>
 8009d7e:	6822      	ldr	r2, [r4, #0]
 8009d80:	f022 0220 	bic.w	r2, r2, #32
 8009d84:	6022      	str	r2, [r4, #0]
 8009d86:	2210      	movs	r2, #16
 8009d88:	e7b7      	b.n	8009cfa <_printf_i+0xd2>
 8009d8a:	064d      	lsls	r5, r1, #25
 8009d8c:	bf48      	it	mi
 8009d8e:	b29b      	uxthmi	r3, r3
 8009d90:	e7ef      	b.n	8009d72 <_printf_i+0x14a>
 8009d92:	4665      	mov	r5, ip
 8009d94:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d98:	fb02 3311 	mls	r3, r2, r1, r3
 8009d9c:	5cc3      	ldrb	r3, [r0, r3]
 8009d9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009da2:	460b      	mov	r3, r1
 8009da4:	2900      	cmp	r1, #0
 8009da6:	d1f5      	bne.n	8009d94 <_printf_i+0x16c>
 8009da8:	e7b9      	b.n	8009d1e <_printf_i+0xf6>
 8009daa:	6813      	ldr	r3, [r2, #0]
 8009dac:	6825      	ldr	r5, [r4, #0]
 8009dae:	6961      	ldr	r1, [r4, #20]
 8009db0:	1d18      	adds	r0, r3, #4
 8009db2:	6010      	str	r0, [r2, #0]
 8009db4:	0628      	lsls	r0, r5, #24
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	d501      	bpl.n	8009dbe <_printf_i+0x196>
 8009dba:	6019      	str	r1, [r3, #0]
 8009dbc:	e002      	b.n	8009dc4 <_printf_i+0x19c>
 8009dbe:	066a      	lsls	r2, r5, #25
 8009dc0:	d5fb      	bpl.n	8009dba <_printf_i+0x192>
 8009dc2:	8019      	strh	r1, [r3, #0]
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	6123      	str	r3, [r4, #16]
 8009dc8:	4665      	mov	r5, ip
 8009dca:	e7b9      	b.n	8009d40 <_printf_i+0x118>
 8009dcc:	6813      	ldr	r3, [r2, #0]
 8009dce:	1d19      	adds	r1, r3, #4
 8009dd0:	6011      	str	r1, [r2, #0]
 8009dd2:	681d      	ldr	r5, [r3, #0]
 8009dd4:	6862      	ldr	r2, [r4, #4]
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	4628      	mov	r0, r5
 8009dda:	f7f6 fa01 	bl	80001e0 <memchr>
 8009dde:	b108      	cbz	r0, 8009de4 <_printf_i+0x1bc>
 8009de0:	1b40      	subs	r0, r0, r5
 8009de2:	6060      	str	r0, [r4, #4]
 8009de4:	6863      	ldr	r3, [r4, #4]
 8009de6:	6123      	str	r3, [r4, #16]
 8009de8:	2300      	movs	r3, #0
 8009dea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dee:	e7a7      	b.n	8009d40 <_printf_i+0x118>
 8009df0:	6923      	ldr	r3, [r4, #16]
 8009df2:	462a      	mov	r2, r5
 8009df4:	4639      	mov	r1, r7
 8009df6:	4630      	mov	r0, r6
 8009df8:	47c0      	blx	r8
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	d0aa      	beq.n	8009d54 <_printf_i+0x12c>
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	079b      	lsls	r3, r3, #30
 8009e02:	d413      	bmi.n	8009e2c <_printf_i+0x204>
 8009e04:	68e0      	ldr	r0, [r4, #12]
 8009e06:	9b03      	ldr	r3, [sp, #12]
 8009e08:	4298      	cmp	r0, r3
 8009e0a:	bfb8      	it	lt
 8009e0c:	4618      	movlt	r0, r3
 8009e0e:	e7a3      	b.n	8009d58 <_printf_i+0x130>
 8009e10:	2301      	movs	r3, #1
 8009e12:	464a      	mov	r2, r9
 8009e14:	4639      	mov	r1, r7
 8009e16:	4630      	mov	r0, r6
 8009e18:	47c0      	blx	r8
 8009e1a:	3001      	adds	r0, #1
 8009e1c:	d09a      	beq.n	8009d54 <_printf_i+0x12c>
 8009e1e:	3501      	adds	r5, #1
 8009e20:	68e3      	ldr	r3, [r4, #12]
 8009e22:	9a03      	ldr	r2, [sp, #12]
 8009e24:	1a9b      	subs	r3, r3, r2
 8009e26:	42ab      	cmp	r3, r5
 8009e28:	dcf2      	bgt.n	8009e10 <_printf_i+0x1e8>
 8009e2a:	e7eb      	b.n	8009e04 <_printf_i+0x1dc>
 8009e2c:	2500      	movs	r5, #0
 8009e2e:	f104 0919 	add.w	r9, r4, #25
 8009e32:	e7f5      	b.n	8009e20 <_printf_i+0x1f8>
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1ac      	bne.n	8009d92 <_printf_i+0x16a>
 8009e38:	7803      	ldrb	r3, [r0, #0]
 8009e3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e42:	e76c      	b.n	8009d1e <_printf_i+0xf6>
 8009e44:	08009f69 	.word	0x08009f69
 8009e48:	08009f7a 	.word	0x08009f7a

08009e4c <memcpy>:
 8009e4c:	b510      	push	{r4, lr}
 8009e4e:	1e43      	subs	r3, r0, #1
 8009e50:	440a      	add	r2, r1
 8009e52:	4291      	cmp	r1, r2
 8009e54:	d100      	bne.n	8009e58 <memcpy+0xc>
 8009e56:	bd10      	pop	{r4, pc}
 8009e58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e60:	e7f7      	b.n	8009e52 <memcpy+0x6>

08009e62 <memmove>:
 8009e62:	4288      	cmp	r0, r1
 8009e64:	b510      	push	{r4, lr}
 8009e66:	eb01 0302 	add.w	r3, r1, r2
 8009e6a:	d807      	bhi.n	8009e7c <memmove+0x1a>
 8009e6c:	1e42      	subs	r2, r0, #1
 8009e6e:	4299      	cmp	r1, r3
 8009e70:	d00a      	beq.n	8009e88 <memmove+0x26>
 8009e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e76:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009e7a:	e7f8      	b.n	8009e6e <memmove+0xc>
 8009e7c:	4283      	cmp	r3, r0
 8009e7e:	d9f5      	bls.n	8009e6c <memmove+0xa>
 8009e80:	1881      	adds	r1, r0, r2
 8009e82:	1ad2      	subs	r2, r2, r3
 8009e84:	42d3      	cmn	r3, r2
 8009e86:	d100      	bne.n	8009e8a <memmove+0x28>
 8009e88:	bd10      	pop	{r4, pc}
 8009e8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e8e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009e92:	e7f7      	b.n	8009e84 <memmove+0x22>

08009e94 <_realloc_r>:
 8009e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e96:	4607      	mov	r7, r0
 8009e98:	4614      	mov	r4, r2
 8009e9a:	460e      	mov	r6, r1
 8009e9c:	b921      	cbnz	r1, 8009ea8 <_realloc_r+0x14>
 8009e9e:	4611      	mov	r1, r2
 8009ea0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009ea4:	f7ff bc6c 	b.w	8009780 <_malloc_r>
 8009ea8:	b922      	cbnz	r2, 8009eb4 <_realloc_r+0x20>
 8009eaa:	f7ff fc1b 	bl	80096e4 <_free_r>
 8009eae:	4625      	mov	r5, r4
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eb4:	f000 f814 	bl	8009ee0 <_malloc_usable_size_r>
 8009eb8:	42a0      	cmp	r0, r4
 8009eba:	d20f      	bcs.n	8009edc <_realloc_r+0x48>
 8009ebc:	4621      	mov	r1, r4
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	f7ff fc5e 	bl	8009780 <_malloc_r>
 8009ec4:	4605      	mov	r5, r0
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d0f2      	beq.n	8009eb0 <_realloc_r+0x1c>
 8009eca:	4631      	mov	r1, r6
 8009ecc:	4622      	mov	r2, r4
 8009ece:	f7ff ffbd 	bl	8009e4c <memcpy>
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	f7ff fc05 	bl	80096e4 <_free_r>
 8009eda:	e7e9      	b.n	8009eb0 <_realloc_r+0x1c>
 8009edc:	4635      	mov	r5, r6
 8009ede:	e7e7      	b.n	8009eb0 <_realloc_r+0x1c>

08009ee0 <_malloc_usable_size_r>:
 8009ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ee4:	1f18      	subs	r0, r3, #4
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	bfbc      	itt	lt
 8009eea:	580b      	ldrlt	r3, [r1, r0]
 8009eec:	18c0      	addlt	r0, r0, r3
 8009eee:	4770      	bx	lr

08009ef0 <_init>:
 8009ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef2:	bf00      	nop
 8009ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ef6:	bc08      	pop	{r3}
 8009ef8:	469e      	mov	lr, r3
 8009efa:	4770      	bx	lr

08009efc <_fini>:
 8009efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efe:	bf00      	nop
 8009f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f02:	bc08      	pop	{r3}
 8009f04:	469e      	mov	lr, r3
 8009f06:	4770      	bx	lr
